
MEGA32_Infared.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001cb4  00001d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800168  00800168  00001e50  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00001e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  000028f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004b0  00000000  00000000  00002b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b18  00000000  00000000  00002fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000149e  00000000  00000000  00005ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002029  00000000  00000000  00006f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000410  00000000  00000000  00008fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006ea  00000000  00000000  000093b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bdf  00000000  00000000  00009a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000006d5  00000000  00000000  0000a679  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0000ad4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 37       	cpi	r26, 0x77	; 119
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 eb       	ldi	r30, 0xB4	; 180
      78:	fc e1       	ldi	r31, 0x1C	; 28
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
      86:	0e 94 b2 07 	call	0xf64	; 0xf64 <main>
      8a:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2c_init>:
#include <avr/delay.h>
#include "I2C.h"
#include "uart.h"

void i2c_init()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
  // ---> Write code here to initialize the TWBR register
  // LM75 clock has be to be lower than 400 kHz (according to LM75 data sheet)
  // The TWBR must be at least 10 in master mode (Mega32 data book)
  // 3686,4kHz/(16+2(TWBR)*4^TWPS)
  TWBR = 0x0A;
      9a:	80 e2       	ldi	r24, 0x20	; 32
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	2a e0       	ldi	r18, 0x0A	; 10
      a0:	fc 01       	movw	r30, r24
      a2:	20 83       	st	Z, r18
  //Prescaler value = 1;
  TWSR = TWSR & 0b11111100;
      a4:	81 e2       	ldi	r24, 0x21	; 33
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	21 e2       	ldi	r18, 0x21	; 33
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	f9 01       	movw	r30, r18
      ae:	20 81       	ld	r18, Z
      b0:	2c 7f       	andi	r18, 0xFC	; 252
      b2:	fc 01       	movw	r30, r24
      b4:	20 83       	st	Z, r18
  
}
      b6:	cf 91       	pop	r28
      b8:	df 91       	pop	r29
      ba:	08 95       	ret

000000bc <i2c_start>:

void i2c_start()
{
      bc:	df 93       	push	r29
      be:	cf 93       	push	r28
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
      c4:	86 e5       	ldi	r24, 0x56	; 86
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	24 ea       	ldi	r18, 0xA4	; 164
      ca:	fc 01       	movw	r30, r24
      cc:	20 83       	st	Z, r18
  //When TWINT is 1, start condition sent
  while ((TWCR & (1<<TWINT)) == 0)
      ce:	00 00       	nop
      d0:	86 e5       	ldi	r24, 0x56	; 86
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	fc 01       	movw	r30, r24
      d6:	80 81       	ld	r24, Z
      d8:	88 23       	and	r24, r24
      da:	d4 f7       	brge	.-12     	; 0xd0 <i2c_start+0x14>
  {}  	
}
      dc:	cf 91       	pop	r28
      de:	df 91       	pop	r29
      e0:	08 95       	ret

000000e2 <i2c_write>:

void i2c_write(unsigned char data)
{
      e2:	df 93       	push	r29
      e4:	cf 93       	push	r28
      e6:	0f 92       	push	r0
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	89 83       	std	Y+1, r24	; 0x01
  TWDR = data;
      ee:	83 e2       	ldi	r24, 0x23	; 35
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	29 81       	ldd	r18, Y+1	; 0x01
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
  TWCR = (1<<TWINT) | (1<<TWEN);
      f8:	86 e5       	ldi	r24, 0x56	; 86
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	24 e8       	ldi	r18, 0x84	; 132
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
  while ((TWCR & (1<<TWINT)) == 0)
     102:	00 00       	nop
     104:	86 e5       	ldi	r24, 0x56	; 86
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	fc 01       	movw	r30, r24
     10a:	80 81       	ld	r24, Z
     10c:	88 23       	and	r24, r24
     10e:	d4 f7       	brge	.-12     	; 0x104 <i2c_write+0x22>
  {}	
}
     110:	0f 90       	pop	r0
     112:	cf 91       	pop	r28
     114:	df 91       	pop	r29
     116:	08 95       	ret

00000118 <i2c_read>:

unsigned char i2c_read (unsigned char isLast)
{
     118:	df 93       	push	r29
     11a:	cf 93       	push	r28
     11c:	0f 92       	push	r0
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
     122:	89 83       	std	Y+1, r24	; 0x01
  if (isLast == 0) //If we want to read more than 1 byte
     124:	89 81       	ldd	r24, Y+1	; 0x01
     126:	88 23       	and	r24, r24
     128:	31 f4       	brne	.+12     	; 0x136 <i2c_read+0x1e>
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     12a:	86 e5       	ldi	r24, 0x56	; 86
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	24 ec       	ldi	r18, 0xC4	; 196
     130:	fc 01       	movw	r30, r24
     132:	20 83       	st	Z, r18
  else             //If we want to read only one byte
    TWCR = (1<<TWINT) | (1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0)
     134:	06 c0       	rjmp	.+12     	; 0x142 <i2c_read+0x2a>
unsigned char i2c_read (unsigned char isLast)
{
  if (isLast == 0) //If we want to read more than 1 byte
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
  else             //If we want to read only one byte
    TWCR = (1<<TWINT) | (1<<TWEN);
     136:	86 e5       	ldi	r24, 0x56	; 86
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	24 e8       	ldi	r18, 0x84	; 132
     13c:	fc 01       	movw	r30, r24
     13e:	20 83       	st	Z, r18
  while ((TWCR & (1<<TWINT)) == 0)
     140:	00 00       	nop
     142:	86 e5       	ldi	r24, 0x56	; 86
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	fc 01       	movw	r30, r24
     148:	80 81       	ld	r24, Z
     14a:	88 23       	and	r24, r24
     14c:	d4 f7       	brge	.-12     	; 0x142 <i2c_read+0x2a>
  {}
  return TWDR;
     14e:	83 e2       	ldi	r24, 0x23	; 35
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	fc 01       	movw	r30, r24
     154:	80 81       	ld	r24, Z
}
     156:	0f 90       	pop	r0
     158:	cf 91       	pop	r28
     15a:	df 91       	pop	r29
     15c:	08 95       	ret

0000015e <i2c_stop>:

void i2c_stop()
{
     15e:	df 93       	push	r29
     160:	cf 93       	push	r28
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     166:	86 e5       	ldi	r24, 0x56	; 86
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	24 e9       	ldi	r18, 0x94	; 148
     16c:	fc 01       	movw	r30, r24
     16e:	20 83       	st	Z, r18
}
     170:	cf 91       	pop	r28
     172:	df 91       	pop	r29
     174:	08 95       	ret

00000176 <E_High>:
#define NUMBER_OF_CHARS 16
#define LINE2_START_ADR 0x40

//*********************** PRIVATE (static) operations *********************
static void E_High()
{
     176:	df 93       	push	r29
     178:	cf 93       	push	r28
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
  // Set the E pin high
  PORT_lcd |= 1<<E;
     17e:	85 e3       	ldi	r24, 0x35	; 53
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	25 e3       	ldi	r18, 0x35	; 53
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	f9 01       	movw	r30, r18
     188:	20 81       	ld	r18, Z
     18a:	24 60       	ori	r18, 0x04	; 4
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
  // Min 230 ns E-pulse-width : PWEH
  _NOP();
     190:	00 00       	nop
  _NOP();
     192:	00 00       	nop
  _NOP();
     194:	00 00       	nop
}
     196:	cf 91       	pop	r28
     198:	df 91       	pop	r29
     19a:	08 95       	ret

0000019c <E_Low>:

static void E_Low()
{
     19c:	df 93       	push	r29
     19e:	cf 93       	push	r28
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
  // Set the E pin low
  PORT_lcd &= ~(1<<E);
     1a4:	85 e3       	ldi	r24, 0x35	; 53
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	25 e3       	ldi	r18, 0x35	; 53
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	f9 01       	movw	r30, r18
     1ae:	20 81       	ld	r18, Z
     1b0:	2b 7f       	andi	r18, 0xFB	; 251
     1b2:	fc 01       	movw	r30, r24
     1b4:	20 83       	st	Z, r18
  // Enable cycle time : Min 500 ns
  _NOP();
     1b6:	00 00       	nop
  _NOP();
     1b8:	00 00       	nop
}
     1ba:	cf 91       	pop	r28
     1bc:	df 91       	pop	r29
     1be:	08 95       	ret

000001c0 <waitBusy>:

static void waitBusy()
{
     1c0:	df 93       	push	r29
     1c2:	cf 93       	push	r28
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <waitBusy+0x6>
     1c6:	0f 92       	push	r0
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
unsigned int counter = 0;
     1cc:	1a 82       	std	Y+2, r1	; 0x02
     1ce:	19 82       	std	Y+1, r1	; 0x01
unsigned char BusyStatus;
                                                            
  // DB7-DB4 = input
  DDR_lcd &= 0b00001111;
     1d0:	84 e3       	ldi	r24, 0x34	; 52
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	24 e3       	ldi	r18, 0x34	; 52
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	f9 01       	movw	r30, r18
     1da:	20 81       	ld	r18, Z
     1dc:	2f 70       	andi	r18, 0x0F	; 15
     1de:	fc 01       	movw	r30, r24
     1e0:	20 83       	st	Z, r18
  // RW = 1, RS = 0
  PORT_lcd |= 1<<RW;
     1e2:	85 e3       	ldi	r24, 0x35	; 53
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	25 e3       	ldi	r18, 0x35	; 53
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	f9 01       	movw	r30, r18
     1ec:	20 81       	ld	r18, Z
     1ee:	22 60       	ori	r18, 0x02	; 2
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
  PORT_lcd &= ~(1<<RS);
     1f4:	85 e3       	ldi	r24, 0x35	; 53
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	25 e3       	ldi	r18, 0x35	; 53
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	f9 01       	movw	r30, r18
     1fe:	20 81       	ld	r18, Z
     200:	2e 7f       	andi	r18, 0xFE	; 254
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
  do
  { 
    // Set pin E high (tAS > 40 ns gained via the call of E_High() )
    // - and wait tDDR (min. 160 ns)
    E_High();
     206:	0e 94 bb 00 	call	0x176	; 0x176 <E_High>
    // Read BUSY flag (DB7)  
    BusyStatus = PIN_lcd & 1<<BUSY;
     20a:	83 e3       	ldi	r24, 0x33	; 51
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	fc 01       	movw	r30, r24
     210:	80 81       	ld	r24, Z
     212:	80 78       	andi	r24, 0x80	; 128
     214:	8b 83       	std	Y+3, r24	; 0x03
    // Min 230 ns E-pulse-width : (PWEH > 230 ns is gained)
    E_Low();
     216:	0e 94 ce 00 	call	0x19c	; 0x19c <E_Low>
    // Dummy "reading" AC3-AC0		              
    E_High();
     21a:	0e 94 bb 00 	call	0x176	; 0x176 <E_High>
    E_Low();
     21e:	0e 94 ce 00 	call	0x19c	; 0x19c <E_Low>
    // "Counter" used for implementing timeout:
    // If the Busy flag is not reset within (appr.) 100 ms, the loop is broken
    counter++;
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	9a 81       	ldd	r25, Y+2	; 0x02
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	9a 83       	std	Y+2, r25	; 0x02
     22a:	89 83       	std	Y+1, r24	; 0x01
  } while( BusyStatus && counter );  
     22c:	8b 81       	ldd	r24, Y+3	; 0x03
     22e:	88 23       	and	r24, r24
     230:	21 f0       	breq	.+8      	; 0x23a <waitBusy+0x7a>
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	9a 81       	ldd	r25, Y+2	; 0x02
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	31 f7       	brne	.-52     	; 0x206 <waitBusy+0x46>
  // DB7-DB4 = output
  DDR_lcd |= 0b11110000;
     23a:	84 e3       	ldi	r24, 0x34	; 52
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	24 e3       	ldi	r18, 0x34	; 52
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	f9 01       	movw	r30, r18
     244:	20 81       	ld	r18, Z
     246:	20 6f       	ori	r18, 0xF0	; 240
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
}  
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	cf 91       	pop	r28
     254:	df 91       	pop	r29
     256:	08 95       	ret

00000258 <sendInstruction>:

static void sendInstruction( unsigned char data )
{      
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	0f 92       	push	r0
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	89 83       	std	Y+1, r24	; 0x01
  // Wait for display controller ready
  waitBusy();
     264:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <waitBusy>
  // Write high nibble ::
  // RW = 0, RS = 0, E = 0, DB7-DB4 = Data high nibble
  PORT_lcd = (data & 0b11110000);
     268:	85 e3       	ldi	r24, 0x35	; 53
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	29 81       	ldd	r18, Y+1	; 0x01
     26e:	20 7f       	andi	r18, 0xF0	; 240
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
  // Set pin E high (tAS > 40 ns gained via calling E_High() )
  E_High();
     274:	0e 94 bb 00 	call	0x176	; 0x176 <E_High>
  // Set pin E low (PWEH > 230 ns is gained)
  E_Low();
     278:	0e 94 ce 00 	call	0x19c	; 0x19c <E_Low>

  // Write low nibble ::
  // RS = 0, RW = 0, E = 0, DB7-DB4 = Data low nibble
  PORT_lcd = (data & 0x0F)<<4;
     27c:	85 e3       	ldi	r24, 0x35	; 53
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	22 2f       	mov	r18, r18
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	22 95       	swap	r18
     288:	32 95       	swap	r19
     28a:	30 7f       	andi	r19, 0xF0	; 240
     28c:	32 27       	eor	r19, r18
     28e:	20 7f       	andi	r18, 0xF0	; 240
     290:	32 27       	eor	r19, r18
     292:	fc 01       	movw	r30, r24
     294:	20 83       	st	Z, r18
  // Set pin E high (tAS > 40 ns is gained via calling E_High() )
  E_High();
     296:	0e 94 bb 00 	call	0x176	; 0x176 <E_High>
  // Set pin E low (PWEH > 230 ns is gained)
  E_Low();
     29a:	0e 94 ce 00 	call	0x19c	; 0x19c <E_Low>
}
     29e:	0f 90       	pop	r0
     2a0:	cf 91       	pop	r28
     2a2:	df 91       	pop	r29
     2a4:	08 95       	ret

000002a6 <sendData>:

static void sendData( unsigned char data )
{      
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	0f 92       	push	r0
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	89 83       	std	Y+1, r24	; 0x01
	// Wait for display controller ready
	waitBusy();
     2b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <waitBusy>
	
	// Write high nibble ::
	// RW = 1, RS = 0, E = 0, DB7-DB4 = Data high nibble
	PORT_lcd = (data & 0b11110000) | 0b00000001;
     2b6:	85 e3       	ldi	r24, 0x35	; 53
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	29 81       	ldd	r18, Y+1	; 0x01
     2bc:	20 7f       	andi	r18, 0xF0	; 240
     2be:	21 60       	ori	r18, 0x01	; 1
     2c0:	fc 01       	movw	r30, r24
     2c2:	20 83       	st	Z, r18
	// Set pin E high (tAS > 40 ns gained via calling E_High() )
	E_High();
     2c4:	0e 94 bb 00 	call	0x176	; 0x176 <E_High>
	// Set pin E low (PWEH > 230 ns is gained)
	E_Low();
     2c8:	0e 94 ce 00 	call	0x19c	; 0x19c <E_Low>
	
	// Write low nibble ::
	// RS = 0, RW = 0, E = 0, DB7-DB4 = Data low nibble
	PORT_lcd = (data & 0x0F)<<4 | 0b00000001;
     2cc:	85 e3       	ldi	r24, 0x35	; 53
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	29 81       	ldd	r18, Y+1	; 0x01
     2d2:	22 2f       	mov	r18, r18
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	22 95       	swap	r18
     2d8:	32 95       	swap	r19
     2da:	30 7f       	andi	r19, 0xF0	; 240
     2dc:	32 27       	eor	r19, r18
     2de:	20 7f       	andi	r18, 0xF0	; 240
     2e0:	32 27       	eor	r19, r18
     2e2:	21 60       	ori	r18, 0x01	; 1
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
	// Set pin E high (tAS > 40 ns is gained via calling E_High() )
	E_High();
     2e8:	0e 94 bb 00 	call	0x176	; 0x176 <E_High>
	// Set pin E low (PWEH > 230 ns is gained)
	E_Low();	
     2ec:	0e 94 ce 00 	call	0x19c	; 0x19c <E_Low>
}
     2f0:	0f 90       	pop	r0
     2f2:	cf 91       	pop	r28
     2f4:	df 91       	pop	r29
     2f6:	08 95       	ret

000002f8 <LCDInit>:
//*********************** PUBLIC operations *****************************

// Initializes the display, blanks it and sets "current display position"
// at the upper line, leftmost character (cursor invisible)
void LCDInit()
{
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	df 93       	push	r29
     2fe:	cf 93       	push	r28
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	e8 97       	sbiw	r28, 0x38	; 56
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
  // Initializing the used port
  DDR_lcd = 0xFF;  // bits 0-7 output
     310:	84 e3       	ldi	r24, 0x34	; 52
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	2f ef       	ldi	r18, 0xFF	; 255
     316:	fc 01       	movw	r30, r24
     318:	20 83       	st	Z, r18
  PORT_lcd = 0x00; // bits 0-7 low 
     31a:	85 e3       	ldi	r24, 0x35	; 53
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	fc 01       	movw	r30, r24
     320:	10 82       	st	Z, r1
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	a8 e4       	ldi	r26, 0x48	; 72
     328:	b2 e4       	ldi	r27, 0x42	; 66
     32a:	89 83       	std	Y+1, r24	; 0x01
     32c:	9a 83       	std	Y+2, r25	; 0x02
     32e:	ab 83       	std	Y+3, r26	; 0x03
     330:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     332:	69 81       	ldd	r22, Y+1	; 0x01
     334:	7a 81       	ldd	r23, Y+2	; 0x02
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	9c 81       	ldd	r25, Y+4	; 0x04
     33a:	26 e6       	ldi	r18, 0x66	; 102
     33c:	36 e6       	ldi	r19, 0x66	; 102
     33e:	46 e6       	ldi	r20, 0x66	; 102
     340:	54 e4       	ldi	r21, 0x44	; 68
     342:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	8d 83       	std	Y+5, r24	; 0x05
     34c:	9e 83       	std	Y+6, r25	; 0x06
     34e:	af 83       	std	Y+7, r26	; 0x07
     350:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     352:	11 e0       	ldi	r17, 0x01	; 1
     354:	6d 81       	ldd	r22, Y+5	; 0x05
     356:	7e 81       	ldd	r23, Y+6	; 0x06
     358:	8f 81       	ldd	r24, Y+7	; 0x07
     35a:	98 85       	ldd	r25, Y+8	; 0x08
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	40 e8       	ldi	r20, 0x80	; 128
     362:	5f e3       	ldi	r21, 0x3F	; 63
     364:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__ltsf2>
     368:	88 23       	and	r24, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <LCDInit+0x76>
     36c:	10 e0       	ldi	r17, 0x00	; 0
     36e:	11 23       	and	r17, r17
     370:	29 f0       	breq	.+10     	; 0x37c <LCDInit+0x84>
		__ticks = 1;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	9a 87       	std	Y+10, r25	; 0x0a
     378:	89 87       	std	Y+9, r24	; 0x09
     37a:	46 c0       	rjmp	.+140    	; 0x408 <LCDInit+0x110>
	else if (__tmp > 65535)
     37c:	11 e0       	ldi	r17, 0x01	; 1
     37e:	6d 81       	ldd	r22, Y+5	; 0x05
     380:	7e 81       	ldd	r23, Y+6	; 0x06
     382:	8f 81       	ldd	r24, Y+7	; 0x07
     384:	98 85       	ldd	r25, Y+8	; 0x08
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	3f ef       	ldi	r19, 0xFF	; 255
     38a:	4f e7       	ldi	r20, 0x7F	; 127
     38c:	57 e4       	ldi	r21, 0x47	; 71
     38e:	0e 94 8e 0a 	call	0x151c	; 0x151c <__gtsf2>
     392:	18 16       	cp	r1, r24
     394:	0c f0       	brlt	.+2      	; 0x398 <LCDInit+0xa0>
     396:	10 e0       	ldi	r17, 0x00	; 0
     398:	11 23       	and	r17, r17
     39a:	61 f1       	breq	.+88     	; 0x3f4 <LCDInit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     39c:	69 81       	ldd	r22, Y+1	; 0x01
     39e:	7a 81       	ldd	r23, Y+2	; 0x02
     3a0:	8b 81       	ldd	r24, Y+3	; 0x03
     3a2:	9c 81       	ldd	r25, Y+4	; 0x04
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 e2       	ldi	r20, 0x20	; 32
     3aa:	51 e4       	ldi	r21, 0x41	; 65
     3ac:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	bc 01       	movw	r22, r24
     3b6:	cd 01       	movw	r24, r26
     3b8:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fixunssfsi>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	9a 87       	std	Y+10, r25	; 0x0a
     3c2:	89 87       	std	Y+9, r24	; 0x09
     3c4:	12 c0       	rjmp	.+36     	; 0x3ea <LCDInit+0xf2>
     3c6:	8c e5       	ldi	r24, 0x5C	; 92
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	9c 87       	std	Y+12, r25	; 0x0c
     3cc:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     3d0:	9c 85       	ldd	r25, Y+12	; 0x0c
     3d2:	8c 01       	movw	r16, r24
     3d4:	c8 01       	movw	r24, r16
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCDInit+0xde>
     3da:	8c 01       	movw	r16, r24
     3dc:	1c 87       	std	Y+12, r17	; 0x0c
     3de:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3e0:	89 85       	ldd	r24, Y+9	; 0x09
     3e2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	9a 87       	std	Y+10, r25	; 0x0a
     3e8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ea:	89 85       	ldd	r24, Y+9	; 0x09
     3ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	51 f7       	brne	.-44     	; 0x3c6 <LCDInit+0xce>
     3f2:	17 c0       	rjmp	.+46     	; 0x422 <LCDInit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	6d 81       	ldd	r22, Y+5	; 0x05
     3f6:	7e 81       	ldd	r23, Y+6	; 0x06
     3f8:	8f 81       	ldd	r24, Y+7	; 0x07
     3fa:	98 85       	ldd	r25, Y+8	; 0x08
     3fc:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fixunssfsi>
     400:	dc 01       	movw	r26, r24
     402:	cb 01       	movw	r24, r22
     404:	9a 87       	std	Y+10, r25	; 0x0a
     406:	89 87       	std	Y+9, r24	; 0x09
     408:	89 85       	ldd	r24, Y+9	; 0x09
     40a:	9a 85       	ldd	r25, Y+10	; 0x0a
     40c:	9e 87       	std	Y+14, r25	; 0x0e
     40e:	8d 87       	std	Y+13, r24	; 0x0d
     410:	8d 85       	ldd	r24, Y+13	; 0x0d
     412:	9e 85       	ldd	r25, Y+14	; 0x0e
     414:	8c 01       	movw	r16, r24
     416:	f8 01       	movw	r30, r16
     418:	31 97       	sbiw	r30, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <LCDInit+0x120>
     41c:	8f 01       	movw	r16, r30
     41e:	1e 87       	std	Y+14, r17	; 0x0e
     420:	0d 87       	std	Y+13, r16	; 0x0d
	 
  // Wait 50 ms (min.15 ms demanded according to the data sheet)
  _delay_ms(50);
  // Function set (still 8 bit interface)
  PORT_lcd = 0b00110000;
     422:	85 e3       	ldi	r24, 0x35	; 53
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	20 e3       	ldi	r18, 0x30	; 48
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
  E_High();
     42c:	0e 94 bb 00 	call	0x176	; 0x176 <E_High>
  E_Low();
     430:	0e 94 ce 00 	call	0x19c	; 0x19c <E_Low>
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	a0 e2       	ldi	r26, 0x20	; 32
     43a:	b1 e4       	ldi	r27, 0x41	; 65
     43c:	8f 87       	std	Y+15, r24	; 0x0f
     43e:	98 8b       	std	Y+16, r25	; 0x10
     440:	a9 8b       	std	Y+17, r26	; 0x11
     442:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     444:	6f 85       	ldd	r22, Y+15	; 0x0f
     446:	78 89       	ldd	r23, Y+16	; 0x10
     448:	89 89       	ldd	r24, Y+17	; 0x11
     44a:	9a 89       	ldd	r25, Y+18	; 0x12
     44c:	26 e6       	ldi	r18, 0x66	; 102
     44e:	36 e6       	ldi	r19, 0x66	; 102
     450:	46 e6       	ldi	r20, 0x66	; 102
     452:	54 e4       	ldi	r21, 0x44	; 68
     454:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     458:	dc 01       	movw	r26, r24
     45a:	cb 01       	movw	r24, r22
     45c:	8b 8b       	std	Y+19, r24	; 0x13
     45e:	9c 8b       	std	Y+20, r25	; 0x14
     460:	ad 8b       	std	Y+21, r26	; 0x15
     462:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     464:	11 e0       	ldi	r17, 0x01	; 1
     466:	6b 89       	ldd	r22, Y+19	; 0x13
     468:	7c 89       	ldd	r23, Y+20	; 0x14
     46a:	8d 89       	ldd	r24, Y+21	; 0x15
     46c:	9e 89       	ldd	r25, Y+22	; 0x16
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	40 e8       	ldi	r20, 0x80	; 128
     474:	5f e3       	ldi	r21, 0x3F	; 63
     476:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__ltsf2>
     47a:	88 23       	and	r24, r24
     47c:	0c f0       	brlt	.+2      	; 0x480 <LCDInit+0x188>
     47e:	10 e0       	ldi	r17, 0x00	; 0
     480:	11 23       	and	r17, r17
     482:	29 f0       	breq	.+10     	; 0x48e <LCDInit+0x196>
		__ticks = 1;
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	98 8f       	std	Y+24, r25	; 0x18
     48a:	8f 8b       	std	Y+23, r24	; 0x17
     48c:	46 c0       	rjmp	.+140    	; 0x51a <LCDInit+0x222>
	else if (__tmp > 65535)
     48e:	11 e0       	ldi	r17, 0x01	; 1
     490:	6b 89       	ldd	r22, Y+19	; 0x13
     492:	7c 89       	ldd	r23, Y+20	; 0x14
     494:	8d 89       	ldd	r24, Y+21	; 0x15
     496:	9e 89       	ldd	r25, Y+22	; 0x16
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	3f ef       	ldi	r19, 0xFF	; 255
     49c:	4f e7       	ldi	r20, 0x7F	; 127
     49e:	57 e4       	ldi	r21, 0x47	; 71
     4a0:	0e 94 8e 0a 	call	0x151c	; 0x151c <__gtsf2>
     4a4:	18 16       	cp	r1, r24
     4a6:	0c f0       	brlt	.+2      	; 0x4aa <LCDInit+0x1b2>
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	11 23       	and	r17, r17
     4ac:	61 f1       	breq	.+88     	; 0x506 <LCDInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ae:	6f 85       	ldd	r22, Y+15	; 0x0f
     4b0:	78 89       	ldd	r23, Y+16	; 0x10
     4b2:	89 89       	ldd	r24, Y+17	; 0x11
     4b4:	9a 89       	ldd	r25, Y+18	; 0x12
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e2       	ldi	r20, 0x20	; 32
     4bc:	51 e4       	ldi	r21, 0x41	; 65
     4be:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	bc 01       	movw	r22, r24
     4c8:	cd 01       	movw	r24, r26
     4ca:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fixunssfsi>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	98 8f       	std	Y+24, r25	; 0x18
     4d4:	8f 8b       	std	Y+23, r24	; 0x17
     4d6:	12 c0       	rjmp	.+36     	; 0x4fc <LCDInit+0x204>
     4d8:	8c e5       	ldi	r24, 0x5C	; 92
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	9a 8f       	std	Y+26, r25	; 0x1a
     4de:	89 8f       	std	Y+25, r24	; 0x19
     4e0:	89 8d       	ldd	r24, Y+25	; 0x19
     4e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     4e4:	8c 01       	movw	r16, r24
     4e6:	c8 01       	movw	r24, r16
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <LCDInit+0x1f0>
     4ec:	8c 01       	movw	r16, r24
     4ee:	1a 8f       	std	Y+26, r17	; 0x1a
     4f0:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f2:	8f 89       	ldd	r24, Y+23	; 0x17
     4f4:	98 8d       	ldd	r25, Y+24	; 0x18
     4f6:	01 97       	sbiw	r24, 0x01	; 1
     4f8:	98 8f       	std	Y+24, r25	; 0x18
     4fa:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4fc:	8f 89       	ldd	r24, Y+23	; 0x17
     4fe:	98 8d       	ldd	r25, Y+24	; 0x18
     500:	00 97       	sbiw	r24, 0x00	; 0
     502:	51 f7       	brne	.-44     	; 0x4d8 <LCDInit+0x1e0>
     504:	17 c0       	rjmp	.+46     	; 0x534 <LCDInit+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     506:	6b 89       	ldd	r22, Y+19	; 0x13
     508:	7c 89       	ldd	r23, Y+20	; 0x14
     50a:	8d 89       	ldd	r24, Y+21	; 0x15
     50c:	9e 89       	ldd	r25, Y+22	; 0x16
     50e:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fixunssfsi>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	98 8f       	std	Y+24, r25	; 0x18
     518:	8f 8b       	std	Y+23, r24	; 0x17
     51a:	8f 89       	ldd	r24, Y+23	; 0x17
     51c:	98 8d       	ldd	r25, Y+24	; 0x18
     51e:	9c 8f       	std	Y+28, r25	; 0x1c
     520:	8b 8f       	std	Y+27, r24	; 0x1b
     522:	8b 8d       	ldd	r24, Y+27	; 0x1b
     524:	9c 8d       	ldd	r25, Y+28	; 0x1c
     526:	8c 01       	movw	r16, r24
     528:	f8 01       	movw	r30, r16
     52a:	31 97       	sbiw	r30, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <LCDInit+0x232>
     52e:	8f 01       	movw	r16, r30
     530:	1c 8f       	std	Y+28, r17	; 0x1c
     532:	0b 8f       	std	Y+27, r16	; 0x1b

  // Wait 10 ms (min.4,1 ms demanded according to the data sheet)
  _delay_ms(10);
  // Function set (still 8 bit interface)
  PORT_lcd = 0b00110000;
     534:	85 e3       	ldi	r24, 0x35	; 53
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	20 e3       	ldi	r18, 0x30	; 48
     53a:	fc 01       	movw	r30, r24
     53c:	20 83       	st	Z, r18
  E_High();
     53e:	0e 94 bb 00 	call	0x176	; 0x176 <E_High>
  E_Low();
     542:	0e 94 ce 00 	call	0x19c	; 0x19c <E_Low>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	a0 e2       	ldi	r26, 0x20	; 32
     54c:	b1 e4       	ldi	r27, 0x41	; 65
     54e:	8d 8f       	std	Y+29, r24	; 0x1d
     550:	9e 8f       	std	Y+30, r25	; 0x1e
     552:	af 8f       	std	Y+31, r26	; 0x1f
     554:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     556:	6d 8d       	ldd	r22, Y+29	; 0x1d
     558:	7e 8d       	ldd	r23, Y+30	; 0x1e
     55a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     55c:	98 a1       	ldd	r25, Y+32	; 0x20
     55e:	26 e6       	ldi	r18, 0x66	; 102
     560:	36 e6       	ldi	r19, 0x66	; 102
     562:	46 e6       	ldi	r20, 0x66	; 102
     564:	54 e4       	ldi	r21, 0x44	; 68
     566:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	89 a3       	std	Y+33, r24	; 0x21
     570:	9a a3       	std	Y+34, r25	; 0x22
     572:	ab a3       	std	Y+35, r26	; 0x23
     574:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     576:	11 e0       	ldi	r17, 0x01	; 1
     578:	69 a1       	ldd	r22, Y+33	; 0x21
     57a:	7a a1       	ldd	r23, Y+34	; 0x22
     57c:	8b a1       	ldd	r24, Y+35	; 0x23
     57e:	9c a1       	ldd	r25, Y+36	; 0x24
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	40 e8       	ldi	r20, 0x80	; 128
     586:	5f e3       	ldi	r21, 0x3F	; 63
     588:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__ltsf2>
     58c:	88 23       	and	r24, r24
     58e:	0c f0       	brlt	.+2      	; 0x592 <LCDInit+0x29a>
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	11 23       	and	r17, r17
     594:	29 f0       	breq	.+10     	; 0x5a0 <LCDInit+0x2a8>
		__ticks = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9e a3       	std	Y+38, r25	; 0x26
     59c:	8d a3       	std	Y+37, r24	; 0x25
     59e:	46 c0       	rjmp	.+140    	; 0x62c <LCDInit+0x334>
	else if (__tmp > 65535)
     5a0:	11 e0       	ldi	r17, 0x01	; 1
     5a2:	69 a1       	ldd	r22, Y+33	; 0x21
     5a4:	7a a1       	ldd	r23, Y+34	; 0x22
     5a6:	8b a1       	ldd	r24, Y+35	; 0x23
     5a8:	9c a1       	ldd	r25, Y+36	; 0x24
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	3f ef       	ldi	r19, 0xFF	; 255
     5ae:	4f e7       	ldi	r20, 0x7F	; 127
     5b0:	57 e4       	ldi	r21, 0x47	; 71
     5b2:	0e 94 8e 0a 	call	0x151c	; 0x151c <__gtsf2>
     5b6:	18 16       	cp	r1, r24
     5b8:	0c f0       	brlt	.+2      	; 0x5bc <LCDInit+0x2c4>
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	11 23       	and	r17, r17
     5be:	61 f1       	breq	.+88     	; 0x618 <LCDInit+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     5c2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     5c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     5c6:	98 a1       	ldd	r25, Y+32	; 0x20
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e2       	ldi	r20, 0x20	; 32
     5ce:	51 e4       	ldi	r21, 0x41	; 65
     5d0:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     5d4:	dc 01       	movw	r26, r24
     5d6:	cb 01       	movw	r24, r22
     5d8:	bc 01       	movw	r22, r24
     5da:	cd 01       	movw	r24, r26
     5dc:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fixunssfsi>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	9e a3       	std	Y+38, r25	; 0x26
     5e6:	8d a3       	std	Y+37, r24	; 0x25
     5e8:	12 c0       	rjmp	.+36     	; 0x60e <LCDInit+0x316>
     5ea:	8c e5       	ldi	r24, 0x5C	; 92
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	98 a7       	std	Y+40, r25	; 0x28
     5f0:	8f a3       	std	Y+39, r24	; 0x27
     5f2:	8f a1       	ldd	r24, Y+39	; 0x27
     5f4:	98 a5       	ldd	r25, Y+40	; 0x28
     5f6:	8c 01       	movw	r16, r24
     5f8:	c8 01       	movw	r24, r16
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <LCDInit+0x302>
     5fe:	8c 01       	movw	r16, r24
     600:	18 a7       	std	Y+40, r17	; 0x28
     602:	0f a3       	std	Y+39, r16	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     604:	8d a1       	ldd	r24, Y+37	; 0x25
     606:	9e a1       	ldd	r25, Y+38	; 0x26
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	9e a3       	std	Y+38, r25	; 0x26
     60c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     60e:	8d a1       	ldd	r24, Y+37	; 0x25
     610:	9e a1       	ldd	r25, Y+38	; 0x26
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	51 f7       	brne	.-44     	; 0x5ea <LCDInit+0x2f2>
     616:	17 c0       	rjmp	.+46     	; 0x646 <LCDInit+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     618:	69 a1       	ldd	r22, Y+33	; 0x21
     61a:	7a a1       	ldd	r23, Y+34	; 0x22
     61c:	8b a1       	ldd	r24, Y+35	; 0x23
     61e:	9c a1       	ldd	r25, Y+36	; 0x24
     620:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fixunssfsi>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	9e a3       	std	Y+38, r25	; 0x26
     62a:	8d a3       	std	Y+37, r24	; 0x25
     62c:	8d a1       	ldd	r24, Y+37	; 0x25
     62e:	9e a1       	ldd	r25, Y+38	; 0x26
     630:	9a a7       	std	Y+42, r25	; 0x2a
     632:	89 a7       	std	Y+41, r24	; 0x29
     634:	89 a5       	ldd	r24, Y+41	; 0x29
     636:	9a a5       	ldd	r25, Y+42	; 0x2a
     638:	8c 01       	movw	r16, r24
     63a:	f8 01       	movw	r30, r16
     63c:	31 97       	sbiw	r30, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <LCDInit+0x344>
     640:	8f 01       	movw	r16, r30
     642:	1a a7       	std	Y+42, r17	; 0x2a
     644:	09 a7       	std	Y+41, r16	; 0x29

  // Wait 10 ms (min.100 us demanded according to the data sheet)
  _delay_ms(10);
  // Function set (still 8 bit interface)
  PORT_lcd = 0b00110000;
     646:	85 e3       	ldi	r24, 0x35	; 53
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	20 e3       	ldi	r18, 0x30	; 48
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
  E_High();
     650:	0e 94 bb 00 	call	0x176	; 0x176 <E_High>
  E_Low();
     654:	0e 94 ce 00 	call	0x19c	; 0x19c <E_Low>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	a0 e2       	ldi	r26, 0x20	; 32
     65e:	b1 e4       	ldi	r27, 0x41	; 65
     660:	8b a7       	std	Y+43, r24	; 0x2b
     662:	9c a7       	std	Y+44, r25	; 0x2c
     664:	ad a7       	std	Y+45, r26	; 0x2d
     666:	be a7       	std	Y+46, r27	; 0x2e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     668:	6b a5       	ldd	r22, Y+43	; 0x2b
     66a:	7c a5       	ldd	r23, Y+44	; 0x2c
     66c:	8d a5       	ldd	r24, Y+45	; 0x2d
     66e:	9e a5       	ldd	r25, Y+46	; 0x2e
     670:	26 e6       	ldi	r18, 0x66	; 102
     672:	36 e6       	ldi	r19, 0x66	; 102
     674:	46 e6       	ldi	r20, 0x66	; 102
     676:	54 e4       	ldi	r21, 0x44	; 68
     678:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     67c:	dc 01       	movw	r26, r24
     67e:	cb 01       	movw	r24, r22
     680:	8f a7       	std	Y+47, r24	; 0x2f
     682:	98 ab       	std	Y+48, r25	; 0x30
     684:	a9 ab       	std	Y+49, r26	; 0x31
     686:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     688:	11 e0       	ldi	r17, 0x01	; 1
     68a:	6f a5       	ldd	r22, Y+47	; 0x2f
     68c:	78 a9       	ldd	r23, Y+48	; 0x30
     68e:	89 a9       	ldd	r24, Y+49	; 0x31
     690:	9a a9       	ldd	r25, Y+50	; 0x32
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	40 e8       	ldi	r20, 0x80	; 128
     698:	5f e3       	ldi	r21, 0x3F	; 63
     69a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__ltsf2>
     69e:	88 23       	and	r24, r24
     6a0:	0c f0       	brlt	.+2      	; 0x6a4 <LCDInit+0x3ac>
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	11 23       	and	r17, r17
     6a6:	29 f0       	breq	.+10     	; 0x6b2 <LCDInit+0x3ba>
		__ticks = 1;
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	9c ab       	std	Y+52, r25	; 0x34
     6ae:	8b ab       	std	Y+51, r24	; 0x33
     6b0:	46 c0       	rjmp	.+140    	; 0x73e <LCDInit+0x446>
	else if (__tmp > 65535)
     6b2:	11 e0       	ldi	r17, 0x01	; 1
     6b4:	6f a5       	ldd	r22, Y+47	; 0x2f
     6b6:	78 a9       	ldd	r23, Y+48	; 0x30
     6b8:	89 a9       	ldd	r24, Y+49	; 0x31
     6ba:	9a a9       	ldd	r25, Y+50	; 0x32
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	3f ef       	ldi	r19, 0xFF	; 255
     6c0:	4f e7       	ldi	r20, 0x7F	; 127
     6c2:	57 e4       	ldi	r21, 0x47	; 71
     6c4:	0e 94 8e 0a 	call	0x151c	; 0x151c <__gtsf2>
     6c8:	18 16       	cp	r1, r24
     6ca:	0c f0       	brlt	.+2      	; 0x6ce <LCDInit+0x3d6>
     6cc:	10 e0       	ldi	r17, 0x00	; 0
     6ce:	11 23       	and	r17, r17
     6d0:	61 f1       	breq	.+88     	; 0x72a <LCDInit+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d2:	6b a5       	ldd	r22, Y+43	; 0x2b
     6d4:	7c a5       	ldd	r23, Y+44	; 0x2c
     6d6:	8d a5       	ldd	r24, Y+45	; 0x2d
     6d8:	9e a5       	ldd	r25, Y+46	; 0x2e
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 e2       	ldi	r20, 0x20	; 32
     6e0:	51 e4       	ldi	r21, 0x41	; 65
     6e2:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	bc 01       	movw	r22, r24
     6ec:	cd 01       	movw	r24, r26
     6ee:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	9c ab       	std	Y+52, r25	; 0x34
     6f8:	8b ab       	std	Y+51, r24	; 0x33
     6fa:	12 c0       	rjmp	.+36     	; 0x720 <LCDInit+0x428>
     6fc:	8c e5       	ldi	r24, 0x5C	; 92
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	9e ab       	std	Y+54, r25	; 0x36
     702:	8d ab       	std	Y+53, r24	; 0x35
     704:	8d a9       	ldd	r24, Y+53	; 0x35
     706:	9e a9       	ldd	r25, Y+54	; 0x36
     708:	8c 01       	movw	r16, r24
     70a:	c8 01       	movw	r24, r16
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	f1 f7       	brne	.-4      	; 0x70c <LCDInit+0x414>
     710:	8c 01       	movw	r16, r24
     712:	1e ab       	std	Y+54, r17	; 0x36
     714:	0d ab       	std	Y+53, r16	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     716:	8b a9       	ldd	r24, Y+51	; 0x33
     718:	9c a9       	ldd	r25, Y+52	; 0x34
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	9c ab       	std	Y+52, r25	; 0x34
     71e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     720:	8b a9       	ldd	r24, Y+51	; 0x33
     722:	9c a9       	ldd	r25, Y+52	; 0x34
     724:	00 97       	sbiw	r24, 0x00	; 0
     726:	51 f7       	brne	.-44     	; 0x6fc <LCDInit+0x404>
     728:	17 c0       	rjmp	.+46     	; 0x758 <LCDInit+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     72a:	6f a5       	ldd	r22, Y+47	; 0x2f
     72c:	78 a9       	ldd	r23, Y+48	; 0x30
     72e:	89 a9       	ldd	r24, Y+49	; 0x31
     730:	9a a9       	ldd	r25, Y+50	; 0x32
     732:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fixunssfsi>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	9c ab       	std	Y+52, r25	; 0x34
     73c:	8b ab       	std	Y+51, r24	; 0x33
     73e:	8b a9       	ldd	r24, Y+51	; 0x33
     740:	9c a9       	ldd	r25, Y+52	; 0x34
     742:	98 af       	std	Y+56, r25	; 0x38
     744:	8f ab       	std	Y+55, r24	; 0x37
     746:	8f a9       	ldd	r24, Y+55	; 0x37
     748:	98 ad       	ldd	r25, Y+56	; 0x38
     74a:	8c 01       	movw	r16, r24
     74c:	f8 01       	movw	r30, r16
     74e:	31 97       	sbiw	r30, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <LCDInit+0x456>
     752:	8f 01       	movw	r16, r30
     754:	18 af       	std	Y+56, r17	; 0x38
     756:	0f ab       	std	Y+55, r16	; 0x37

  // Wait 10 ms (min.100 us demanded according to the data sheet)
  _delay_ms(10);
  // Function set (now selecting 4 bit interface !)
  // - and polling the busy flag will now be possible
  PORT_lcd = 0b00100000;
     758:	85 e3       	ldi	r24, 0x35	; 53
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	20 e2       	ldi	r18, 0x20	; 32
     75e:	fc 01       	movw	r30, r24
     760:	20 83       	st	Z, r18
  E_High();
     762:	0e 94 bb 00 	call	0x176	; 0x176 <E_High>
  E_Low();
     766:	0e 94 ce 00 	call	0x19c	; 0x19c <E_Low>

  // Function Set : 4 bit interface, 2 line display, 5x8 dots
  sendInstruction( 0b00101000 );
     76a:	88 e2       	ldi	r24, 0x28	; 40
     76c:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
  // Display, cursor and blinking OFF
  sendInstruction( 0b00001000 );
     770:	88 e0       	ldi	r24, 0x08	; 8
     772:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
  // Clear display and set DDRAM adr = 0	
  sendInstruction( 0b00000001 );
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
  // By display writes : Increment cursor / no shift
  sendInstruction( 0b00000110 );
     77c:	86 e0       	ldi	r24, 0x06	; 6
     77e:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
  // Display ON, cursor and blinking OFF
  sendInstruction( 0b00001100 );
     782:	8c e0       	ldi	r24, 0x0C	; 12
     784:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
}
     788:	e8 96       	adiw	r28, 0x38	; 56
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	cf 91       	pop	r28
     796:	df 91       	pop	r29
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	08 95       	ret

0000079e <LCDClear>:

// Blanks the display and sets "current display position" to
// the upper line, leftmost character
void LCDClear()
{
     79e:	df 93       	push	r29
     7a0:	cf 93       	push	r28
     7a2:	0f 92       	push	r0
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
	const unsigned char clearAndReturn = 0b000000001;
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	89 83       	std	Y+1, r24	; 0x01
	sendInstruction(clearAndReturn);
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
		
}
     7b2:	0f 90       	pop	r0
     7b4:	cf 91       	pop	r28
     7b6:	df 91       	pop	r29
     7b8:	08 95       	ret

000007ba <LCDGotoXY>:

// Sets DDRAM address to character position x and line number y
void LCDGotoXY( unsigned char x, unsigned char y )
{
     7ba:	df 93       	push	r29
     7bc:	cf 93       	push	r28
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <LCDGotoXY+0x6>
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	6a 83       	std	Y+2, r22	; 0x02
	if ( (x < NUMBER_OF_CHARS) && (y < NUMBER_OF_LINES) ){
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	80 31       	cpi	r24, 0x10	; 16
     7cc:	70 f4       	brcc	.+28     	; 0x7ea <LCDGotoXY+0x30>
     7ce:	8a 81       	ldd	r24, Y+2	; 0x02
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	58 f4       	brcc	.+22     	; 0x7ea <LCDGotoXY+0x30>
		sendInstruction( 0b10000000 | ((y*LINE2_START_ADR)+x) );
     7d4:	8a 81       	ldd	r24, Y+2	; 0x02
     7d6:	98 2f       	mov	r25, r24
     7d8:	92 95       	swap	r25
     7da:	99 0f       	add	r25, r25
     7dc:	99 0f       	add	r25, r25
     7de:	90 7c       	andi	r25, 0xC0	; 192
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	89 0f       	add	r24, r25
     7e4:	80 68       	ori	r24, 0x80	; 128
     7e6:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
	}	
}
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	cf 91       	pop	r28
     7f0:	df 91       	pop	r29
     7f2:	08 95       	ret

000007f4 <LCDDispChar>:

// Display "ch" at "current display position"
void LCDDispChar( char ch )
{
     7f4:	df 93       	push	r29
     7f6:	cf 93       	push	r28
     7f8:	0f 92       	push	r0
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	89 83       	std	Y+1, r24	; 0x01
	sendData(ch);
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sendData>
}
     806:	0f 90       	pop	r0
     808:	cf 91       	pop	r28
     80a:	df 91       	pop	r29
     80c:	08 95       	ret

0000080e <LCDDispString>:

// Displays the string "str" starting at "current display position"
void LCDDispString( char *str )
{
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	00 d0       	rcall	.+0      	; 0x814 <LCDDispString+0x6>
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	9a 83       	std	Y+2, r25	; 0x02
     81a:	89 83       	std	Y+1, r24	; 0x01
	while(*str){
     81c:	0c c0       	rjmp	.+24     	; 0x836 <LCDDispString+0x28>
		sendData(*str++);
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	9a 81       	ldd	r25, Y+2	; 0x02
     822:	fc 01       	movw	r30, r24
     824:	20 81       	ld	r18, Z
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	9a 81       	ldd	r25, Y+2	; 0x02
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	9a 83       	std	Y+2, r25	; 0x02
     82e:	89 83       	std	Y+1, r24	; 0x01
     830:	82 2f       	mov	r24, r18
     832:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sendData>
}

// Displays the string "str" starting at "current display position"
void LCDDispString( char *str )
{
	while(*str){
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	9a 81       	ldd	r25, Y+2	; 0x02
     83a:	fc 01       	movw	r30, r24
     83c:	80 81       	ld	r24, Z
     83e:	88 23       	and	r24, r24
     840:	71 f7       	brne	.-36     	; 0x81e <LCDDispString+0x10>
		sendData(*str++);
	}			
}
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	cf 91       	pop	r28
     848:	df 91       	pop	r29
     84a:	08 95       	ret

0000084c <LCDDispInteger>:

// Displays the value of integer "i" at "current display position"
void LCDDispInteger( int i )
{
     84c:	df 93       	push	r29
     84e:	cf 93       	push	r28
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	29 97       	sbiw	r28, 0x09	; 9
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
     860:	99 87       	std	Y+9, r25	; 0x09
     862:	88 87       	std	Y+8, r24	; 0x08
	char number[7];
	itoa(i, number, 10);
     864:	88 85       	ldd	r24, Y+8	; 0x08
     866:	99 85       	ldd	r25, Y+9	; 0x09
     868:	9e 01       	movw	r18, r28
     86a:	2f 5f       	subi	r18, 0xFF	; 255
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	b9 01       	movw	r22, r18
     870:	4a e0       	ldi	r20, 0x0A	; 10
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <itoa>
	
	LCDDispString(number);
     878:	ce 01       	movw	r24, r28
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	0e 94 07 04 	call	0x80e	; 0x80e <LCDDispString>
	
}
     880:	29 96       	adiw	r28, 0x09	; 9
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	cf 91       	pop	r28
     88e:	df 91       	pop	r29
     890:	08 95       	ret

00000892 <LCDLoadUDC>:

// Loads one of the 8 user definable characters (UDC) with a dot-pattern,
// pre-defined in an 8 byte const array
void LCDLoadUDC( unsigned char UDCNo, const unsigned char *UDCTab )
{
     892:	df 93       	push	r29
     894:	cf 93       	push	r28
     896:	00 d0       	rcall	.+0      	; 0x898 <LCDLoadUDC+0x6>
     898:	00 d0       	rcall	.+0      	; 0x89a <LCDLoadUDC+0x8>
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	8a 83       	std	Y+2, r24	; 0x02
     8a0:	7c 83       	std	Y+4, r23	; 0x04
     8a2:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	
	// Set CGRAM adresse (for the characters first bit row)
	sendInstruction( 0b01000000 | (UDCNo<<3) );
     8a4:	8a 81       	ldd	r24, Y+2	; 0x02
     8a6:	88 2f       	mov	r24, r24
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	80 64       	ori	r24, 0x40	; 64
     8b8:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
	// Send the 8 bit rows (auto-incrementing the CGRAM address)
	for ( i=0; i<8; i++ )
     8bc:	19 82       	std	Y+1, r1	; 0x01
     8be:	0f c0       	rjmp	.+30     	; 0x8de <LCDLoadUDC+0x4c>
		sendData( *UDCTab++ );
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	9c 81       	ldd	r25, Y+4	; 0x04
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 81       	ld	r18, Z
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	9c 81       	ldd	r25, Y+4	; 0x04
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	9c 83       	std	Y+4, r25	; 0x04
     8d0:	8b 83       	std	Y+3, r24	; 0x03
     8d2:	82 2f       	mov	r24, r18
     8d4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <sendData>
	unsigned char i;
	
	// Set CGRAM adresse (for the characters first bit row)
	sendInstruction( 0b01000000 | (UDCNo<<3) );
	// Send the 8 bit rows (auto-incrementing the CGRAM address)
	for ( i=0; i<8; i++ )
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	8f 5f       	subi	r24, 0xFF	; 255
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	88 30       	cpi	r24, 0x08	; 8
     8e2:	70 f3       	brcs	.-36     	; 0x8c0 <LCDLoadUDC+0x2e>
		sendData( *UDCTab++ );
	
	//Dummy instruction
	LCDClear();		
     8e4:	0e 94 cf 03 	call	0x79e	; 0x79e <LCDClear>
}
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	cf 91       	pop	r28
     8f2:	df 91       	pop	r29
     8f4:	08 95       	ret

000008f6 <LCDOnOffControl>:
// Selects, if the cursor has to be visible, and if the character at
// the cursor position has to blink.
// "cursor" not 0 => visible cursor.
// "blink" not 0 => the character at the cursor position blinks.
void LCDOnOffControl( unsigned char cursor, unsigned char blink )
{
     8f6:	df 93       	push	r29
     8f8:	cf 93       	push	r28
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <LCDOnOffControl+0x6>
     8fc:	0f 92       	push	r0
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	8a 83       	std	Y+2, r24	; 0x02
     904:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char control = 0b00001100;
     906:	8c e0       	ldi	r24, 0x0C	; 12
     908:	89 83       	std	Y+1, r24	; 0x01
	
	if(blink == 1){
		control | 0b00000001;
	}
	
	sendInstruction(control);
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
}
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	cf 91       	pop	r28
     918:	df 91       	pop	r29
     91a:	08 95       	ret

0000091c <LCDCursorLeft>:

// Moves the cursor to the left
void LCDCursorLeft()
{
     91c:	df 93       	push	r29
     91e:	cf 93       	push	r28
     920:	0f 92       	push	r0
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
	const unsigned char move = 0b00010000;
     926:	80 e1       	ldi	r24, 0x10	; 16
     928:	89 83       	std	Y+1, r24	; 0x01
	sendInstruction(move);	
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
}
     930:	0f 90       	pop	r0
     932:	cf 91       	pop	r28
     934:	df 91       	pop	r29
     936:	08 95       	ret

00000938 <LCDCursorRight>:

// Moves the cursor to the right
void LCDCursorRight()
{
     938:	df 93       	push	r29
     93a:	cf 93       	push	r28
     93c:	0f 92       	push	r0
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
	const unsigned char move = 0b00010100;
     942:	84 e1       	ldi	r24, 0x14	; 20
     944:	89 83       	std	Y+1, r24	; 0x01
	sendInstruction(move);
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
}
     94c:	0f 90       	pop	r0
     94e:	cf 91       	pop	r28
     950:	df 91       	pop	r29
     952:	08 95       	ret

00000954 <LCDShiftLeft>:

// Moves the display text one position to the left
void LCDShiftLeft()
{
     954:	df 93       	push	r29
     956:	cf 93       	push	r28
     958:	0f 92       	push	r0
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
	const unsigned char move = 0b00011000;
     95e:	88 e1       	ldi	r24, 0x18	; 24
     960:	89 83       	std	Y+1, r24	; 0x01
	sendInstruction(move);
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
}
     968:	0f 90       	pop	r0
     96a:	cf 91       	pop	r28
     96c:	df 91       	pop	r29
     96e:	08 95       	ret

00000970 <LCDShiftRight>:

// Moves the display text one position to the right
void LCDShiftRight()
{
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	0f 92       	push	r0
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
	const unsigned char move = 0b00011100;
     97a:	8c e1       	ldi	r24, 0x1C	; 28
     97c:	89 83       	std	Y+1, r24	; 0x01
	sendInstruction(move);
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	0e 94 2c 01 	call	0x258	; 0x258 <sendInstruction>
}
     984:	0f 90       	pop	r0
     986:	cf 91       	pop	r28
     988:	df 91       	pop	r29
     98a:	08 95       	ret

0000098c <InitUART>:
Parameters:
	BaudRate: Wanted Baud Rate.
	Databits: Wanted number of Data Bits.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit)
{
     98c:	df 93       	push	r29
     98e:	cf 93       	push	r28
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	27 97       	sbiw	r28, 0x07	; 7
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	6b 83       	std	Y+3, r22	; 0x03
     9a2:	7c 83       	std	Y+4, r23	; 0x04
     9a4:	8d 83       	std	Y+5, r24	; 0x05
     9a6:	9e 83       	std	Y+6, r25	; 0x06
     9a8:	4f 83       	std	Y+7, r20	; 0x07
unsigned int TempUBRR;

  if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	9c 81       	ldd	r25, Y+4	; 0x04
     9ae:	ad 81       	ldd	r26, Y+5	; 0x05
     9b0:	be 81       	ldd	r27, Y+6	; 0x06
     9b2:	8e 36       	cpi	r24, 0x6E	; 110
     9b4:	91 05       	cpc	r25, r1
     9b6:	a1 05       	cpc	r26, r1
     9b8:	b1 05       	cpc	r27, r1
     9ba:	08 f4       	brcc	.+2      	; 0x9be <InitUART+0x32>
     9bc:	5b c0       	rjmp	.+182    	; 0xa74 <InitUART+0xe8>
     9be:	8b 81       	ldd	r24, Y+3	; 0x03
     9c0:	9c 81       	ldd	r25, Y+4	; 0x04
     9c2:	ad 81       	ldd	r26, Y+5	; 0x05
     9c4:	be 81       	ldd	r27, Y+6	; 0x06
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	22 ec       	ldi	r18, 0xC2	; 194
     9ca:	92 07       	cpc	r25, r18
     9cc:	21 e0       	ldi	r18, 0x01	; 1
     9ce:	a2 07       	cpc	r26, r18
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	b2 07       	cpc	r27, r18
     9d4:	08 f0       	brcs	.+2      	; 0x9d8 <InitUART+0x4c>
     9d6:	4e c0       	rjmp	.+156    	; 0xa74 <InitUART+0xe8>
     9d8:	8f 81       	ldd	r24, Y+7	; 0x07
     9da:	85 30       	cpi	r24, 0x05	; 5
     9dc:	08 f4       	brcc	.+2      	; 0x9e0 <InitUART+0x54>
     9de:	4a c0       	rjmp	.+148    	; 0xa74 <InitUART+0xe8>
     9e0:	8f 81       	ldd	r24, Y+7	; 0x07
     9e2:	89 30       	cpi	r24, 0x09	; 9
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <InitUART+0x5c>
     9e6:	46 c0       	rjmp	.+140    	; 0xa74 <InitUART+0xe8>
  { 
    // "Normal" clock, no multiprocessor mode (= default)
    UCSRA = 0b00100000;
     9e8:	8b e2       	ldi	r24, 0x2B	; 43
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	20 e2       	ldi	r18, 0x20	; 32
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSRB = 0b00011000;	
     9f2:	8a e2       	ldi	r24, 0x2A	; 42
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	28 e1       	ldi	r18, 0x18	; 24
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
    // Asynchronous operation, 1 stop bit, no parity
    // Bit7 always has to be 1
    // Bit 2 and bit 1 controls the number of databits
    UCSRC = 0b10000000 | (DataBit-5)<<1;
     9fc:	80 e4       	ldi	r24, 0x40	; 64
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	2f 81       	ldd	r18, Y+7	; 0x07
     a02:	22 2f       	mov	r18, r18
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	25 50       	subi	r18, 0x05	; 5
     a08:	30 40       	sbci	r19, 0x00	; 0
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	20 68       	ori	r18, 0x80	; 128
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
    // Set Baud Rate according to the parameter BaudRate:
    // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
    //                   then write the two 8-bit registers separately):
    TempUBRR = XTAL/(16*BaudRate) - 1;
     a14:	8b 81       	ldd	r24, Y+3	; 0x03
     a16:	9c 81       	ldd	r25, Y+4	; 0x04
     a18:	ad 81       	ldd	r26, Y+5	; 0x05
     a1a:	be 81       	ldd	r27, Y+6	; 0x06
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	aa 1f       	adc	r26, r26
     a22:	bb 1f       	adc	r27, r27
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	aa 1f       	adc	r26, r26
     a2a:	bb 1f       	adc	r27, r27
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	aa 1f       	adc	r26, r26
     a32:	bb 1f       	adc	r27, r27
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	aa 1f       	adc	r26, r26
     a3a:	bb 1f       	adc	r27, r27
     a3c:	9c 01       	movw	r18, r24
     a3e:	ad 01       	movw	r20, r26
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e4       	ldi	r25, 0x40	; 64
     a44:	a8 e3       	ldi	r26, 0x38	; 56
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	bc 01       	movw	r22, r24
     a4a:	cd 01       	movw	r24, r26
     a4c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__udivmodsi4>
     a50:	da 01       	movw	r26, r20
     a52:	c9 01       	movw	r24, r18
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	9a 83       	std	Y+2, r25	; 0x02
     a58:	89 83       	std	Y+1, r24	; 0x01
    // Write upper part of UBRR
    UBRRH = TempUBRR >> 8;
     a5a:	80 e4       	ldi	r24, 0x40	; 64
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	29 81       	ldd	r18, Y+1	; 0x01
     a60:	3a 81       	ldd	r19, Y+2	; 0x02
     a62:	23 2f       	mov	r18, r19
     a64:	33 27       	eor	r19, r19
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
    // Write lower part of UBRR
    UBRRL = TempUBRR;
     a6a:	89 e2       	ldi	r24, 0x29	; 41
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	29 81       	ldd	r18, Y+1	; 0x01
     a70:	fc 01       	movw	r30, r24
     a72:	20 83       	st	Z, r18
  }  
}
     a74:	27 96       	adiw	r28, 0x07	; 7
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	cf 91       	pop	r28
     a82:	df 91       	pop	r29
     a84:	08 95       	ret

00000a86 <CharReady>:
/*************************************************************************
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
     a86:	df 93       	push	r29
     a88:	cf 93       	push	r28
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
   return UCSRA & (1<<7);
     a8e:	8b e2       	ldi	r24, 0x2B	; 43
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	80 81       	ld	r24, Z
     a96:	80 78       	andi	r24, 0x80	; 128
}
     a98:	cf 91       	pop	r28
     a9a:	df 91       	pop	r29
     a9c:	08 95       	ret

00000a9e <ReadChar>:
/*************************************************************************
Awaits new character received.
Then this character is returned.
*************************************************************************/
char ReadChar()
{
     a9e:	df 93       	push	r29
     aa0:	cf 93       	push	r28
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
  // Wait for new character received
  while ( (UCSRA & (1<<7)) == 0 )
     aa6:	00 00       	nop
     aa8:	8b e2       	ldi	r24, 0x2B	; 43
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	fc 01       	movw	r30, r24
     aae:	80 81       	ld	r24, Z
     ab0:	88 23       	and	r24, r24
     ab2:	d4 f7       	brge	.-12     	; 0xaa8 <ReadChar+0xa>
  {}                        
  // Then return it
  return UDR;
     ab4:	8c e2       	ldi	r24, 0x2C	; 44
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	fc 01       	movw	r30, r24
     aba:	80 81       	ld	r24, Z
}
     abc:	cf 91       	pop	r28
     abe:	df 91       	pop	r29
     ac0:	08 95       	ret

00000ac2 <SendChar>:
Then it send the character.
Parameter :
	Ch : Character for sending. 
*************************************************************************/
void SendChar(char Ch)
{
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	0f 92       	push	r0
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	89 83       	std	Y+1, r24	; 0x01
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRA & (1<<5)) == 0 )
     ace:	00 00       	nop
     ad0:	8b e2       	ldi	r24, 0x2B	; 43
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	fc 01       	movw	r30, r24
     ad6:	80 81       	ld	r24, Z
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	80 72       	andi	r24, 0x20	; 32
     ade:	90 70       	andi	r25, 0x00	; 0
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	b1 f3       	breq	.-20     	; 0xad0 <SendChar+0xe>
  {}
  // Then send the character
  UDR = Ch;
     ae4:	8c e2       	ldi	r24, 0x2C	; 44
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	29 81       	ldd	r18, Y+1	; 0x01
     aea:	fc 01       	movw	r30, r24
     aec:	20 83       	st	Z, r18
}
     aee:	0f 90       	pop	r0
     af0:	cf 91       	pop	r28
     af2:	df 91       	pop	r29
     af4:	08 95       	ret

00000af6 <SendString>:
Sends 0-terminated string.
Parameter:
   String: Pointer to the string. 
*************************************************************************/
void SendString(char* String)
{
     af6:	df 93       	push	r29
     af8:	cf 93       	push	r28
     afa:	00 d0       	rcall	.+0      	; 0xafc <SendString+0x6>
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	9a 83       	std	Y+2, r25	; 0x02
     b02:	89 83       	std	Y+1, r24	; 0x01
  // Repeat untill zero-termination
  while (*String != 0)
     b04:	0b c0       	rjmp	.+22     	; 0xb1c <SendString+0x26>
  {
    // Send the character pointed to by "String"
    SendChar(*String);
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	fc 01       	movw	r30, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	0e 94 61 05 	call	0xac2	; 0xac2 <SendChar>
    // Advance the pointer one step
    String++;
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	9a 81       	ldd	r25, Y+2	; 0x02
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	9a 83       	std	Y+2, r25	; 0x02
     b1a:	89 83       	std	Y+1, r24	; 0x01
   String: Pointer to the string. 
*************************************************************************/
void SendString(char* String)
{
  // Repeat untill zero-termination
  while (*String != 0)
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	9a 81       	ldd	r25, Y+2	; 0x02
     b20:	fc 01       	movw	r30, r24
     b22:	80 81       	ld	r24, Z
     b24:	88 23       	and	r24, r24
     b26:	79 f7       	brne	.-34     	; 0xb06 <SendString+0x10>
    // Send the character pointed to by "String"
    SendChar(*String);
    // Advance the pointer one step
    String++;
  }
}
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	cf 91       	pop	r28
     b2e:	df 91       	pop	r29
     b30:	08 95       	ret

00000b32 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
      Number: The integer to be converted and send. 
*************************************************************************/
void SendInteger(int Number)
{
     b32:	df 93       	push	r29
     b34:	cf 93       	push	r28
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	29 97       	sbiw	r28, 0x09	; 9
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	99 87       	std	Y+9, r25	; 0x09
     b48:	88 87       	std	Y+8, r24	; 0x08
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Number, array, 10);
     b4a:	88 85       	ldd	r24, Y+8	; 0x08
     b4c:	99 85       	ldd	r25, Y+9	; 0x09
     b4e:	9e 01       	movw	r18, r28
     b50:	2f 5f       	subi	r18, 0xFF	; 255
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	b9 01       	movw	r22, r18
     b56:	4a e0       	ldi	r20, 0x0A	; 10
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <itoa>
  // - then send the string
  SendString(array);
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <SendString>
}
     b66:	29 96       	adiw	r28, 0x09	; 9
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <ir_init>:
int meaurering_count;

void invalid_input();

void ir_init()
{
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
	//Setup interrupt	
	if(INPUT_INTERRUPT == INT0)
	{
		MCUCR |= 1 << 0;
     b80:	85 e5       	ldi	r24, 0x55	; 85
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	25 e5       	ldi	r18, 0x55	; 85
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	f9 01       	movw	r30, r18
     b8a:	20 81       	ld	r18, Z
     b8c:	21 60       	ori	r18, 0x01	; 1
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
		MCUCR |= 1 << 1;
     b92:	85 e5       	ldi	r24, 0x55	; 85
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	25 e5       	ldi	r18, 0x55	; 85
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	f9 01       	movw	r30, r18
     b9c:	20 81       	ld	r18, Z
     b9e:	22 60       	ori	r18, 0x02	; 2
     ba0:	fc 01       	movw	r30, r24
     ba2:	20 83       	st	Z, r18
	{
		MCUCSR |= 0 << 6;
	}
	
	//Enable interrupt
	ENABLE_INPUT_INTERRUPT;
     ba4:	8b e5       	ldi	r24, 0x5B	; 91
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	2b e5       	ldi	r18, 0x5B	; 91
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	f9 01       	movw	r30, r18
     bae:	20 81       	ld	r18, Z
     bb0:	20 64       	ori	r18, 0x40	; 64
     bb2:	fc 01       	movw	r30, r24
     bb4:	20 83       	st	Z, r18
	first_start_bit = true;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	80 93 69 01 	sts	0x0169, r24
	
	//Setup Timer0
	//Prescaler 256
	// Normal mode
	// Normal compare mode
	TCCR0 = 0b00000100;
     bbc:	83 e5       	ldi	r24, 0x53	; 83
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	24 e0       	ldi	r18, 0x04	; 4
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
}
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <ir_receive>:

void ir_receive(char* _adr, char* _cmd, bool* _hold_bit)
{
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <ir_receive+0x6>
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <ir_receive+0x8>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <ir_receive+0xa>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	9a 83       	std	Y+2, r25	; 0x02
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	7c 83       	std	Y+4, r23	; 0x04
     be0:	6b 83       	std	Y+3, r22	; 0x03
     be2:	5e 83       	std	Y+6, r21	; 0x06
     be4:	4d 83       	std	Y+5, r20	; 0x05
	//Tjek for invalid data first
	*_adr = adr;
     be6:	20 91 6e 01 	lds	r18, 0x016E
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18
	*_cmd = cmd;
     bf2:	20 91 74 01 	lds	r18, 0x0174
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
	*_hold_bit = hold_bit;
     bfe:	20 91 68 01 	lds	r18, 0x0168
     c02:	8d 81       	ldd	r24, Y+5	; 0x05
     c04:	9e 81       	ldd	r25, Y+6	; 0x06
     c06:	fc 01       	movw	r30, r24
     c08:	20 83       	st	Z, r18
}
     c0a:	26 96       	adiw	r28, 0x06	; 6
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <__vector_1>:

//Input interrupt
ISR (INT0_vect)
{
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	0f 92       	push	r0
     c24:	11 24       	eor	r1, r1
     c26:	2f 93       	push	r18
     c28:	3f 93       	push	r19
     c2a:	4f 93       	push	r20
     c2c:	5f 93       	push	r21
     c2e:	6f 93       	push	r22
     c30:	7f 93       	push	r23
     c32:	8f 93       	push	r24
     c34:	9f 93       	push	r25
     c36:	af 93       	push	r26
     c38:	bf 93       	push	r27
     c3a:	ef 93       	push	r30
     c3c:	ff 93       	push	r31
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	00 d0       	rcall	.+0      	; 0xc44 <__vector_1+0x28>
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
	int bit_time;
	if(first_start_bit)
     c48:	80 91 69 01 	lds	r24, 0x0169
     c4c:	88 23       	and	r24, r24
     c4e:	d9 f0       	breq	.+54     	; 0xc86 <__vector_1+0x6a>
	{
		TIMER0_COMP_REG = 255;
     c50:	8c e5       	ldi	r24, 0x5C	; 92
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	2f ef       	ldi	r18, 0xFF	; 255
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
		TIMER0_COUNT_REG = 0;
     c5a:	82 e5       	ldi	r24, 0x52	; 82
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	fc 01       	movw	r30, r24
     c60:	10 82       	st	Z, r1
		ENABLE_TIMER0_COMP_INT;
     c62:	89 e5       	ldi	r24, 0x59	; 89
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	29 e5       	ldi	r18, 0x59	; 89
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	20 81       	ld	r18, Z
     c6e:	22 60       	ori	r18, 0x02	; 2
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
		first_start_bit = !first_start_bit;
     c74:	90 91 69 01 	lds	r25, 0x0169
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	89 27       	eor	r24, r25
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	80 93 69 01 	sts	0x0169, r24
     c84:	4f c0       	rjmp	.+158    	; 0xd24 <__vector_1+0x108>
	}
	else{
		bit_time = TIMER0_COMP_REG;
     c86:	8c e5       	ldi	r24, 0x5C	; 92
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_COUNT_REG = 0;
     c96:	82 e5       	ldi	r24, 0x52	; 82
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	fc 01       	movw	r30, r24
     c9c:	10 82       	st	Z, r1
		half_bit_time = bit_time/2;
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	9a 81       	ldd	r25, Y+2	; 0x02
     ca2:	99 23       	and	r25, r25
     ca4:	0c f4       	brge	.+2      	; 0xca8 <__vector_1+0x8c>
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	95 95       	asr	r25
     caa:	87 95       	ror	r24
     cac:	90 93 6d 01 	sts	0x016D, r25
     cb0:	80 93 6c 01 	sts	0x016C, r24
		three_quarter_bit_time = (float)(bit_time/4*3);
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	99 23       	and	r25, r25
     cba:	0c f4       	brge	.+2      	; 0xcbe <__vector_1+0xa2>
     cbc:	03 96       	adiw	r24, 0x03	; 3
     cbe:	95 95       	asr	r25
     cc0:	87 95       	ror	r24
     cc2:	95 95       	asr	r25
     cc4:	87 95       	ror	r24
     cc6:	9c 01       	movw	r18, r24
     cc8:	22 0f       	add	r18, r18
     cca:	33 1f       	adc	r19, r19
     ccc:	82 0f       	add	r24, r18
     cce:	93 1f       	adc	r25, r19
     cd0:	aa 27       	eor	r26, r26
     cd2:	97 fd       	sbrc	r25, 7
     cd4:	a0 95       	com	r26
     cd6:	ba 2f       	mov	r27, r26
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	0e 94 1e 0b 	call	0x163c	; 0x163c <__floatsisf>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	bc 01       	movw	r22, r24
     ce6:	cd 01       	movw	r24, r26
     ce8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixsfsi>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	90 93 70 01 	sts	0x0170, r25
     cf4:	80 93 6f 01 	sts	0x016F, r24
		TIMER0_COMP_REG = three_quarter_bit_time;
     cf8:	8c e5       	ldi	r24, 0x5C	; 92
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	20 91 6f 01 	lds	r18, 0x016F
     d00:	30 91 70 01 	lds	r19, 0x0170
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
		meaurering_count = 0;
     d08:	10 92 73 01 	sts	0x0173, r1
     d0c:	10 92 72 01 	sts	0x0172, r1
		input_state = FIRST_MEASURMENTS;
     d10:	10 92 6b 01 	sts	0x016B, r1
		DISABLE_INPUT_INTERRUPT;
     d14:	8b e5       	ldi	r24, 0x5B	; 91
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	2b e5       	ldi	r18, 0x5B	; 91
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	f9 01       	movw	r30, r18
     d1e:	20 81       	ld	r18, Z
     d20:	fc 01       	movw	r30, r24
     d22:	20 83       	st	Z, r18
	}
	// Measure time between the 2 start bits
	// calculate half and quarter bit time
	// Enable timer0 interrupt
	// start timer 0 to measure first time after 3 quarter bit time
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	ff 91       	pop	r31
     d2e:	ef 91       	pop	r30
     d30:	bf 91       	pop	r27
     d32:	af 91       	pop	r26
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	7f 91       	pop	r23
     d3a:	6f 91       	pop	r22
     d3c:	5f 91       	pop	r21
     d3e:	4f 91       	pop	r20
     d40:	3f 91       	pop	r19
     d42:	2f 91       	pop	r18
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <__vector_10>:

ISR (TIMER0_COMP_vect)
{
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <__vector_10+0x28>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
	if(meaurering_count >= 0 && meaurering_count < NUMBER_OF_MEASURINGS)
     d7a:	80 91 72 01 	lds	r24, 0x0172
     d7e:	90 91 73 01 	lds	r25, 0x0173
     d82:	99 23       	and	r25, r25
     d84:	0c f4       	brge	.+2      	; 0xd88 <__vector_10+0x3a>
     d86:	d2 c0       	rjmp	.+420    	; 0xf2c <__vector_10+0x1de>
     d88:	80 91 72 01 	lds	r24, 0x0172
     d8c:	90 91 73 01 	lds	r25, 0x0173
     d90:	88 31       	cpi	r24, 0x18	; 24
     d92:	91 05       	cpc	r25, r1
     d94:	0c f0       	brlt	.+2      	; 0xd98 <__vector_10+0x4a>
     d96:	ca c0       	rjmp	.+404    	; 0xf2c <__vector_10+0x1de>
	{
		TIMER0_COUNT_REG = 0;
     d98:	82 e5       	ldi	r24, 0x52	; 82
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	fc 01       	movw	r30, r24
     d9e:	10 82       	st	Z, r1
		switch(input_state)
     da0:	80 91 6b 01 	lds	r24, 0x016B
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	91 05       	cpc	r25, r1
     dac:	61 f1       	breq	.+88     	; 0xe06 <__vector_10+0xb8>
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	91 05       	cpc	r25, r1
     db2:	09 f4       	brne	.+2      	; 0xdb6 <__vector_10+0x68>
     db4:	45 c0       	rjmp	.+138    	; 0xe40 <__vector_10+0xf2>
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	09 f0       	breq	.+2      	; 0xdbc <__vector_10+0x6e>
     dba:	b7 c0       	rjmp	.+366    	; 0xf2a <__vector_10+0x1dc>
		{
			case FIRST_MEASURMENTS:
				TIMER0_COUNT_REG = half_bit_time;
     dbc:	82 e5       	ldi	r24, 0x52	; 82
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	20 91 6c 01 	lds	r18, 0x016C
     dc4:	30 91 6d 01 	lds	r19, 0x016D
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
				zero_value_bit = INPUT_PIN;
     dcc:	80 e3       	ldi	r24, 0x30	; 48
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	84 70       	andi	r24, 0x04	; 4
     dda:	90 70       	andi	r25, 0x00	; 0
     ddc:	80 95       	com	r24
     dde:	90 95       	com	r25
     de0:	21 e0       	ldi	r18, 0x01	; 1
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	09 f4       	brne	.+2      	; 0xde8 <__vector_10+0x9a>
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	20 93 71 01 	sts	0x0171, r18
				meaurering_count++;
     dec:	80 91 72 01 	lds	r24, 0x0172
     df0:	90 91 73 01 	lds	r25, 0x0173
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	90 93 73 01 	sts	0x0173, r25
     dfa:	80 93 72 01 	sts	0x0172, r24
				input_state = ONE_BIT;
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	80 93 6b 01 	sts	0x016B, r24
				break;
     e04:	93 c0       	rjmp	.+294    	; 0xf2c <__vector_10+0x1de>
			case ZERO_BIT:
				zero_value_bit = INPUT_PIN;
     e06:	80 e3       	ldi	r24, 0x30	; 48
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	fc 01       	movw	r30, r24
     e0c:	80 81       	ld	r24, Z
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	84 70       	andi	r24, 0x04	; 4
     e14:	90 70       	andi	r25, 0x00	; 0
     e16:	80 95       	com	r24
     e18:	90 95       	com	r25
     e1a:	21 e0       	ldi	r18, 0x01	; 1
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	09 f4       	brne	.+2      	; 0xe22 <__vector_10+0xd4>
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	20 93 71 01 	sts	0x0171, r18
				meaurering_count++;
     e26:	80 91 72 01 	lds	r24, 0x0172
     e2a:	90 91 73 01 	lds	r25, 0x0173
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	90 93 73 01 	sts	0x0173, r25
     e34:	80 93 72 01 	sts	0x0172, r24
				input_state = ONE_BIT;
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	80 93 6b 01 	sts	0x016B, r24
				break;
     e3e:	76 c0       	rjmp	.+236    	; 0xf2c <__vector_10+0x1de>
			case ONE_BIT:
				one_value_bit = INPUT_PIN;
     e40:	80 e3       	ldi	r24, 0x30	; 48
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	fc 01       	movw	r30, r24
     e46:	80 81       	ld	r24, Z
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	84 70       	andi	r24, 0x04	; 4
     e4e:	90 70       	andi	r25, 0x00	; 0
     e50:	80 95       	com	r24
     e52:	90 95       	com	r25
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	09 f4       	brne	.+2      	; 0xe5c <__vector_10+0x10e>
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	20 93 6a 01 	sts	0x016A, r18
				if(zero_value_bit != one_value_bit)
     e60:	90 91 71 01 	lds	r25, 0x0171
     e64:	80 91 6a 01 	lds	r24, 0x016A
     e68:	98 17       	cp	r25, r24
     e6a:	09 f4       	brne	.+2      	; 0xe6e <__vector_10+0x120>
     e6c:	51 c0       	rjmp	.+162    	; 0xf10 <__vector_10+0x1c2>
				{
					int temp = meaurering_count/2;
     e6e:	80 91 72 01 	lds	r24, 0x0172
     e72:	90 91 73 01 	lds	r25, 0x0173
     e76:	99 23       	and	r25, r25
     e78:	0c f4       	brge	.+2      	; 0xe7c <__vector_10+0x12e>
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	95 95       	asr	r25
     e7e:	87 95       	ror	r24
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
					if(temp == 0)
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	29 f4       	brne	.+10     	; 0xe96 <__vector_10+0x148>
					{
						hold_bit = one_value_bit;
     e8c:	80 91 6a 01 	lds	r24, 0x016A
     e90:	80 93 68 01 	sts	0x0168, r24
					{
						cmd |= one_value_bit << (temp-5);
					}
					else
					{
						invalid_input();
     e94:	3f c0       	rjmp	.+126    	; 0xf14 <__vector_10+0x1c6>
					int temp = meaurering_count/2;
					if(temp == 0)
					{
						hold_bit = one_value_bit;
					}
					else if(temp <= 5 && temp > 0)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	86 30       	cpi	r24, 0x06	; 6
     e9c:	91 05       	cpc	r25, r1
     e9e:	b4 f4       	brge	.+44     	; 0xecc <__vector_10+0x17e>
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	18 16       	cp	r1, r24
     ea6:	19 06       	cpc	r1, r25
     ea8:	8c f4       	brge	.+34     	; 0xecc <__vector_10+0x17e>
					{
						adr |= one_value_bit << temp;
     eaa:	80 91 6a 01 	lds	r24, 0x016A
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	09 80       	ldd	r0, Y+1	; 0x01
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <__vector_10+0x16c>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <__vector_10+0x168>
     ebe:	98 2f       	mov	r25, r24
     ec0:	80 91 6e 01 	lds	r24, 0x016E
     ec4:	89 2b       	or	r24, r25
     ec6:	80 93 6e 01 	sts	0x016E, r24
     eca:	24 c0       	rjmp	.+72     	; 0xf14 <__vector_10+0x1c6>
					}
					else if(temp <= 11 && temp > 0)
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	8c 30       	cpi	r24, 0x0C	; 12
     ed2:	91 05       	cpc	r25, r1
     ed4:	d4 f4       	brge	.+52     	; 0xf0a <__vector_10+0x1bc>
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	18 16       	cp	r1, r24
     edc:	19 06       	cpc	r1, r25
     ede:	ac f4       	brge	.+42     	; 0xf0a <__vector_10+0x1bc>
					{
						cmd |= one_value_bit << (temp-5);
     ee0:	80 91 6a 01 	lds	r24, 0x016A
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	29 81       	ldd	r18, Y+1	; 0x01
     eea:	3a 81       	ldd	r19, Y+2	; 0x02
     eec:	25 50       	subi	r18, 0x05	; 5
     eee:	30 40       	sbci	r19, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <__vector_10+0x1aa>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <__vector_10+0x1a6>
     efc:	98 2f       	mov	r25, r24
     efe:	80 91 74 01 	lds	r24, 0x0174
     f02:	89 2b       	or	r24, r25
     f04:	80 93 74 01 	sts	0x0174, r24
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <__vector_10+0x1c6>
					}
					else
					{
						invalid_input();
     f0a:	0e 94 ab 07 	call	0xf56	; 0xf56 <invalid_input>
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <__vector_10+0x1c6>
					}
				}
				else
				{
					invalid_input();
     f10:	0e 94 ab 07 	call	0xf56	; 0xf56 <invalid_input>
				}
				meaurering_count++;
     f14:	80 91 72 01 	lds	r24, 0x0172
     f18:	90 91 73 01 	lds	r25, 0x0173
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	90 93 73 01 	sts	0x0173, r25
     f22:	80 93 72 01 	sts	0x0172, r24
				input_state == ZERO_BIT;
				break;
     f26:	00 00       	nop
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <__vector_10+0x1de>
			default:
				break;
     f2a:	00 00       	nop
		}
	}
}
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	ff 91       	pop	r31
     f36:	ef 91       	pop	r30
     f38:	bf 91       	pop	r27
     f3a:	af 91       	pop	r26
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	7f 91       	pop	r23
     f42:	6f 91       	pop	r22
     f44:	5f 91       	pop	r21
     f46:	4f 91       	pop	r20
     f48:	3f 91       	pop	r19
     f4a:	2f 91       	pop	r18
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <invalid_input>:

void invalid_input()
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	// print invalid input! ! ! !
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <main>:
#include <avr/io.h>
#include "IR_driver/IR.h"
#include "Drivers/uart.h"

int main(void)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	ir_init();
     f6c:	0e 94 bc 05 	call	0xb78	; 0xb78 <ir_init>
	InitUART(9600,8);
     f70:	60 e8       	ldi	r22, 0x80	; 128
     f72:	75 e2       	ldi	r23, 0x25	; 37
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	48 e0       	ldi	r20, 0x08	; 8
     f7a:	0e 94 c6 04 	call	0x98c	; 0x98c <InitUART>
    while(1)
    {
         
    }
     f7e:	ff cf       	rjmp	.-2      	; 0xf7e <main+0x1a>

00000f80 <__fixunssfsi>:
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	7b 01       	movw	r14, r22
     f8a:	8c 01       	movw	r16, r24
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	5f e4       	ldi	r21, 0x4F	; 79
     f94:	0e 94 be 0a 	call	0x157c	; 0x157c <__gesf2>
     f98:	87 fd       	sbrc	r24, 7
     f9a:	11 c0       	rjmp	.+34     	; 0xfbe <__fixunssfsi+0x3e>
     f9c:	c8 01       	movw	r24, r16
     f9e:	b7 01       	movw	r22, r14
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	5f e4       	ldi	r21, 0x4F	; 79
     fa8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__subsf3>
     fac:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixsfsi>
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	20 50       	subi	r18, 0x00	; 0
     fb6:	30 40       	sbci	r19, 0x00	; 0
     fb8:	40 40       	sbci	r20, 0x00	; 0
     fba:	50 48       	sbci	r21, 0x80	; 128
     fbc:	06 c0       	rjmp	.+12     	; 0xfca <__fixunssfsi+0x4a>
     fbe:	c8 01       	movw	r24, r16
     fc0:	b7 01       	movw	r22, r14
     fc2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixsfsi>
     fc6:	9b 01       	movw	r18, r22
     fc8:	ac 01       	movw	r20, r24
     fca:	b9 01       	movw	r22, r18
     fcc:	ca 01       	movw	r24, r20
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	08 95       	ret

00000fd8 <_fpadd_parts>:
     fd8:	a0 e0       	ldi	r26, 0x00	; 0
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e2 ef       	ldi	r30, 0xF2	; 242
     fde:	f7 e0       	ldi	r31, 0x07	; 7
     fe0:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__prologue_saves__+0x8>
     fe4:	fc 01       	movw	r30, r24
     fe6:	ea 01       	movw	r28, r20
     fe8:	80 81       	ld	r24, Z
     fea:	82 30       	cpi	r24, 0x02	; 2
     fec:	08 f4       	brcc	.+2      	; 0xff0 <_fpadd_parts+0x18>
     fee:	38 c1       	rjmp	.+624    	; 0x1260 <_fpadd_parts+0x288>
     ff0:	db 01       	movw	r26, r22
     ff2:	9c 91       	ld	r25, X
     ff4:	92 30       	cpi	r25, 0x02	; 2
     ff6:	08 f4       	brcc	.+2      	; 0xffa <_fpadd_parts+0x22>
     ff8:	30 c1       	rjmp	.+608    	; 0x125a <_fpadd_parts+0x282>
     ffa:	84 30       	cpi	r24, 0x04	; 4
     ffc:	59 f4       	brne	.+22     	; 0x1014 <_fpadd_parts+0x3c>
     ffe:	94 30       	cpi	r25, 0x04	; 4
    1000:	09 f0       	breq	.+2      	; 0x1004 <_fpadd_parts+0x2c>
    1002:	2e c1       	rjmp	.+604    	; 0x1260 <_fpadd_parts+0x288>
    1004:	91 81       	ldd	r25, Z+1	; 0x01
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	8c 91       	ld	r24, X
    100a:	11 97       	sbiw	r26, 0x01	; 1
    100c:	98 17       	cp	r25, r24
    100e:	09 f0       	breq	.+2      	; 0x1012 <_fpadd_parts+0x3a>
    1010:	21 c1       	rjmp	.+578    	; 0x1254 <_fpadd_parts+0x27c>
    1012:	26 c1       	rjmp	.+588    	; 0x1260 <_fpadd_parts+0x288>
    1014:	94 30       	cpi	r25, 0x04	; 4
    1016:	09 f4       	brne	.+2      	; 0x101a <_fpadd_parts+0x42>
    1018:	20 c1       	rjmp	.+576    	; 0x125a <_fpadd_parts+0x282>
    101a:	92 30       	cpi	r25, 0x02	; 2
    101c:	b1 f4       	brne	.+44     	; 0x104a <_fpadd_parts+0x72>
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	09 f0       	breq	.+2      	; 0x1024 <_fpadd_parts+0x4c>
    1022:	1e c1       	rjmp	.+572    	; 0x1260 <_fpadd_parts+0x288>
    1024:	ca 01       	movw	r24, r20
    1026:	af 01       	movw	r20, r30
    1028:	28 e0       	ldi	r18, 0x08	; 8
    102a:	da 01       	movw	r26, r20
    102c:	0d 90       	ld	r0, X+
    102e:	ad 01       	movw	r20, r26
    1030:	dc 01       	movw	r26, r24
    1032:	0d 92       	st	X+, r0
    1034:	cd 01       	movw	r24, r26
    1036:	21 50       	subi	r18, 0x01	; 1
    1038:	c1 f7       	brne	.-16     	; 0x102a <_fpadd_parts+0x52>
    103a:	db 01       	movw	r26, r22
    103c:	11 96       	adiw	r26, 0x01	; 1
    103e:	8c 91       	ld	r24, X
    1040:	11 97       	sbiw	r26, 0x01	; 1
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	89 23       	and	r24, r25
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	0a c1       	rjmp	.+532    	; 0x125e <_fpadd_parts+0x286>
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	09 f4       	brne	.+2      	; 0x1050 <_fpadd_parts+0x78>
    104e:	05 c1       	rjmp	.+522    	; 0x125a <_fpadd_parts+0x282>
    1050:	c2 80       	ldd	r12, Z+2	; 0x02
    1052:	d3 80       	ldd	r13, Z+3	; 0x03
    1054:	db 01       	movw	r26, r22
    1056:	12 96       	adiw	r26, 0x02	; 2
    1058:	6d 90       	ld	r6, X+
    105a:	7c 90       	ld	r7, X
    105c:	13 97       	sbiw	r26, 0x03	; 3
    105e:	24 81       	ldd	r18, Z+4	; 0x04
    1060:	35 81       	ldd	r19, Z+5	; 0x05
    1062:	46 81       	ldd	r20, Z+6	; 0x06
    1064:	57 81       	ldd	r21, Z+7	; 0x07
    1066:	14 96       	adiw	r26, 0x04	; 4
    1068:	ed 90       	ld	r14, X+
    106a:	fd 90       	ld	r15, X+
    106c:	0d 91       	ld	r16, X+
    106e:	1c 91       	ld	r17, X
    1070:	17 97       	sbiw	r26, 0x07	; 7
    1072:	c6 01       	movw	r24, r12
    1074:	86 19       	sub	r24, r6
    1076:	97 09       	sbc	r25, r7
    1078:	5c 01       	movw	r10, r24
    107a:	97 ff       	sbrs	r25, 7
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <_fpadd_parts+0xae>
    107e:	aa 24       	eor	r10, r10
    1080:	bb 24       	eor	r11, r11
    1082:	a8 1a       	sub	r10, r24
    1084:	b9 0a       	sbc	r11, r25
    1086:	b0 e2       	ldi	r27, 0x20	; 32
    1088:	ab 16       	cp	r10, r27
    108a:	b1 04       	cpc	r11, r1
    108c:	0c f0       	brlt	.+2      	; 0x1090 <_fpadd_parts+0xb8>
    108e:	61 c0       	rjmp	.+194    	; 0x1152 <_fpadd_parts+0x17a>
    1090:	18 16       	cp	r1, r24
    1092:	19 06       	cpc	r1, r25
    1094:	6c f5       	brge	.+90     	; 0x10f0 <_fpadd_parts+0x118>
    1096:	37 01       	movw	r6, r14
    1098:	48 01       	movw	r8, r16
    109a:	0a 2c       	mov	r0, r10
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <_fpadd_parts+0xce>
    109e:	96 94       	lsr	r9
    10a0:	87 94       	ror	r8
    10a2:	77 94       	ror	r7
    10a4:	67 94       	ror	r6
    10a6:	0a 94       	dec	r0
    10a8:	d2 f7       	brpl	.-12     	; 0x109e <_fpadd_parts+0xc6>
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 e0       	ldi	r26, 0x00	; 0
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	0a 2c       	mov	r0, r10
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <_fpadd_parts+0xe6>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	aa 1f       	adc	r26, r26
    10bc:	bb 1f       	adc	r27, r27
    10be:	0a 94       	dec	r0
    10c0:	d2 f7       	brpl	.-12     	; 0x10b6 <_fpadd_parts+0xde>
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	a1 09       	sbc	r26, r1
    10c6:	b1 09       	sbc	r27, r1
    10c8:	8e 21       	and	r24, r14
    10ca:	9f 21       	and	r25, r15
    10cc:	a0 23       	and	r26, r16
    10ce:	b1 23       	and	r27, r17
    10d0:	ee 24       	eor	r14, r14
    10d2:	ff 24       	eor	r15, r15
    10d4:	87 01       	movw	r16, r14
    10d6:	e3 94       	inc	r14
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	a1 05       	cpc	r26, r1
    10dc:	b1 05       	cpc	r27, r1
    10de:	19 f4       	brne	.+6      	; 0x10e6 <_fpadd_parts+0x10e>
    10e0:	ee 24       	eor	r14, r14
    10e2:	ff 24       	eor	r15, r15
    10e4:	87 01       	movw	r16, r14
    10e6:	e6 28       	or	r14, r6
    10e8:	f7 28       	or	r15, r7
    10ea:	08 29       	or	r16, r8
    10ec:	19 29       	or	r17, r9
    10ee:	3c c0       	rjmp	.+120    	; 0x1168 <_fpadd_parts+0x190>
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	d1 f1       	breq	.+116    	; 0x1168 <_fpadd_parts+0x190>
    10f4:	ca 0c       	add	r12, r10
    10f6:	db 1c       	adc	r13, r11
    10f8:	39 01       	movw	r6, r18
    10fa:	4a 01       	movw	r8, r20
    10fc:	0a 2c       	mov	r0, r10
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <_fpadd_parts+0x130>
    1100:	96 94       	lsr	r9
    1102:	87 94       	ror	r8
    1104:	77 94       	ror	r7
    1106:	67 94       	ror	r6
    1108:	0a 94       	dec	r0
    110a:	d2 f7       	brpl	.-12     	; 0x1100 <_fpadd_parts+0x128>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e0       	ldi	r26, 0x00	; 0
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	0a 2c       	mov	r0, r10
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <_fpadd_parts+0x148>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	aa 1f       	adc	r26, r26
    111e:	bb 1f       	adc	r27, r27
    1120:	0a 94       	dec	r0
    1122:	d2 f7       	brpl	.-12     	; 0x1118 <_fpadd_parts+0x140>
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	a1 09       	sbc	r26, r1
    1128:	b1 09       	sbc	r27, r1
    112a:	82 23       	and	r24, r18
    112c:	93 23       	and	r25, r19
    112e:	a4 23       	and	r26, r20
    1130:	b5 23       	and	r27, r21
    1132:	21 e0       	ldi	r18, 0x01	; 1
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	a1 05       	cpc	r26, r1
    113e:	b1 05       	cpc	r27, r1
    1140:	19 f4       	brne	.+6      	; 0x1148 <_fpadd_parts+0x170>
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	a9 01       	movw	r20, r18
    1148:	26 29       	or	r18, r6
    114a:	37 29       	or	r19, r7
    114c:	48 29       	or	r20, r8
    114e:	59 29       	or	r21, r9
    1150:	0b c0       	rjmp	.+22     	; 0x1168 <_fpadd_parts+0x190>
    1152:	6c 14       	cp	r6, r12
    1154:	7d 04       	cpc	r7, r13
    1156:	24 f4       	brge	.+8      	; 0x1160 <_fpadd_parts+0x188>
    1158:	ee 24       	eor	r14, r14
    115a:	ff 24       	eor	r15, r15
    115c:	87 01       	movw	r16, r14
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <_fpadd_parts+0x190>
    1160:	63 01       	movw	r12, r6
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	a9 01       	movw	r20, r18
    1168:	81 81       	ldd	r24, Z+1	; 0x01
    116a:	fb 01       	movw	r30, r22
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	89 17       	cp	r24, r25
    1170:	09 f4       	brne	.+2      	; 0x1174 <_fpadd_parts+0x19c>
    1172:	45 c0       	rjmp	.+138    	; 0x11fe <_fpadd_parts+0x226>
    1174:	88 23       	and	r24, r24
    1176:	49 f0       	breq	.+18     	; 0x118a <_fpadd_parts+0x1b2>
    1178:	d8 01       	movw	r26, r16
    117a:	c7 01       	movw	r24, r14
    117c:	82 1b       	sub	r24, r18
    117e:	93 0b       	sbc	r25, r19
    1180:	a4 0b       	sbc	r26, r20
    1182:	b5 0b       	sbc	r27, r21
    1184:	9c 01       	movw	r18, r24
    1186:	ad 01       	movw	r20, r26
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <_fpadd_parts+0x1ba>
    118a:	2e 19       	sub	r18, r14
    118c:	3f 09       	sbc	r19, r15
    118e:	40 0b       	sbc	r20, r16
    1190:	51 0b       	sbc	r21, r17
    1192:	57 fd       	sbrc	r21, 7
    1194:	04 c0       	rjmp	.+8      	; 0x119e <_fpadd_parts+0x1c6>
    1196:	19 82       	std	Y+1, r1	; 0x01
    1198:	db 82       	std	Y+3, r13	; 0x03
    119a:	ca 82       	std	Y+2, r12	; 0x02
    119c:	0b c0       	rjmp	.+22     	; 0x11b4 <_fpadd_parts+0x1dc>
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	db 82       	std	Y+3, r13	; 0x03
    11a4:	ca 82       	std	Y+2, r12	; 0x02
    11a6:	50 95       	com	r21
    11a8:	40 95       	com	r20
    11aa:	30 95       	com	r19
    11ac:	21 95       	neg	r18
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	4f 4f       	sbci	r20, 0xFF	; 255
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	2c 83       	std	Y+4, r18	; 0x04
    11b6:	3d 83       	std	Y+5, r19	; 0x05
    11b8:	4e 83       	std	Y+6, r20	; 0x06
    11ba:	5f 83       	std	Y+7, r21	; 0x07
    11bc:	0d c0       	rjmp	.+26     	; 0x11d8 <_fpadd_parts+0x200>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	aa 1f       	adc	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	8c 83       	std	Y+4, r24	; 0x04
    11c8:	9d 83       	std	Y+5, r25	; 0x05
    11ca:	ae 83       	std	Y+6, r26	; 0x06
    11cc:	bf 83       	std	Y+7, r27	; 0x07
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	9b 81       	ldd	r25, Y+3	; 0x03
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	9b 83       	std	Y+3, r25	; 0x03
    11d6:	8a 83       	std	Y+2, r24	; 0x02
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	9d 81       	ldd	r25, Y+5	; 0x05
    11dc:	ae 81       	ldd	r26, Y+6	; 0x06
    11de:	bf 81       	ldd	r27, Y+7	; 0x07
    11e0:	9c 01       	movw	r18, r24
    11e2:	ad 01       	movw	r20, r26
    11e4:	21 50       	subi	r18, 0x01	; 1
    11e6:	30 40       	sbci	r19, 0x00	; 0
    11e8:	40 40       	sbci	r20, 0x00	; 0
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	2f 3f       	cpi	r18, 0xFF	; 255
    11ee:	ef ef       	ldi	r30, 0xFF	; 255
    11f0:	3e 07       	cpc	r19, r30
    11f2:	ef ef       	ldi	r30, 0xFF	; 255
    11f4:	4e 07       	cpc	r20, r30
    11f6:	ef e3       	ldi	r30, 0x3F	; 63
    11f8:	5e 07       	cpc	r21, r30
    11fa:	08 f3       	brcs	.-62     	; 0x11be <_fpadd_parts+0x1e6>
    11fc:	0b c0       	rjmp	.+22     	; 0x1214 <_fpadd_parts+0x23c>
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	db 82       	std	Y+3, r13	; 0x03
    1202:	ca 82       	std	Y+2, r12	; 0x02
    1204:	2e 0d       	add	r18, r14
    1206:	3f 1d       	adc	r19, r15
    1208:	40 1f       	adc	r20, r16
    120a:	51 1f       	adc	r21, r17
    120c:	2c 83       	std	Y+4, r18	; 0x04
    120e:	3d 83       	std	Y+5, r19	; 0x05
    1210:	4e 83       	std	Y+6, r20	; 0x06
    1212:	5f 83       	std	Y+7, r21	; 0x07
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	88 83       	st	Y, r24
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	4e 81       	ldd	r20, Y+6	; 0x06
    121e:	5f 81       	ldd	r21, Y+7	; 0x07
    1220:	57 ff       	sbrs	r21, 7
    1222:	1d c0       	rjmp	.+58     	; 0x125e <_fpadd_parts+0x286>
    1224:	da 01       	movw	r26, r20
    1226:	c9 01       	movw	r24, r18
    1228:	81 70       	andi	r24, 0x01	; 1
    122a:	90 70       	andi	r25, 0x00	; 0
    122c:	a0 70       	andi	r26, 0x00	; 0
    122e:	b0 70       	andi	r27, 0x00	; 0
    1230:	56 95       	lsr	r21
    1232:	47 95       	ror	r20
    1234:	37 95       	ror	r19
    1236:	27 95       	ror	r18
    1238:	82 2b       	or	r24, r18
    123a:	93 2b       	or	r25, r19
    123c:	a4 2b       	or	r26, r20
    123e:	b5 2b       	or	r27, r21
    1240:	8c 83       	std	Y+4, r24	; 0x04
    1242:	9d 83       	std	Y+5, r25	; 0x05
    1244:	ae 83       	std	Y+6, r26	; 0x06
    1246:	bf 83       	std	Y+7, r27	; 0x07
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	9b 81       	ldd	r25, Y+3	; 0x03
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	9b 83       	std	Y+3, r25	; 0x03
    1250:	8a 83       	std	Y+2, r24	; 0x02
    1252:	05 c0       	rjmp	.+10     	; 0x125e <_fpadd_parts+0x286>
    1254:	e0 e6       	ldi	r30, 0x60	; 96
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <_fpadd_parts+0x288>
    125a:	fb 01       	movw	r30, r22
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <_fpadd_parts+0x288>
    125e:	fe 01       	movw	r30, r28
    1260:	cf 01       	movw	r24, r30
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	ee e0       	ldi	r30, 0x0E	; 14
    1268:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__epilogue_restores__+0x8>

0000126c <__addsf3>:
    126c:	a0 e2       	ldi	r26, 0x20	; 32
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ec e3       	ldi	r30, 0x3C	; 60
    1272:	f9 e0       	ldi	r31, 0x09	; 9
    1274:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__prologue_saves__+0x18>
    1278:	69 83       	std	Y+1, r22	; 0x01
    127a:	7a 83       	std	Y+2, r23	; 0x02
    127c:	8b 83       	std	Y+3, r24	; 0x03
    127e:	9c 83       	std	Y+4, r25	; 0x04
    1280:	2d 83       	std	Y+5, r18	; 0x05
    1282:	3e 83       	std	Y+6, r19	; 0x06
    1284:	4f 83       	std	Y+7, r20	; 0x07
    1286:	58 87       	std	Y+8, r21	; 0x08
    1288:	89 e0       	ldi	r24, 0x09	; 9
    128a:	e8 2e       	mov	r14, r24
    128c:	f1 2c       	mov	r15, r1
    128e:	ec 0e       	add	r14, r28
    1290:	fd 1e       	adc	r15, r29
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	b7 01       	movw	r22, r14
    1298:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    129c:	8e 01       	movw	r16, r28
    129e:	0f 5e       	subi	r16, 0xEF	; 239
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	ce 01       	movw	r24, r28
    12a4:	05 96       	adiw	r24, 0x05	; 5
    12a6:	b8 01       	movw	r22, r16
    12a8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    12ac:	c7 01       	movw	r24, r14
    12ae:	b8 01       	movw	r22, r16
    12b0:	ae 01       	movw	r20, r28
    12b2:	47 5e       	subi	r20, 0xE7	; 231
    12b4:	5f 4f       	sbci	r21, 0xFF	; 255
    12b6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_fpadd_parts>
    12ba:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__pack_f>
    12be:	a0 96       	adiw	r28, 0x20	; 32
    12c0:	e6 e0       	ldi	r30, 0x06	; 6
    12c2:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__epilogue_restores__+0x18>

000012c6 <__subsf3>:
    12c6:	a0 e2       	ldi	r26, 0x20	; 32
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e9 e6       	ldi	r30, 0x69	; 105
    12cc:	f9 e0       	ldi	r31, 0x09	; 9
    12ce:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__prologue_saves__+0x18>
    12d2:	69 83       	std	Y+1, r22	; 0x01
    12d4:	7a 83       	std	Y+2, r23	; 0x02
    12d6:	8b 83       	std	Y+3, r24	; 0x03
    12d8:	9c 83       	std	Y+4, r25	; 0x04
    12da:	2d 83       	std	Y+5, r18	; 0x05
    12dc:	3e 83       	std	Y+6, r19	; 0x06
    12de:	4f 83       	std	Y+7, r20	; 0x07
    12e0:	58 87       	std	Y+8, r21	; 0x08
    12e2:	8e 01       	movw	r16, r28
    12e4:	07 5f       	subi	r16, 0xF7	; 247
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	ce 01       	movw	r24, r28
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	b8 01       	movw	r22, r16
    12ee:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    12f2:	91 e1       	ldi	r25, 0x11	; 17
    12f4:	e9 2e       	mov	r14, r25
    12f6:	f1 2c       	mov	r15, r1
    12f8:	ec 0e       	add	r14, r28
    12fa:	fd 1e       	adc	r15, r29
    12fc:	ce 01       	movw	r24, r28
    12fe:	05 96       	adiw	r24, 0x05	; 5
    1300:	b7 01       	movw	r22, r14
    1302:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    1306:	8a 89       	ldd	r24, Y+18	; 0x12
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	89 27       	eor	r24, r25
    130c:	8a 8b       	std	Y+18, r24	; 0x12
    130e:	c8 01       	movw	r24, r16
    1310:	b7 01       	movw	r22, r14
    1312:	ae 01       	movw	r20, r28
    1314:	47 5e       	subi	r20, 0xE7	; 231
    1316:	5f 4f       	sbci	r21, 0xFF	; 255
    1318:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_fpadd_parts>
    131c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__pack_f>
    1320:	a0 96       	adiw	r28, 0x20	; 32
    1322:	e6 e0       	ldi	r30, 0x06	; 6
    1324:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__epilogue_restores__+0x18>

00001328 <__mulsf3>:
    1328:	a0 e2       	ldi	r26, 0x20	; 32
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ea e9       	ldi	r30, 0x9A	; 154
    132e:	f9 e0       	ldi	r31, 0x09	; 9
    1330:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__prologue_saves__>
    1334:	69 83       	std	Y+1, r22	; 0x01
    1336:	7a 83       	std	Y+2, r23	; 0x02
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	2d 83       	std	Y+5, r18	; 0x05
    133e:	3e 83       	std	Y+6, r19	; 0x06
    1340:	4f 83       	std	Y+7, r20	; 0x07
    1342:	58 87       	std	Y+8, r21	; 0x08
    1344:	ce 01       	movw	r24, r28
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	be 01       	movw	r22, r28
    134a:	67 5f       	subi	r22, 0xF7	; 247
    134c:	7f 4f       	sbci	r23, 0xFF	; 255
    134e:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    1352:	ce 01       	movw	r24, r28
    1354:	05 96       	adiw	r24, 0x05	; 5
    1356:	be 01       	movw	r22, r28
    1358:	6f 5e       	subi	r22, 0xEF	; 239
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    1360:	99 85       	ldd	r25, Y+9	; 0x09
    1362:	92 30       	cpi	r25, 0x02	; 2
    1364:	78 f0       	brcs	.+30     	; 0x1384 <__mulsf3+0x5c>
    1366:	89 89       	ldd	r24, Y+17	; 0x11
    1368:	82 30       	cpi	r24, 0x02	; 2
    136a:	c0 f0       	brcs	.+48     	; 0x139c <__mulsf3+0x74>
    136c:	94 30       	cpi	r25, 0x04	; 4
    136e:	19 f4       	brne	.+6      	; 0x1376 <__mulsf3+0x4e>
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	41 f4       	brne	.+16     	; 0x1384 <__mulsf3+0x5c>
    1374:	cb c0       	rjmp	.+406    	; 0x150c <__mulsf3+0x1e4>
    1376:	84 30       	cpi	r24, 0x04	; 4
    1378:	19 f4       	brne	.+6      	; 0x1380 <__mulsf3+0x58>
    137a:	92 30       	cpi	r25, 0x02	; 2
    137c:	79 f4       	brne	.+30     	; 0x139c <__mulsf3+0x74>
    137e:	c6 c0       	rjmp	.+396    	; 0x150c <__mulsf3+0x1e4>
    1380:	92 30       	cpi	r25, 0x02	; 2
    1382:	51 f4       	brne	.+20     	; 0x1398 <__mulsf3+0x70>
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	2a 85       	ldd	r18, Y+10	; 0x0a
    1388:	9a 89       	ldd	r25, Y+18	; 0x12
    138a:	29 17       	cp	r18, r25
    138c:	09 f4       	brne	.+2      	; 0x1390 <__mulsf3+0x68>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	8a 87       	std	Y+10, r24	; 0x0a
    1392:	ce 01       	movw	r24, r28
    1394:	09 96       	adiw	r24, 0x09	; 9
    1396:	bc c0       	rjmp	.+376    	; 0x1510 <__mulsf3+0x1e8>
    1398:	82 30       	cpi	r24, 0x02	; 2
    139a:	51 f4       	brne	.+20     	; 0x13b0 <__mulsf3+0x88>
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	2a 85       	ldd	r18, Y+10	; 0x0a
    13a0:	9a 89       	ldd	r25, Y+18	; 0x12
    13a2:	29 17       	cp	r18, r25
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <__mulsf3+0x80>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	8a 8b       	std	Y+18, r24	; 0x12
    13aa:	ce 01       	movw	r24, r28
    13ac:	41 96       	adiw	r24, 0x11	; 17
    13ae:	b0 c0       	rjmp	.+352    	; 0x1510 <__mulsf3+0x1e8>
    13b0:	6d 84       	ldd	r6, Y+13	; 0x0d
    13b2:	7e 84       	ldd	r7, Y+14	; 0x0e
    13b4:	8f 84       	ldd	r8, Y+15	; 0x0f
    13b6:	98 88       	ldd	r9, Y+16	; 0x10
    13b8:	ed 88       	ldd	r14, Y+21	; 0x15
    13ba:	fe 88       	ldd	r15, Y+22	; 0x16
    13bc:	0f 89       	ldd	r16, Y+23	; 0x17
    13be:	18 8d       	ldd	r17, Y+24	; 0x18
    13c0:	e0 e2       	ldi	r30, 0x20	; 32
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	dc 01       	movw	r26, r24
    13ca:	aa 24       	eor	r10, r10
    13cc:	bb 24       	eor	r11, r11
    13ce:	65 01       	movw	r12, r10
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	b3 01       	movw	r22, r6
    13d8:	61 70       	andi	r22, 0x01	; 1
    13da:	70 70       	andi	r23, 0x00	; 0
    13dc:	61 15       	cp	r22, r1
    13de:	71 05       	cpc	r23, r1
    13e0:	d1 f0       	breq	.+52     	; 0x1416 <__mulsf3+0xee>
    13e2:	2e 0d       	add	r18, r14
    13e4:	3f 1d       	adc	r19, r15
    13e6:	40 1f       	adc	r20, r16
    13e8:	51 1f       	adc	r21, r17
    13ea:	15 01       	movw	r2, r10
    13ec:	26 01       	movw	r4, r12
    13ee:	28 0e       	add	r2, r24
    13f0:	39 1e       	adc	r3, r25
    13f2:	4a 1e       	adc	r4, r26
    13f4:	5b 1e       	adc	r5, r27
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a0 e0       	ldi	r26, 0x00	; 0
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	2e 15       	cp	r18, r14
    1400:	3f 05       	cpc	r19, r15
    1402:	40 07       	cpc	r20, r16
    1404:	51 07       	cpc	r21, r17
    1406:	18 f0       	brcs	.+6      	; 0x140e <__mulsf3+0xe6>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	dc 01       	movw	r26, r24
    140e:	82 0d       	add	r24, r2
    1410:	93 1d       	adc	r25, r3
    1412:	a4 1d       	adc	r26, r4
    1414:	b5 1d       	adc	r27, r5
    1416:	aa 0c       	add	r10, r10
    1418:	bb 1c       	adc	r11, r11
    141a:	cc 1c       	adc	r12, r12
    141c:	dd 1c       	adc	r13, r13
    141e:	17 ff       	sbrs	r17, 7
    1420:	09 c0       	rjmp	.+18     	; 0x1434 <__mulsf3+0x10c>
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	26 2e       	mov	r2, r22
    1426:	31 2c       	mov	r3, r1
    1428:	41 2c       	mov	r4, r1
    142a:	51 2c       	mov	r5, r1
    142c:	a2 28       	or	r10, r2
    142e:	b3 28       	or	r11, r3
    1430:	c4 28       	or	r12, r4
    1432:	d5 28       	or	r13, r5
    1434:	31 97       	sbiw	r30, 0x01	; 1
    1436:	49 f0       	breq	.+18     	; 0x144a <__mulsf3+0x122>
    1438:	ee 0c       	add	r14, r14
    143a:	ff 1c       	adc	r15, r15
    143c:	00 1f       	adc	r16, r16
    143e:	11 1f       	adc	r17, r17
    1440:	96 94       	lsr	r9
    1442:	87 94       	ror	r8
    1444:	77 94       	ror	r7
    1446:	67 94       	ror	r6
    1448:	c6 cf       	rjmp	.-116    	; 0x13d6 <__mulsf3+0xae>
    144a:	6b 89       	ldd	r22, Y+19	; 0x13
    144c:	7c 89       	ldd	r23, Y+20	; 0x14
    144e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1450:	fc 85       	ldd	r31, Y+12	; 0x0c
    1452:	6e 0f       	add	r22, r30
    1454:	7f 1f       	adc	r23, r31
    1456:	6e 5f       	subi	r22, 0xFE	; 254
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	7c 8f       	std	Y+28, r23	; 0x1c
    145c:	6b 8f       	std	Y+27, r22	; 0x1b
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	ea 85       	ldd	r30, Y+10	; 0x0a
    1462:	7a 89       	ldd	r23, Y+18	; 0x12
    1464:	e7 17       	cp	r30, r23
    1466:	09 f4       	brne	.+2      	; 0x146a <__mulsf3+0x142>
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	6a 8f       	std	Y+26, r22	; 0x1a
    146c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    146e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1470:	10 c0       	rjmp	.+32     	; 0x1492 <__mulsf3+0x16a>
    1472:	fc 01       	movw	r30, r24
    1474:	e1 70       	andi	r30, 0x01	; 1
    1476:	f0 70       	andi	r31, 0x00	; 0
    1478:	30 97       	sbiw	r30, 0x00	; 0
    147a:	29 f0       	breq	.+10     	; 0x1486 <__mulsf3+0x15e>
    147c:	56 95       	lsr	r21
    147e:	47 95       	ror	r20
    1480:	37 95       	ror	r19
    1482:	27 95       	ror	r18
    1484:	50 68       	ori	r21, 0x80	; 128
    1486:	b6 95       	lsr	r27
    1488:	a7 95       	ror	r26
    148a:	97 95       	ror	r25
    148c:	87 95       	ror	r24
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	b7 fd       	sbrc	r27, 7
    1494:	ee cf       	rjmp	.-36     	; 0x1472 <__mulsf3+0x14a>
    1496:	0c c0       	rjmp	.+24     	; 0x14b0 <__mulsf3+0x188>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	aa 1f       	adc	r26, r26
    149e:	bb 1f       	adc	r27, r27
    14a0:	57 fd       	sbrc	r21, 7
    14a2:	81 60       	ori	r24, 0x01	; 1
    14a4:	22 0f       	add	r18, r18
    14a6:	33 1f       	adc	r19, r19
    14a8:	44 1f       	adc	r20, r20
    14aa:	55 1f       	adc	r21, r21
    14ac:	61 50       	subi	r22, 0x01	; 1
    14ae:	70 40       	sbci	r23, 0x00	; 0
    14b0:	80 30       	cpi	r24, 0x00	; 0
    14b2:	e0 e0       	ldi	r30, 0x00	; 0
    14b4:	9e 07       	cpc	r25, r30
    14b6:	e0 e0       	ldi	r30, 0x00	; 0
    14b8:	ae 07       	cpc	r26, r30
    14ba:	e0 e4       	ldi	r30, 0x40	; 64
    14bc:	be 07       	cpc	r27, r30
    14be:	60 f3       	brcs	.-40     	; 0x1498 <__mulsf3+0x170>
    14c0:	6b 8f       	std	Y+27, r22	; 0x1b
    14c2:	7c 8f       	std	Y+28, r23	; 0x1c
    14c4:	6f e7       	ldi	r22, 0x7F	; 127
    14c6:	e6 2e       	mov	r14, r22
    14c8:	f1 2c       	mov	r15, r1
    14ca:	01 2d       	mov	r16, r1
    14cc:	11 2d       	mov	r17, r1
    14ce:	e8 22       	and	r14, r24
    14d0:	f9 22       	and	r15, r25
    14d2:	0a 23       	and	r16, r26
    14d4:	1b 23       	and	r17, r27
    14d6:	60 e4       	ldi	r22, 0x40	; 64
    14d8:	e6 16       	cp	r14, r22
    14da:	f1 04       	cpc	r15, r1
    14dc:	01 05       	cpc	r16, r1
    14de:	11 05       	cpc	r17, r1
    14e0:	61 f4       	brne	.+24     	; 0x14fa <__mulsf3+0x1d2>
    14e2:	87 fd       	sbrc	r24, 7
    14e4:	0a c0       	rjmp	.+20     	; 0x14fa <__mulsf3+0x1d2>
    14e6:	21 15       	cp	r18, r1
    14e8:	31 05       	cpc	r19, r1
    14ea:	41 05       	cpc	r20, r1
    14ec:	51 05       	cpc	r21, r1
    14ee:	29 f0       	breq	.+10     	; 0x14fa <__mulsf3+0x1d2>
    14f0:	80 5c       	subi	r24, 0xC0	; 192
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	af 4f       	sbci	r26, 0xFF	; 255
    14f6:	bf 4f       	sbci	r27, 0xFF	; 255
    14f8:	80 78       	andi	r24, 0x80	; 128
    14fa:	8d 8f       	std	Y+29, r24	; 0x1d
    14fc:	9e 8f       	std	Y+30, r25	; 0x1e
    14fe:	af 8f       	std	Y+31, r26	; 0x1f
    1500:	b8 a3       	std	Y+32, r27	; 0x20
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	89 8f       	std	Y+25, r24	; 0x19
    1506:	ce 01       	movw	r24, r28
    1508:	49 96       	adiw	r24, 0x19	; 25
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <__mulsf3+0x1e8>
    150c:	80 e6       	ldi	r24, 0x60	; 96
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__pack_f>
    1514:	a0 96       	adiw	r28, 0x20	; 32
    1516:	e2 e1       	ldi	r30, 0x12	; 18
    1518:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__epilogue_restores__>

0000151c <__gtsf2>:
    151c:	a8 e1       	ldi	r26, 0x18	; 24
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e4 e9       	ldi	r30, 0x94	; 148
    1522:	fa e0       	ldi	r31, 0x0A	; 10
    1524:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__prologue_saves__+0x18>
    1528:	69 83       	std	Y+1, r22	; 0x01
    152a:	7a 83       	std	Y+2, r23	; 0x02
    152c:	8b 83       	std	Y+3, r24	; 0x03
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	2d 83       	std	Y+5, r18	; 0x05
    1532:	3e 83       	std	Y+6, r19	; 0x06
    1534:	4f 83       	std	Y+7, r20	; 0x07
    1536:	58 87       	std	Y+8, r21	; 0x08
    1538:	8e 01       	movw	r16, r28
    153a:	07 5f       	subi	r16, 0xF7	; 247
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	ce 01       	movw	r24, r28
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	b8 01       	movw	r22, r16
    1544:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    1548:	81 e1       	ldi	r24, 0x11	; 17
    154a:	e8 2e       	mov	r14, r24
    154c:	f1 2c       	mov	r15, r1
    154e:	ec 0e       	add	r14, r28
    1550:	fd 1e       	adc	r15, r29
    1552:	ce 01       	movw	r24, r28
    1554:	05 96       	adiw	r24, 0x05	; 5
    1556:	b7 01       	movw	r22, r14
    1558:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	40 f0       	brcs	.+16     	; 0x1572 <__gtsf2+0x56>
    1562:	89 89       	ldd	r24, Y+17	; 0x11
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	28 f0       	brcs	.+10     	; 0x1572 <__gtsf2+0x56>
    1568:	c8 01       	movw	r24, r16
    156a:	b7 01       	movw	r22, r14
    156c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__fpcmp_parts_f>
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <__gtsf2+0x58>
    1572:	8f ef       	ldi	r24, 0xFF	; 255
    1574:	68 96       	adiw	r28, 0x18	; 24
    1576:	e6 e0       	ldi	r30, 0x06	; 6
    1578:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__epilogue_restores__+0x18>

0000157c <__gesf2>:
    157c:	a8 e1       	ldi	r26, 0x18	; 24
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e4 ec       	ldi	r30, 0xC4	; 196
    1582:	fa e0       	ldi	r31, 0x0A	; 10
    1584:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__prologue_saves__+0x18>
    1588:	69 83       	std	Y+1, r22	; 0x01
    158a:	7a 83       	std	Y+2, r23	; 0x02
    158c:	8b 83       	std	Y+3, r24	; 0x03
    158e:	9c 83       	std	Y+4, r25	; 0x04
    1590:	2d 83       	std	Y+5, r18	; 0x05
    1592:	3e 83       	std	Y+6, r19	; 0x06
    1594:	4f 83       	std	Y+7, r20	; 0x07
    1596:	58 87       	std	Y+8, r21	; 0x08
    1598:	8e 01       	movw	r16, r28
    159a:	07 5f       	subi	r16, 0xF7	; 247
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	ce 01       	movw	r24, r28
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	b8 01       	movw	r22, r16
    15a4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    15a8:	81 e1       	ldi	r24, 0x11	; 17
    15aa:	e8 2e       	mov	r14, r24
    15ac:	f1 2c       	mov	r15, r1
    15ae:	ec 0e       	add	r14, r28
    15b0:	fd 1e       	adc	r15, r29
    15b2:	ce 01       	movw	r24, r28
    15b4:	05 96       	adiw	r24, 0x05	; 5
    15b6:	b7 01       	movw	r22, r14
    15b8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	82 30       	cpi	r24, 0x02	; 2
    15c0:	40 f0       	brcs	.+16     	; 0x15d2 <__gesf2+0x56>
    15c2:	89 89       	ldd	r24, Y+17	; 0x11
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	28 f0       	brcs	.+10     	; 0x15d2 <__gesf2+0x56>
    15c8:	c8 01       	movw	r24, r16
    15ca:	b7 01       	movw	r22, r14
    15cc:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__fpcmp_parts_f>
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <__gesf2+0x58>
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	68 96       	adiw	r28, 0x18	; 24
    15d6:	e6 e0       	ldi	r30, 0x06	; 6
    15d8:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__epilogue_restores__+0x18>

000015dc <__ltsf2>:
    15dc:	a8 e1       	ldi	r26, 0x18	; 24
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e4 ef       	ldi	r30, 0xF4	; 244
    15e2:	fa e0       	ldi	r31, 0x0A	; 10
    15e4:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__prologue_saves__+0x18>
    15e8:	69 83       	std	Y+1, r22	; 0x01
    15ea:	7a 83       	std	Y+2, r23	; 0x02
    15ec:	8b 83       	std	Y+3, r24	; 0x03
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	2d 83       	std	Y+5, r18	; 0x05
    15f2:	3e 83       	std	Y+6, r19	; 0x06
    15f4:	4f 83       	std	Y+7, r20	; 0x07
    15f6:	58 87       	std	Y+8, r21	; 0x08
    15f8:	8e 01       	movw	r16, r28
    15fa:	07 5f       	subi	r16, 0xF7	; 247
    15fc:	1f 4f       	sbci	r17, 0xFF	; 255
    15fe:	ce 01       	movw	r24, r28
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	b8 01       	movw	r22, r16
    1604:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    1608:	81 e1       	ldi	r24, 0x11	; 17
    160a:	e8 2e       	mov	r14, r24
    160c:	f1 2c       	mov	r15, r1
    160e:	ec 0e       	add	r14, r28
    1610:	fd 1e       	adc	r15, r29
    1612:	ce 01       	movw	r24, r28
    1614:	05 96       	adiw	r24, 0x05	; 5
    1616:	b7 01       	movw	r22, r14
    1618:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    161c:	89 85       	ldd	r24, Y+9	; 0x09
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	40 f0       	brcs	.+16     	; 0x1632 <__ltsf2+0x56>
    1622:	89 89       	ldd	r24, Y+17	; 0x11
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	28 f0       	brcs	.+10     	; 0x1632 <__ltsf2+0x56>
    1628:	c8 01       	movw	r24, r16
    162a:	b7 01       	movw	r22, r14
    162c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__fpcmp_parts_f>
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <__ltsf2+0x58>
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	68 96       	adiw	r28, 0x18	; 24
    1636:	e6 e0       	ldi	r30, 0x06	; 6
    1638:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__epilogue_restores__+0x18>

0000163c <__floatsisf>:
    163c:	a8 e0       	ldi	r26, 0x08	; 8
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e4 e2       	ldi	r30, 0x24	; 36
    1642:	fb e0       	ldi	r31, 0x0B	; 11
    1644:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__prologue_saves__+0x18>
    1648:	7b 01       	movw	r14, r22
    164a:	8c 01       	movw	r16, r24
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	d8 01       	movw	r26, r16
    1652:	c7 01       	movw	r24, r14
    1654:	88 27       	eor	r24, r24
    1656:	b7 fd       	sbrc	r27, 7
    1658:	83 95       	inc	r24
    165a:	99 27       	eor	r25, r25
    165c:	aa 27       	eor	r26, r26
    165e:	bb 27       	eor	r27, r27
    1660:	28 2f       	mov	r18, r24
    1662:	8a 83       	std	Y+2, r24	; 0x02
    1664:	e1 14       	cp	r14, r1
    1666:	f1 04       	cpc	r15, r1
    1668:	01 05       	cpc	r16, r1
    166a:	11 05       	cpc	r17, r1
    166c:	19 f4       	brne	.+6      	; 0x1674 <__floatsisf+0x38>
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	37 c0       	rjmp	.+110    	; 0x16e2 <__floatsisf+0xa6>
    1674:	8e e1       	ldi	r24, 0x1E	; 30
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9c 83       	std	Y+4, r25	; 0x04
    167a:	8b 83       	std	Y+3, r24	; 0x03
    167c:	22 23       	and	r18, r18
    167e:	89 f0       	breq	.+34     	; 0x16a2 <__floatsisf+0x66>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	e8 16       	cp	r14, r24
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	f8 06       	cpc	r15, r24
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	08 07       	cpc	r16, r24
    168c:	80 e8       	ldi	r24, 0x80	; 128
    168e:	18 07       	cpc	r17, r24
    1690:	69 f1       	breq	.+90     	; 0x16ec <__floatsisf+0xb0>
    1692:	10 95       	com	r17
    1694:	00 95       	com	r16
    1696:	f0 94       	com	r15
    1698:	e0 94       	com	r14
    169a:	e1 1c       	adc	r14, r1
    169c:	f1 1c       	adc	r15, r1
    169e:	01 1d       	adc	r16, r1
    16a0:	11 1d       	adc	r17, r1
    16a2:	ed 82       	std	Y+5, r14	; 0x05
    16a4:	fe 82       	std	Y+6, r15	; 0x06
    16a6:	0f 83       	std	Y+7, r16	; 0x07
    16a8:	18 87       	std	Y+8, r17	; 0x08
    16aa:	c8 01       	movw	r24, r16
    16ac:	b7 01       	movw	r22, r14
    16ae:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__clzsi2>
    16b2:	9c 01       	movw	r18, r24
    16b4:	21 50       	subi	r18, 0x01	; 1
    16b6:	30 40       	sbci	r19, 0x00	; 0
    16b8:	12 16       	cp	r1, r18
    16ba:	13 06       	cpc	r1, r19
    16bc:	94 f4       	brge	.+36     	; 0x16e2 <__floatsisf+0xa6>
    16be:	02 2e       	mov	r0, r18
    16c0:	04 c0       	rjmp	.+8      	; 0x16ca <__floatsisf+0x8e>
    16c2:	ee 0c       	add	r14, r14
    16c4:	ff 1c       	adc	r15, r15
    16c6:	00 1f       	adc	r16, r16
    16c8:	11 1f       	adc	r17, r17
    16ca:	0a 94       	dec	r0
    16cc:	d2 f7       	brpl	.-12     	; 0x16c2 <__floatsisf+0x86>
    16ce:	ed 82       	std	Y+5, r14	; 0x05
    16d0:	fe 82       	std	Y+6, r15	; 0x06
    16d2:	0f 83       	std	Y+7, r16	; 0x07
    16d4:	18 87       	std	Y+8, r17	; 0x08
    16d6:	8e e1       	ldi	r24, 0x1E	; 30
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	82 1b       	sub	r24, r18
    16dc:	93 0b       	sbc	r25, r19
    16de:	9c 83       	std	Y+4, r25	; 0x04
    16e0:	8b 83       	std	Y+3, r24	; 0x03
    16e2:	ce 01       	movw	r24, r28
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__pack_f>
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <__floatsisf+0xb8>
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	9f ec       	ldi	r25, 0xCF	; 207
    16f4:	28 96       	adiw	r28, 0x08	; 8
    16f6:	e6 e0       	ldi	r30, 0x06	; 6
    16f8:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__epilogue_restores__+0x18>

000016fc <__fixsfsi>:
    16fc:	ac e0       	ldi	r26, 0x0C	; 12
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e4 e8       	ldi	r30, 0x84	; 132
    1702:	fb e0       	ldi	r31, 0x0B	; 11
    1704:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__prologue_saves__+0x20>
    1708:	69 83       	std	Y+1, r22	; 0x01
    170a:	7a 83       	std	Y+2, r23	; 0x02
    170c:	8b 83       	std	Y+3, r24	; 0x03
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	ce 01       	movw	r24, r28
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	be 01       	movw	r22, r28
    1716:	6b 5f       	subi	r22, 0xFB	; 251
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__unpack_f>
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	81 f1       	breq	.+96     	; 0x1784 <__fixsfsi+0x88>
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	70 f1       	brcs	.+92     	; 0x1784 <__fixsfsi+0x88>
    1728:	84 30       	cpi	r24, 0x04	; 4
    172a:	21 f4       	brne	.+8      	; 0x1734 <__fixsfsi+0x38>
    172c:	8e 81       	ldd	r24, Y+6	; 0x06
    172e:	88 23       	and	r24, r24
    1730:	69 f1       	breq	.+90     	; 0x178c <__fixsfsi+0x90>
    1732:	0a c0       	rjmp	.+20     	; 0x1748 <__fixsfsi+0x4c>
    1734:	2f 81       	ldd	r18, Y+7	; 0x07
    1736:	38 85       	ldd	r19, Y+8	; 0x08
    1738:	37 fd       	sbrc	r19, 7
    173a:	24 c0       	rjmp	.+72     	; 0x1784 <__fixsfsi+0x88>
    173c:	6e 81       	ldd	r22, Y+6	; 0x06
    173e:	2f 31       	cpi	r18, 0x1F	; 31
    1740:	31 05       	cpc	r19, r1
    1742:	3c f0       	brlt	.+14     	; 0x1752 <__fixsfsi+0x56>
    1744:	66 23       	and	r22, r22
    1746:	11 f1       	breq	.+68     	; 0x178c <__fixsfsi+0x90>
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	50 e8       	ldi	r21, 0x80	; 128
    1750:	21 c0       	rjmp	.+66     	; 0x1794 <__fixsfsi+0x98>
    1752:	8e e1       	ldi	r24, 0x1E	; 30
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	82 1b       	sub	r24, r18
    1758:	93 0b       	sbc	r25, r19
    175a:	29 85       	ldd	r18, Y+9	; 0x09
    175c:	3a 85       	ldd	r19, Y+10	; 0x0a
    175e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1760:	5c 85       	ldd	r21, Y+12	; 0x0c
    1762:	04 c0       	rjmp	.+8      	; 0x176c <__fixsfsi+0x70>
    1764:	56 95       	lsr	r21
    1766:	47 95       	ror	r20
    1768:	37 95       	ror	r19
    176a:	27 95       	ror	r18
    176c:	8a 95       	dec	r24
    176e:	d2 f7       	brpl	.-12     	; 0x1764 <__fixsfsi+0x68>
    1770:	66 23       	and	r22, r22
    1772:	81 f0       	breq	.+32     	; 0x1794 <__fixsfsi+0x98>
    1774:	50 95       	com	r21
    1776:	40 95       	com	r20
    1778:	30 95       	com	r19
    177a:	21 95       	neg	r18
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	4f 4f       	sbci	r20, 0xFF	; 255
    1780:	5f 4f       	sbci	r21, 0xFF	; 255
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <__fixsfsi+0x98>
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	a9 01       	movw	r20, r18
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <__fixsfsi+0x98>
    178c:	2f ef       	ldi	r18, 0xFF	; 255
    178e:	3f ef       	ldi	r19, 0xFF	; 255
    1790:	4f ef       	ldi	r20, 0xFF	; 255
    1792:	5f e7       	ldi	r21, 0x7F	; 127
    1794:	b9 01       	movw	r22, r18
    1796:	ca 01       	movw	r24, r20
    1798:	2c 96       	adiw	r28, 0x0c	; 12
    179a:	e2 e0       	ldi	r30, 0x02	; 2
    179c:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__epilogue_restores__+0x20>

000017a0 <__clzsi2>:
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	7b 01       	movw	r14, r22
    17b2:	8c 01       	movw	r16, r24
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	e8 16       	cp	r14, r24
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	f8 06       	cpc	r15, r24
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	08 07       	cpc	r16, r24
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	18 07       	cpc	r17, r24
    17c4:	58 f4       	brcc	.+22     	; 0x17dc <__clzsi2+0x3c>
    17c6:	ef ef       	ldi	r30, 0xFF	; 255
    17c8:	ee 16       	cp	r14, r30
    17ca:	f1 04       	cpc	r15, r1
    17cc:	01 05       	cpc	r16, r1
    17ce:	11 05       	cpc	r17, r1
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <__clzsi2+0x34>
    17d2:	90 f4       	brcc	.+36     	; 0x17f8 <__clzsi2+0x58>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	dc 01       	movw	r26, r24
    17da:	17 c0       	rjmp	.+46     	; 0x180a <__clzsi2+0x6a>
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	ef 16       	cp	r14, r31
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	ff 06       	cpc	r15, r31
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	0f 07       	cpc	r16, r31
    17e8:	f1 e0       	ldi	r31, 0x01	; 1
    17ea:	1f 07       	cpc	r17, r31
    17ec:	50 f4       	brcc	.+20     	; 0x1802 <__clzsi2+0x62>
    17ee:	80 e1       	ldi	r24, 0x10	; 16
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a0 e0       	ldi	r26, 0x00	; 0
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <__clzsi2+0x6a>
    17f8:	88 e0       	ldi	r24, 0x08	; 8
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e0       	ldi	r26, 0x00	; 0
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	04 c0       	rjmp	.+8      	; 0x180a <__clzsi2+0x6a>
    1802:	88 e1       	ldi	r24, 0x18	; 24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e0       	ldi	r26, 0x00	; 0
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	20 e2       	ldi	r18, 0x20	; 32
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	28 1b       	sub	r18, r24
    1814:	39 0b       	sbc	r19, r25
    1816:	4a 0b       	sbc	r20, r26
    1818:	5b 0b       	sbc	r21, r27
    181a:	57 01       	movw	r10, r14
    181c:	68 01       	movw	r12, r16
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <__clzsi2+0x88>
    1820:	d6 94       	lsr	r13
    1822:	c7 94       	ror	r12
    1824:	b7 94       	ror	r11
    1826:	a7 94       	ror	r10
    1828:	8a 95       	dec	r24
    182a:	d2 f7       	brpl	.-12     	; 0x1820 <__clzsi2+0x80>
    182c:	d6 01       	movw	r26, r12
    182e:	c5 01       	movw	r24, r10
    1830:	88 59       	subi	r24, 0x98	; 152
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	fc 01       	movw	r30, r24
    1836:	80 81       	ld	r24, Z
    1838:	28 1b       	sub	r18, r24
    183a:	31 09       	sbc	r19, r1
    183c:	41 09       	sbc	r20, r1
    183e:	51 09       	sbc	r21, r1
    1840:	c9 01       	movw	r24, r18
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	cf 90       	pop	r12
    184e:	bf 90       	pop	r11
    1850:	af 90       	pop	r10
    1852:	08 95       	ret

00001854 <__pack_f>:
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	fc 01       	movw	r30, r24
    1862:	24 81       	ldd	r18, Z+4	; 0x04
    1864:	35 81       	ldd	r19, Z+5	; 0x05
    1866:	46 81       	ldd	r20, Z+6	; 0x06
    1868:	57 81       	ldd	r21, Z+7	; 0x07
    186a:	61 81       	ldd	r22, Z+1	; 0x01
    186c:	80 81       	ld	r24, Z
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	20 f4       	brcc	.+8      	; 0x187a <__pack_f+0x26>
    1872:	40 61       	ori	r20, 0x10	; 16
    1874:	ef ef       	ldi	r30, 0xFF	; 255
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	a3 c0       	rjmp	.+326    	; 0x19c0 <__pack_f+0x16c>
    187a:	84 30       	cpi	r24, 0x04	; 4
    187c:	09 f4       	brne	.+2      	; 0x1880 <__pack_f+0x2c>
    187e:	9b c0       	rjmp	.+310    	; 0x19b6 <__pack_f+0x162>
    1880:	82 30       	cpi	r24, 0x02	; 2
    1882:	09 f4       	brne	.+2      	; 0x1886 <__pack_f+0x32>
    1884:	92 c0       	rjmp	.+292    	; 0x19aa <__pack_f+0x156>
    1886:	21 15       	cp	r18, r1
    1888:	31 05       	cpc	r19, r1
    188a:	41 05       	cpc	r20, r1
    188c:	51 05       	cpc	r21, r1
    188e:	09 f4       	brne	.+2      	; 0x1892 <__pack_f+0x3e>
    1890:	8f c0       	rjmp	.+286    	; 0x19b0 <__pack_f+0x15c>
    1892:	02 80       	ldd	r0, Z+2	; 0x02
    1894:	f3 81       	ldd	r31, Z+3	; 0x03
    1896:	e0 2d       	mov	r30, r0
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	e2 38       	cpi	r30, 0x82	; 130
    189c:	f8 07       	cpc	r31, r24
    189e:	0c f0       	brlt	.+2      	; 0x18a2 <__pack_f+0x4e>
    18a0:	5a c0       	rjmp	.+180    	; 0x1956 <__pack_f+0x102>
    18a2:	c2 e8       	ldi	r28, 0x82	; 130
    18a4:	df ef       	ldi	r29, 0xFF	; 255
    18a6:	ce 1b       	sub	r28, r30
    18a8:	df 0b       	sbc	r29, r31
    18aa:	ca 31       	cpi	r28, 0x1A	; 26
    18ac:	d1 05       	cpc	r29, r1
    18ae:	6c f5       	brge	.+90     	; 0x190a <__pack_f+0xb6>
    18b0:	79 01       	movw	r14, r18
    18b2:	8a 01       	movw	r16, r20
    18b4:	0c 2e       	mov	r0, r28
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <__pack_f+0x6c>
    18b8:	16 95       	lsr	r17
    18ba:	07 95       	ror	r16
    18bc:	f7 94       	ror	r15
    18be:	e7 94       	ror	r14
    18c0:	0a 94       	dec	r0
    18c2:	d2 f7       	brpl	.-12     	; 0x18b8 <__pack_f+0x64>
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a0 e0       	ldi	r26, 0x00	; 0
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	0c 2e       	mov	r0, r28
    18ce:	04 c0       	rjmp	.+8      	; 0x18d8 <__pack_f+0x84>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	aa 1f       	adc	r26, r26
    18d6:	bb 1f       	adc	r27, r27
    18d8:	0a 94       	dec	r0
    18da:	d2 f7       	brpl	.-12     	; 0x18d0 <__pack_f+0x7c>
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	a1 09       	sbc	r26, r1
    18e0:	b1 09       	sbc	r27, r1
    18e2:	82 23       	and	r24, r18
    18e4:	93 23       	and	r25, r19
    18e6:	a4 23       	and	r26, r20
    18e8:	b5 23       	and	r27, r21
    18ea:	21 e0       	ldi	r18, 0x01	; 1
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	a1 05       	cpc	r26, r1
    18f6:	b1 05       	cpc	r27, r1
    18f8:	19 f4       	brne	.+6      	; 0x1900 <__pack_f+0xac>
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	2e 29       	or	r18, r14
    1902:	3f 29       	or	r19, r15
    1904:	40 2b       	or	r20, r16
    1906:	51 2b       	or	r21, r17
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <__pack_f+0xbc>
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	a9 01       	movw	r20, r18
    1910:	da 01       	movw	r26, r20
    1912:	c9 01       	movw	r24, r18
    1914:	8f 77       	andi	r24, 0x7F	; 127
    1916:	90 70       	andi	r25, 0x00	; 0
    1918:	a0 70       	andi	r26, 0x00	; 0
    191a:	b0 70       	andi	r27, 0x00	; 0
    191c:	80 34       	cpi	r24, 0x40	; 64
    191e:	91 05       	cpc	r25, r1
    1920:	a1 05       	cpc	r26, r1
    1922:	b1 05       	cpc	r27, r1
    1924:	39 f4       	brne	.+14     	; 0x1934 <__pack_f+0xe0>
    1926:	27 ff       	sbrs	r18, 7
    1928:	09 c0       	rjmp	.+18     	; 0x193c <__pack_f+0xe8>
    192a:	20 5c       	subi	r18, 0xC0	; 192
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	4f 4f       	sbci	r20, 0xFF	; 255
    1930:	5f 4f       	sbci	r21, 0xFF	; 255
    1932:	04 c0       	rjmp	.+8      	; 0x193c <__pack_f+0xe8>
    1934:	21 5c       	subi	r18, 0xC1	; 193
    1936:	3f 4f       	sbci	r19, 0xFF	; 255
    1938:	4f 4f       	sbci	r20, 0xFF	; 255
    193a:	5f 4f       	sbci	r21, 0xFF	; 255
    193c:	e1 e0       	ldi	r30, 0x01	; 1
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	20 30       	cpi	r18, 0x00	; 0
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	38 07       	cpc	r19, r24
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	48 07       	cpc	r20, r24
    194a:	80 e4       	ldi	r24, 0x40	; 64
    194c:	58 07       	cpc	r21, r24
    194e:	28 f5       	brcc	.+74     	; 0x199a <__pack_f+0x146>
    1950:	e0 e0       	ldi	r30, 0x00	; 0
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	22 c0       	rjmp	.+68     	; 0x199a <__pack_f+0x146>
    1956:	e0 38       	cpi	r30, 0x80	; 128
    1958:	f1 05       	cpc	r31, r1
    195a:	6c f5       	brge	.+90     	; 0x19b6 <__pack_f+0x162>
    195c:	e1 58       	subi	r30, 0x81	; 129
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	da 01       	movw	r26, r20
    1962:	c9 01       	movw	r24, r18
    1964:	8f 77       	andi	r24, 0x7F	; 127
    1966:	90 70       	andi	r25, 0x00	; 0
    1968:	a0 70       	andi	r26, 0x00	; 0
    196a:	b0 70       	andi	r27, 0x00	; 0
    196c:	80 34       	cpi	r24, 0x40	; 64
    196e:	91 05       	cpc	r25, r1
    1970:	a1 05       	cpc	r26, r1
    1972:	b1 05       	cpc	r27, r1
    1974:	39 f4       	brne	.+14     	; 0x1984 <__pack_f+0x130>
    1976:	27 ff       	sbrs	r18, 7
    1978:	09 c0       	rjmp	.+18     	; 0x198c <__pack_f+0x138>
    197a:	20 5c       	subi	r18, 0xC0	; 192
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	4f 4f       	sbci	r20, 0xFF	; 255
    1980:	5f 4f       	sbci	r21, 0xFF	; 255
    1982:	04 c0       	rjmp	.+8      	; 0x198c <__pack_f+0x138>
    1984:	21 5c       	subi	r18, 0xC1	; 193
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	4f 4f       	sbci	r20, 0xFF	; 255
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	57 ff       	sbrs	r21, 7
    198e:	05 c0       	rjmp	.+10     	; 0x199a <__pack_f+0x146>
    1990:	56 95       	lsr	r21
    1992:	47 95       	ror	r20
    1994:	37 95       	ror	r19
    1996:	27 95       	ror	r18
    1998:	31 96       	adiw	r30, 0x01	; 1
    199a:	87 e0       	ldi	r24, 0x07	; 7
    199c:	56 95       	lsr	r21
    199e:	47 95       	ror	r20
    19a0:	37 95       	ror	r19
    19a2:	27 95       	ror	r18
    19a4:	8a 95       	dec	r24
    19a6:	d1 f7       	brne	.-12     	; 0x199c <__pack_f+0x148>
    19a8:	0b c0       	rjmp	.+22     	; 0x19c0 <__pack_f+0x16c>
    19aa:	e0 e0       	ldi	r30, 0x00	; 0
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	05 c0       	rjmp	.+10     	; 0x19ba <__pack_f+0x166>
    19b0:	e0 e0       	ldi	r30, 0x00	; 0
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <__pack_f+0x16c>
    19b6:	ef ef       	ldi	r30, 0xFF	; 255
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	a9 01       	movw	r20, r18
    19c0:	8e 2f       	mov	r24, r30
    19c2:	87 95       	ror	r24
    19c4:	88 27       	eor	r24, r24
    19c6:	87 95       	ror	r24
    19c8:	94 2f       	mov	r25, r20
    19ca:	9f 77       	andi	r25, 0x7F	; 127
    19cc:	67 95       	ror	r22
    19ce:	66 27       	eor	r22, r22
    19d0:	67 95       	ror	r22
    19d2:	e6 95       	lsr	r30
    19d4:	e2 2e       	mov	r14, r18
    19d6:	a9 2f       	mov	r26, r25
    19d8:	a8 2b       	or	r26, r24
    19da:	fe 2f       	mov	r31, r30
    19dc:	f6 2b       	or	r31, r22
    19de:	62 2f       	mov	r22, r18
    19e0:	73 2f       	mov	r23, r19
    19e2:	8a 2f       	mov	r24, r26
    19e4:	9f 2f       	mov	r25, r31
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	e6 e0       	ldi	r30, 0x06	; 6
    19ec:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__epilogue_restores__+0x18>

000019f0 <__unpack_f>:
    19f0:	dc 01       	movw	r26, r24
    19f2:	fb 01       	movw	r30, r22
    19f4:	2c 91       	ld	r18, X
    19f6:	11 96       	adiw	r26, 0x01	; 1
    19f8:	3c 91       	ld	r19, X
    19fa:	11 97       	sbiw	r26, 0x01	; 1
    19fc:	12 96       	adiw	r26, 0x02	; 2
    19fe:	8c 91       	ld	r24, X
    1a00:	12 97       	sbiw	r26, 0x02	; 2
    1a02:	48 2f       	mov	r20, r24
    1a04:	4f 77       	andi	r20, 0x7F	; 127
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	98 2f       	mov	r25, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	99 27       	eor	r25, r25
    1a0e:	99 1f       	adc	r25, r25
    1a10:	13 96       	adiw	r26, 0x03	; 3
    1a12:	6c 91       	ld	r22, X
    1a14:	13 97       	sbiw	r26, 0x03	; 3
    1a16:	86 2f       	mov	r24, r22
    1a18:	88 0f       	add	r24, r24
    1a1a:	89 2b       	or	r24, r25
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	66 1f       	adc	r22, r22
    1a20:	66 27       	eor	r22, r22
    1a22:	66 1f       	adc	r22, r22
    1a24:	61 83       	std	Z+1, r22	; 0x01
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	39 f5       	brne	.+78     	; 0x1a78 <__unpack_f+0x88>
    1a2a:	21 15       	cp	r18, r1
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	41 05       	cpc	r20, r1
    1a30:	51 05       	cpc	r21, r1
    1a32:	11 f4       	brne	.+4      	; 0x1a38 <__unpack_f+0x48>
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	29 c0       	rjmp	.+82     	; 0x1a8a <__unpack_f+0x9a>
    1a38:	82 e8       	ldi	r24, 0x82	; 130
    1a3a:	9f ef       	ldi	r25, 0xFF	; 255
    1a3c:	93 83       	std	Z+3, r25	; 0x03
    1a3e:	82 83       	std	Z+2, r24	; 0x02
    1a40:	67 e0       	ldi	r22, 0x07	; 7
    1a42:	22 0f       	add	r18, r18
    1a44:	33 1f       	adc	r19, r19
    1a46:	44 1f       	adc	r20, r20
    1a48:	55 1f       	adc	r21, r21
    1a4a:	6a 95       	dec	r22
    1a4c:	d1 f7       	brne	.-12     	; 0x1a42 <__unpack_f+0x52>
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	80 83       	st	Z, r24
    1a52:	09 c0       	rjmp	.+18     	; 0x1a66 <__unpack_f+0x76>
    1a54:	22 0f       	add	r18, r18
    1a56:	33 1f       	adc	r19, r19
    1a58:	44 1f       	adc	r20, r20
    1a5a:	55 1f       	adc	r21, r21
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	93 83       	std	Z+3, r25	; 0x03
    1a64:	82 83       	std	Z+2, r24	; 0x02
    1a66:	20 30       	cpi	r18, 0x00	; 0
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	38 07       	cpc	r19, r24
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	48 07       	cpc	r20, r24
    1a70:	80 e4       	ldi	r24, 0x40	; 64
    1a72:	58 07       	cpc	r21, r24
    1a74:	78 f3       	brcs	.-34     	; 0x1a54 <__unpack_f+0x64>
    1a76:	20 c0       	rjmp	.+64     	; 0x1ab8 <__unpack_f+0xc8>
    1a78:	8f 3f       	cpi	r24, 0xFF	; 255
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	79 f4       	brne	.+30     	; 0x1a9c <__unpack_f+0xac>
    1a7e:	21 15       	cp	r18, r1
    1a80:	31 05       	cpc	r19, r1
    1a82:	41 05       	cpc	r20, r1
    1a84:	51 05       	cpc	r21, r1
    1a86:	19 f4       	brne	.+6      	; 0x1a8e <__unpack_f+0x9e>
    1a88:	84 e0       	ldi	r24, 0x04	; 4
    1a8a:	80 83       	st	Z, r24
    1a8c:	08 95       	ret
    1a8e:	44 ff       	sbrs	r20, 4
    1a90:	03 c0       	rjmp	.+6      	; 0x1a98 <__unpack_f+0xa8>
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	80 83       	st	Z, r24
    1a96:	10 c0       	rjmp	.+32     	; 0x1ab8 <__unpack_f+0xc8>
    1a98:	10 82       	st	Z, r1
    1a9a:	0e c0       	rjmp	.+28     	; 0x1ab8 <__unpack_f+0xc8>
    1a9c:	8f 57       	subi	r24, 0x7F	; 127
    1a9e:	90 40       	sbci	r25, 0x00	; 0
    1aa0:	93 83       	std	Z+3, r25	; 0x03
    1aa2:	82 83       	std	Z+2, r24	; 0x02
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	80 83       	st	Z, r24
    1aa8:	87 e0       	ldi	r24, 0x07	; 7
    1aaa:	22 0f       	add	r18, r18
    1aac:	33 1f       	adc	r19, r19
    1aae:	44 1f       	adc	r20, r20
    1ab0:	55 1f       	adc	r21, r21
    1ab2:	8a 95       	dec	r24
    1ab4:	d1 f7       	brne	.-12     	; 0x1aaa <__unpack_f+0xba>
    1ab6:	50 64       	ori	r21, 0x40	; 64
    1ab8:	24 83       	std	Z+4, r18	; 0x04
    1aba:	35 83       	std	Z+5, r19	; 0x05
    1abc:	46 83       	std	Z+6, r20	; 0x06
    1abe:	57 83       	std	Z+7, r21	; 0x07
    1ac0:	08 95       	ret

00001ac2 <__fpcmp_parts_f>:
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	db 01       	movw	r26, r22
    1ac6:	90 81       	ld	r25, Z
    1ac8:	92 30       	cpi	r25, 0x02	; 2
    1aca:	08 f4       	brcc	.+2      	; 0x1ace <__fpcmp_parts_f+0xc>
    1acc:	49 c0       	rjmp	.+146    	; 0x1b60 <__fpcmp_parts_f+0x9e>
    1ace:	8c 91       	ld	r24, X
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	08 f4       	brcc	.+2      	; 0x1ad6 <__fpcmp_parts_f+0x14>
    1ad4:	45 c0       	rjmp	.+138    	; 0x1b60 <__fpcmp_parts_f+0x9e>
    1ad6:	94 30       	cpi	r25, 0x04	; 4
    1ad8:	51 f4       	brne	.+20     	; 0x1aee <__fpcmp_parts_f+0x2c>
    1ada:	61 81       	ldd	r22, Z+1	; 0x01
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	b1 f5       	brne	.+108    	; 0x1b4c <__fpcmp_parts_f+0x8a>
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	2c 91       	ld	r18, X
    1ae4:	11 97       	sbiw	r26, 0x01	; 1
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	26 1b       	sub	r18, r22
    1aea:	31 09       	sbc	r19, r1
    1aec:	41 c0       	rjmp	.+130    	; 0x1b70 <__fpcmp_parts_f+0xae>
    1aee:	84 30       	cpi	r24, 0x04	; 4
    1af0:	21 f0       	breq	.+8      	; 0x1afa <__fpcmp_parts_f+0x38>
    1af2:	92 30       	cpi	r25, 0x02	; 2
    1af4:	41 f4       	brne	.+16     	; 0x1b06 <__fpcmp_parts_f+0x44>
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	b1 f1       	breq	.+108    	; 0x1b66 <__fpcmp_parts_f+0xa4>
    1afa:	11 96       	adiw	r26, 0x01	; 1
    1afc:	8c 91       	ld	r24, X
    1afe:	11 97       	sbiw	r26, 0x01	; 1
    1b00:	88 23       	and	r24, r24
    1b02:	a1 f1       	breq	.+104    	; 0x1b6c <__fpcmp_parts_f+0xaa>
    1b04:	2d c0       	rjmp	.+90     	; 0x1b60 <__fpcmp_parts_f+0x9e>
    1b06:	61 81       	ldd	r22, Z+1	; 0x01
    1b08:	82 30       	cpi	r24, 0x02	; 2
    1b0a:	01 f1       	breq	.+64     	; 0x1b4c <__fpcmp_parts_f+0x8a>
    1b0c:	11 96       	adiw	r26, 0x01	; 1
    1b0e:	8c 91       	ld	r24, X
    1b10:	11 97       	sbiw	r26, 0x01	; 1
    1b12:	68 17       	cp	r22, r24
    1b14:	d9 f4       	brne	.+54     	; 0x1b4c <__fpcmp_parts_f+0x8a>
    1b16:	22 81       	ldd	r18, Z+2	; 0x02
    1b18:	33 81       	ldd	r19, Z+3	; 0x03
    1b1a:	12 96       	adiw	r26, 0x02	; 2
    1b1c:	8d 91       	ld	r24, X+
    1b1e:	9c 91       	ld	r25, X
    1b20:	13 97       	sbiw	r26, 0x03	; 3
    1b22:	82 17       	cp	r24, r18
    1b24:	93 07       	cpc	r25, r19
    1b26:	94 f0       	brlt	.+36     	; 0x1b4c <__fpcmp_parts_f+0x8a>
    1b28:	28 17       	cp	r18, r24
    1b2a:	39 07       	cpc	r19, r25
    1b2c:	bc f0       	brlt	.+46     	; 0x1b5c <__fpcmp_parts_f+0x9a>
    1b2e:	24 81       	ldd	r18, Z+4	; 0x04
    1b30:	35 81       	ldd	r19, Z+5	; 0x05
    1b32:	46 81       	ldd	r20, Z+6	; 0x06
    1b34:	57 81       	ldd	r21, Z+7	; 0x07
    1b36:	14 96       	adiw	r26, 0x04	; 4
    1b38:	8d 91       	ld	r24, X+
    1b3a:	9d 91       	ld	r25, X+
    1b3c:	0d 90       	ld	r0, X+
    1b3e:	bc 91       	ld	r27, X
    1b40:	a0 2d       	mov	r26, r0
    1b42:	82 17       	cp	r24, r18
    1b44:	93 07       	cpc	r25, r19
    1b46:	a4 07       	cpc	r26, r20
    1b48:	b5 07       	cpc	r27, r21
    1b4a:	18 f4       	brcc	.+6      	; 0x1b52 <__fpcmp_parts_f+0x90>
    1b4c:	66 23       	and	r22, r22
    1b4e:	41 f0       	breq	.+16     	; 0x1b60 <__fpcmp_parts_f+0x9e>
    1b50:	0d c0       	rjmp	.+26     	; 0x1b6c <__fpcmp_parts_f+0xaa>
    1b52:	28 17       	cp	r18, r24
    1b54:	39 07       	cpc	r19, r25
    1b56:	4a 07       	cpc	r20, r26
    1b58:	5b 07       	cpc	r21, r27
    1b5a:	28 f4       	brcc	.+10     	; 0x1b66 <__fpcmp_parts_f+0xa4>
    1b5c:	66 23       	and	r22, r22
    1b5e:	31 f0       	breq	.+12     	; 0x1b6c <__fpcmp_parts_f+0xaa>
    1b60:	21 e0       	ldi	r18, 0x01	; 1
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	05 c0       	rjmp	.+10     	; 0x1b70 <__fpcmp_parts_f+0xae>
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <__fpcmp_parts_f+0xae>
    1b6c:	2f ef       	ldi	r18, 0xFF	; 255
    1b6e:	3f ef       	ldi	r19, 0xFF	; 255
    1b70:	c9 01       	movw	r24, r18
    1b72:	08 95       	ret

00001b74 <__udivmodsi4>:
    1b74:	a1 e2       	ldi	r26, 0x21	; 33
    1b76:	1a 2e       	mov	r1, r26
    1b78:	aa 1b       	sub	r26, r26
    1b7a:	bb 1b       	sub	r27, r27
    1b7c:	fd 01       	movw	r30, r26
    1b7e:	0d c0       	rjmp	.+26     	; 0x1b9a <__udivmodsi4_ep>

00001b80 <__udivmodsi4_loop>:
    1b80:	aa 1f       	adc	r26, r26
    1b82:	bb 1f       	adc	r27, r27
    1b84:	ee 1f       	adc	r30, r30
    1b86:	ff 1f       	adc	r31, r31
    1b88:	a2 17       	cp	r26, r18
    1b8a:	b3 07       	cpc	r27, r19
    1b8c:	e4 07       	cpc	r30, r20
    1b8e:	f5 07       	cpc	r31, r21
    1b90:	20 f0       	brcs	.+8      	; 0x1b9a <__udivmodsi4_ep>
    1b92:	a2 1b       	sub	r26, r18
    1b94:	b3 0b       	sbc	r27, r19
    1b96:	e4 0b       	sbc	r30, r20
    1b98:	f5 0b       	sbc	r31, r21

00001b9a <__udivmodsi4_ep>:
    1b9a:	66 1f       	adc	r22, r22
    1b9c:	77 1f       	adc	r23, r23
    1b9e:	88 1f       	adc	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	1a 94       	dec	r1
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <__udivmodsi4_loop>
    1ba6:	60 95       	com	r22
    1ba8:	70 95       	com	r23
    1baa:	80 95       	com	r24
    1bac:	90 95       	com	r25
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	bd 01       	movw	r22, r26
    1bb4:	cf 01       	movw	r24, r30
    1bb6:	08 95       	ret

00001bb8 <__prologue_saves__>:
    1bb8:	2f 92       	push	r2
    1bba:	3f 92       	push	r3
    1bbc:	4f 92       	push	r4
    1bbe:	5f 92       	push	r5
    1bc0:	6f 92       	push	r6
    1bc2:	7f 92       	push	r7
    1bc4:	8f 92       	push	r8
    1bc6:	9f 92       	push	r9
    1bc8:	af 92       	push	r10
    1bca:	bf 92       	push	r11
    1bcc:	cf 92       	push	r12
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	ca 1b       	sub	r28, r26
    1be2:	db 0b       	sbc	r29, r27
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	09 94       	ijmp

00001bf0 <__epilogue_restores__>:
    1bf0:	2a 88       	ldd	r2, Y+18	; 0x12
    1bf2:	39 88       	ldd	r3, Y+17	; 0x11
    1bf4:	48 88       	ldd	r4, Y+16	; 0x10
    1bf6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bf8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bfa:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bfc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bfe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c00:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c02:	b9 84       	ldd	r11, Y+9	; 0x09
    1c04:	c8 84       	ldd	r12, Y+8	; 0x08
    1c06:	df 80       	ldd	r13, Y+7	; 0x07
    1c08:	ee 80       	ldd	r14, Y+6	; 0x06
    1c0a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c0c:	0c 81       	ldd	r16, Y+4	; 0x04
    1c0e:	1b 81       	ldd	r17, Y+3	; 0x03
    1c10:	aa 81       	ldd	r26, Y+2	; 0x02
    1c12:	b9 81       	ldd	r27, Y+1	; 0x01
    1c14:	ce 0f       	add	r28, r30
    1c16:	d1 1d       	adc	r29, r1
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	ed 01       	movw	r28, r26
    1c24:	08 95       	ret

00001c26 <itoa>:
    1c26:	fb 01       	movw	r30, r22
    1c28:	9f 01       	movw	r18, r30
    1c2a:	e8 94       	clt
    1c2c:	42 30       	cpi	r20, 0x02	; 2
    1c2e:	c4 f0       	brlt	.+48     	; 0x1c60 <itoa+0x3a>
    1c30:	45 32       	cpi	r20, 0x25	; 37
    1c32:	b4 f4       	brge	.+44     	; 0x1c60 <itoa+0x3a>
    1c34:	4a 30       	cpi	r20, 0x0A	; 10
    1c36:	29 f4       	brne	.+10     	; 0x1c42 <itoa+0x1c>
    1c38:	97 fb       	bst	r25, 7
    1c3a:	1e f4       	brtc	.+6      	; 0x1c42 <itoa+0x1c>
    1c3c:	90 95       	com	r25
    1c3e:	81 95       	neg	r24
    1c40:	9f 4f       	sbci	r25, 0xFF	; 255
    1c42:	64 2f       	mov	r22, r20
    1c44:	77 27       	eor	r23, r23
    1c46:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__udivmodhi4>
    1c4a:	80 5d       	subi	r24, 0xD0	; 208
    1c4c:	8a 33       	cpi	r24, 0x3A	; 58
    1c4e:	0c f0       	brlt	.+2      	; 0x1c52 <itoa+0x2c>
    1c50:	89 5d       	subi	r24, 0xD9	; 217
    1c52:	81 93       	st	Z+, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	a1 f7       	brne	.-24     	; 0x1c42 <itoa+0x1c>
    1c5a:	16 f4       	brtc	.+4      	; 0x1c60 <itoa+0x3a>
    1c5c:	5d e2       	ldi	r21, 0x2D	; 45
    1c5e:	51 93       	st	Z+, r21
    1c60:	10 82       	st	Z, r1
    1c62:	c9 01       	movw	r24, r18
    1c64:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <strrev>

00001c68 <strrev>:
    1c68:	dc 01       	movw	r26, r24
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	67 2f       	mov	r22, r23
    1c6e:	71 91       	ld	r23, Z+
    1c70:	77 23       	and	r23, r23
    1c72:	e1 f7       	brne	.-8      	; 0x1c6c <strrev+0x4>
    1c74:	32 97       	sbiw	r30, 0x02	; 2
    1c76:	04 c0       	rjmp	.+8      	; 0x1c80 <strrev+0x18>
    1c78:	7c 91       	ld	r23, X
    1c7a:	6d 93       	st	X+, r22
    1c7c:	70 83       	st	Z, r23
    1c7e:	62 91       	ld	r22, -Z
    1c80:	ae 17       	cp	r26, r30
    1c82:	bf 07       	cpc	r27, r31
    1c84:	c8 f3       	brcs	.-14     	; 0x1c78 <strrev+0x10>
    1c86:	08 95       	ret

00001c88 <__udivmodhi4>:
    1c88:	aa 1b       	sub	r26, r26
    1c8a:	bb 1b       	sub	r27, r27
    1c8c:	51 e1       	ldi	r21, 0x11	; 17
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <__udivmodhi4_ep>

00001c90 <__udivmodhi4_loop>:
    1c90:	aa 1f       	adc	r26, r26
    1c92:	bb 1f       	adc	r27, r27
    1c94:	a6 17       	cp	r26, r22
    1c96:	b7 07       	cpc	r27, r23
    1c98:	10 f0       	brcs	.+4      	; 0x1c9e <__udivmodhi4_ep>
    1c9a:	a6 1b       	sub	r26, r22
    1c9c:	b7 0b       	sbc	r27, r23

00001c9e <__udivmodhi4_ep>:
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	5a 95       	dec	r21
    1ca4:	a9 f7       	brne	.-22     	; 0x1c90 <__udivmodhi4_loop>
    1ca6:	80 95       	com	r24
    1ca8:	90 95       	com	r25
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	08 95       	ret

00001cb0 <_exit>:
    1cb0:	f8 94       	cli

00001cb2 <__stop_program>:
    1cb2:	ff cf       	rjmp	.-2      	; 0x1cb2 <__stop_program>
