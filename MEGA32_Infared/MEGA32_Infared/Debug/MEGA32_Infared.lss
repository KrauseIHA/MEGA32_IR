
MEGA32_Infared.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001732  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001732  000017a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000954  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000014d  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00002251  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000031f  00000000  00000000  00002411  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002402  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e8  00000000  00000000  00004b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a64  00000000  00000000  00005c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  00007680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000598  00000000  00000000  000079f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a79  00000000  00000000  00007f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000005d6  00000000  00000000  00008a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00008fd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 b4 05 	call	0xb68	; 0xb68 <main>
      7a:	0c 94 97 0b 	jmp	0x172e	; 0x172e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <i2c_init>:
#include <avr/delay.h>
#include "I2C.h"
#include "uart.h"

void i2c_init()
{
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
  // ---> Write code here to initialize the TWBR register
  // LM75 clock has be to be lower than 400 kHz (according to LM75 data sheet)
  // The TWBR must be at least 10 in master mode (Mega32 data book)
  // 3686,4kHz/(16+2(TWBR)*4^TWPS)
  TWBR = 0x0A;
      8a:	80 e2       	ldi	r24, 0x20	; 32
      8c:	90 e0       	ldi	r25, 0x00	; 0
      8e:	2a e0       	ldi	r18, 0x0A	; 10
      90:	fc 01       	movw	r30, r24
      92:	20 83       	st	Z, r18
  //Prescaler value = 1;
  TWSR = TWSR & 0b11111100;
      94:	81 e2       	ldi	r24, 0x21	; 33
      96:	90 e0       	ldi	r25, 0x00	; 0
      98:	21 e2       	ldi	r18, 0x21	; 33
      9a:	30 e0       	ldi	r19, 0x00	; 0
      9c:	f9 01       	movw	r30, r18
      9e:	20 81       	ld	r18, Z
      a0:	2c 7f       	andi	r18, 0xFC	; 252
      a2:	fc 01       	movw	r30, r24
      a4:	20 83       	st	Z, r18
  
}
      a6:	cf 91       	pop	r28
      a8:	df 91       	pop	r29
      aa:	08 95       	ret

000000ac <i2c_start>:

void i2c_start()
{
      ac:	df 93       	push	r29
      ae:	cf 93       	push	r28
      b0:	cd b7       	in	r28, 0x3d	; 61
      b2:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
      b4:	86 e5       	ldi	r24, 0x56	; 86
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	24 ea       	ldi	r18, 0xA4	; 164
      ba:	fc 01       	movw	r30, r24
      bc:	20 83       	st	Z, r18
  //When TWINT is 1, start condition sent
  while ((TWCR & (1<<TWINT)) == 0)
      be:	00 00       	nop
      c0:	86 e5       	ldi	r24, 0x56	; 86
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	fc 01       	movw	r30, r24
      c6:	80 81       	ld	r24, Z
      c8:	88 23       	and	r24, r24
      ca:	d4 f7       	brge	.-12     	; 0xc0 <i2c_start+0x14>
  {}  	
}
      cc:	cf 91       	pop	r28
      ce:	df 91       	pop	r29
      d0:	08 95       	ret

000000d2 <i2c_write>:

void i2c_write(unsigned char data)
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	0f 92       	push	r0
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	89 83       	std	Y+1, r24	; 0x01
  TWDR = data;
      de:	83 e2       	ldi	r24, 0x23	; 35
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	29 81       	ldd	r18, Y+1	; 0x01
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
  TWCR = (1<<TWINT) | (1<<TWEN);
      e8:	86 e5       	ldi	r24, 0x56	; 86
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	24 e8       	ldi	r18, 0x84	; 132
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
  while ((TWCR & (1<<TWINT)) == 0)
      f2:	00 00       	nop
      f4:	86 e5       	ldi	r24, 0x56	; 86
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	fc 01       	movw	r30, r24
      fa:	80 81       	ld	r24, Z
      fc:	88 23       	and	r24, r24
      fe:	d4 f7       	brge	.-12     	; 0xf4 <i2c_write+0x22>
  {}	
}
     100:	0f 90       	pop	r0
     102:	cf 91       	pop	r28
     104:	df 91       	pop	r29
     106:	08 95       	ret

00000108 <i2c_read>:

unsigned char i2c_read (unsigned char isLast)
{
     108:	df 93       	push	r29
     10a:	cf 93       	push	r28
     10c:	0f 92       	push	r0
     10e:	cd b7       	in	r28, 0x3d	; 61
     110:	de b7       	in	r29, 0x3e	; 62
     112:	89 83       	std	Y+1, r24	; 0x01
  if (isLast == 0) //If we want to read more than 1 byte
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	88 23       	and	r24, r24
     118:	31 f4       	brne	.+12     	; 0x126 <i2c_read+0x1e>
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     11a:	86 e5       	ldi	r24, 0x56	; 86
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	24 ec       	ldi	r18, 0xC4	; 196
     120:	fc 01       	movw	r30, r24
     122:	20 83       	st	Z, r18
  else             //If we want to read only one byte
    TWCR = (1<<TWINT) | (1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0)
     124:	06 c0       	rjmp	.+12     	; 0x132 <i2c_read+0x2a>
unsigned char i2c_read (unsigned char isLast)
{
  if (isLast == 0) //If we want to read more than 1 byte
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
  else             //If we want to read only one byte
    TWCR = (1<<TWINT) | (1<<TWEN);
     126:	86 e5       	ldi	r24, 0x56	; 86
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	24 e8       	ldi	r18, 0x84	; 132
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18
  while ((TWCR & (1<<TWINT)) == 0)
     130:	00 00       	nop
     132:	86 e5       	ldi	r24, 0x56	; 86
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	80 81       	ld	r24, Z
     13a:	88 23       	and	r24, r24
     13c:	d4 f7       	brge	.-12     	; 0x132 <i2c_read+0x2a>
  {}
  return TWDR;
     13e:	83 e2       	ldi	r24, 0x23	; 35
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	fc 01       	movw	r30, r24
     144:	80 81       	ld	r24, Z
}
     146:	0f 90       	pop	r0
     148:	cf 91       	pop	r28
     14a:	df 91       	pop	r29
     14c:	08 95       	ret

0000014e <i2c_stop>:

void i2c_stop()
{
     14e:	df 93       	push	r29
     150:	cf 93       	push	r28
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     156:	86 e5       	ldi	r24, 0x56	; 86
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	24 e9       	ldi	r18, 0x94	; 148
     15c:	fc 01       	movw	r30, r24
     15e:	20 83       	st	Z, r18
}
     160:	cf 91       	pop	r28
     162:	df 91       	pop	r29
     164:	08 95       	ret

00000166 <E_High>:
#define NUMBER_OF_CHARS 16
#define LINE2_START_ADR 0x40

//*********************** PRIVATE (static) operations *********************
static void E_High()
{
     166:	df 93       	push	r29
     168:	cf 93       	push	r28
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
  // Set the E pin high
  PORT_lcd |= 1<<E;
     16e:	85 e3       	ldi	r24, 0x35	; 53
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	25 e3       	ldi	r18, 0x35	; 53
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	f9 01       	movw	r30, r18
     178:	20 81       	ld	r18, Z
     17a:	24 60       	ori	r18, 0x04	; 4
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
  // Min 230 ns E-pulse-width : PWEH
  _NOP();
     180:	00 00       	nop
  _NOP();
     182:	00 00       	nop
  _NOP();
     184:	00 00       	nop
}
     186:	cf 91       	pop	r28
     188:	df 91       	pop	r29
     18a:	08 95       	ret

0000018c <E_Low>:

static void E_Low()
{
     18c:	df 93       	push	r29
     18e:	cf 93       	push	r28
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
  // Set the E pin low
  PORT_lcd &= ~(1<<E);
     194:	85 e3       	ldi	r24, 0x35	; 53
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	25 e3       	ldi	r18, 0x35	; 53
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	f9 01       	movw	r30, r18
     19e:	20 81       	ld	r18, Z
     1a0:	2b 7f       	andi	r18, 0xFB	; 251
     1a2:	fc 01       	movw	r30, r24
     1a4:	20 83       	st	Z, r18
  // Enable cycle time : Min 500 ns
  _NOP();
     1a6:	00 00       	nop
  _NOP();
     1a8:	00 00       	nop
}
     1aa:	cf 91       	pop	r28
     1ac:	df 91       	pop	r29
     1ae:	08 95       	ret

000001b0 <waitBusy>:

static void waitBusy()
{
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <waitBusy+0x6>
     1b6:	0f 92       	push	r0
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
unsigned int counter = 0;
     1bc:	1a 82       	std	Y+2, r1	; 0x02
     1be:	19 82       	std	Y+1, r1	; 0x01
unsigned char BusyStatus;
                                                            
  // DB7-DB4 = input
  DDR_lcd &= 0b00001111;
     1c0:	84 e3       	ldi	r24, 0x34	; 52
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	24 e3       	ldi	r18, 0x34	; 52
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	f9 01       	movw	r30, r18
     1ca:	20 81       	ld	r18, Z
     1cc:	2f 70       	andi	r18, 0x0F	; 15
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
  // RW = 1, RS = 0
  PORT_lcd |= 1<<RW;
     1d2:	85 e3       	ldi	r24, 0x35	; 53
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	25 e3       	ldi	r18, 0x35	; 53
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	f9 01       	movw	r30, r18
     1dc:	20 81       	ld	r18, Z
     1de:	22 60       	ori	r18, 0x02	; 2
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
  PORT_lcd &= ~(1<<RS);
     1e4:	85 e3       	ldi	r24, 0x35	; 53
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	25 e3       	ldi	r18, 0x35	; 53
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	f9 01       	movw	r30, r18
     1ee:	20 81       	ld	r18, Z
     1f0:	2e 7f       	andi	r18, 0xFE	; 254
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
  do
  { 
    // Set pin E high (tAS > 40 ns gained via the call of E_High() )
    // - and wait tDDR (min. 160 ns)
    E_High();
     1f6:	0e 94 b3 00 	call	0x166	; 0x166 <E_High>
    // Read BUSY flag (DB7)  
    BusyStatus = PIN_lcd & 1<<BUSY;
     1fa:	83 e3       	ldi	r24, 0x33	; 51
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	80 78       	andi	r24, 0x80	; 128
     204:	8b 83       	std	Y+3, r24	; 0x03
    // Min 230 ns E-pulse-width : (PWEH > 230 ns is gained)
    E_Low();
     206:	0e 94 c6 00 	call	0x18c	; 0x18c <E_Low>
    // Dummy "reading" AC3-AC0		              
    E_High();
     20a:	0e 94 b3 00 	call	0x166	; 0x166 <E_High>
    E_Low();
     20e:	0e 94 c6 00 	call	0x18c	; 0x18c <E_Low>
    // "Counter" used for implementing timeout:
    // If the Busy flag is not reset within (appr.) 100 ms, the loop is broken
    counter++;
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	9a 83       	std	Y+2, r25	; 0x02
     21a:	89 83       	std	Y+1, r24	; 0x01
  } while( BusyStatus && counter );  
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	88 23       	and	r24, r24
     220:	21 f0       	breq	.+8      	; 0x22a <waitBusy+0x7a>
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	9a 81       	ldd	r25, Y+2	; 0x02
     226:	00 97       	sbiw	r24, 0x00	; 0
     228:	31 f7       	brne	.-52     	; 0x1f6 <waitBusy+0x46>
  // DB7-DB4 = output
  DDR_lcd |= 0b11110000;
     22a:	84 e3       	ldi	r24, 0x34	; 52
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	24 e3       	ldi	r18, 0x34	; 52
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	f9 01       	movw	r30, r18
     234:	20 81       	ld	r18, Z
     236:	20 6f       	ori	r18, 0xF0	; 240
     238:	fc 01       	movw	r30, r24
     23a:	20 83       	st	Z, r18
}  
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	cf 91       	pop	r28
     244:	df 91       	pop	r29
     246:	08 95       	ret

00000248 <sendInstruction>:

static void sendInstruction( unsigned char data )
{      
     248:	df 93       	push	r29
     24a:	cf 93       	push	r28
     24c:	0f 92       	push	r0
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	89 83       	std	Y+1, r24	; 0x01
  // Wait for display controller ready
  waitBusy();
     254:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <waitBusy>
  // Write high nibble ::
  // RW = 0, RS = 0, E = 0, DB7-DB4 = Data high nibble
  PORT_lcd = (data & 0b11110000);
     258:	85 e3       	ldi	r24, 0x35	; 53
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	29 81       	ldd	r18, Y+1	; 0x01
     25e:	20 7f       	andi	r18, 0xF0	; 240
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18
  // Set pin E high (tAS > 40 ns gained via calling E_High() )
  E_High();
     264:	0e 94 b3 00 	call	0x166	; 0x166 <E_High>
  // Set pin E low (PWEH > 230 ns is gained)
  E_Low();
     268:	0e 94 c6 00 	call	0x18c	; 0x18c <E_Low>

  // Write low nibble ::
  // RS = 0, RW = 0, E = 0, DB7-DB4 = Data low nibble
  PORT_lcd = (data & 0x0F)<<4;
     26c:	85 e3       	ldi	r24, 0x35	; 53
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	29 81       	ldd	r18, Y+1	; 0x01
     272:	22 2f       	mov	r18, r18
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	22 95       	swap	r18
     278:	32 95       	swap	r19
     27a:	30 7f       	andi	r19, 0xF0	; 240
     27c:	32 27       	eor	r19, r18
     27e:	20 7f       	andi	r18, 0xF0	; 240
     280:	32 27       	eor	r19, r18
     282:	fc 01       	movw	r30, r24
     284:	20 83       	st	Z, r18
  // Set pin E high (tAS > 40 ns is gained via calling E_High() )
  E_High();
     286:	0e 94 b3 00 	call	0x166	; 0x166 <E_High>
  // Set pin E low (PWEH > 230 ns is gained)
  E_Low();
     28a:	0e 94 c6 00 	call	0x18c	; 0x18c <E_Low>
}
     28e:	0f 90       	pop	r0
     290:	cf 91       	pop	r28
     292:	df 91       	pop	r29
     294:	08 95       	ret

00000296 <sendData>:

static void sendData( unsigned char data )
{      
     296:	df 93       	push	r29
     298:	cf 93       	push	r28
     29a:	0f 92       	push	r0
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	89 83       	std	Y+1, r24	; 0x01
	// Wait for display controller ready
	waitBusy();
     2a2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <waitBusy>
	
	// Write high nibble ::
	// RW = 1, RS = 0, E = 0, DB7-DB4 = Data high nibble
	PORT_lcd = (data & 0b11110000) | 0b00000001;
     2a6:	85 e3       	ldi	r24, 0x35	; 53
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	29 81       	ldd	r18, Y+1	; 0x01
     2ac:	20 7f       	andi	r18, 0xF0	; 240
     2ae:	21 60       	ori	r18, 0x01	; 1
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
	// Set pin E high (tAS > 40 ns gained via calling E_High() )
	E_High();
     2b4:	0e 94 b3 00 	call	0x166	; 0x166 <E_High>
	// Set pin E low (PWEH > 230 ns is gained)
	E_Low();
     2b8:	0e 94 c6 00 	call	0x18c	; 0x18c <E_Low>
	
	// Write low nibble ::
	// RS = 0, RW = 0, E = 0, DB7-DB4 = Data low nibble
	PORT_lcd = (data & 0x0F)<<4 | 0b00000001;
     2bc:	85 e3       	ldi	r24, 0x35	; 53
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	29 81       	ldd	r18, Y+1	; 0x01
     2c2:	22 2f       	mov	r18, r18
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	22 95       	swap	r18
     2c8:	32 95       	swap	r19
     2ca:	30 7f       	andi	r19, 0xF0	; 240
     2cc:	32 27       	eor	r19, r18
     2ce:	20 7f       	andi	r18, 0xF0	; 240
     2d0:	32 27       	eor	r19, r18
     2d2:	21 60       	ori	r18, 0x01	; 1
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 83       	st	Z, r18
	// Set pin E high (tAS > 40 ns is gained via calling E_High() )
	E_High();
     2d8:	0e 94 b3 00 	call	0x166	; 0x166 <E_High>
	// Set pin E low (PWEH > 230 ns is gained)
	E_Low();	
     2dc:	0e 94 c6 00 	call	0x18c	; 0x18c <E_Low>
}
     2e0:	0f 90       	pop	r0
     2e2:	cf 91       	pop	r28
     2e4:	df 91       	pop	r29
     2e6:	08 95       	ret

000002e8 <LCDInit>:
//*********************** PUBLIC operations *****************************

// Initializes the display, blanks it and sets "current display position"
// at the upper line, leftmost character (cursor invisible)
void LCDInit()
{
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	e8 97       	sbiw	r28, 0x38	; 56
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
  // Initializing the used port
  DDR_lcd = 0xFF;  // bits 0-7 output
     300:	84 e3       	ldi	r24, 0x34	; 52
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2f ef       	ldi	r18, 0xFF	; 255
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
  PORT_lcd = 0x00; // bits 0-7 low 
     30a:	85 e3       	ldi	r24, 0x35	; 53
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	fc 01       	movw	r30, r24
     310:	10 82       	st	Z, r1
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	a8 e4       	ldi	r26, 0x48	; 72
     318:	b2 e4       	ldi	r27, 0x42	; 66
     31a:	89 83       	std	Y+1, r24	; 0x01
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	ab 83       	std	Y+3, r26	; 0x03
     320:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     322:	69 81       	ldd	r22, Y+1	; 0x01
     324:	7a 81       	ldd	r23, Y+2	; 0x02
     326:	8b 81       	ldd	r24, Y+3	; 0x03
     328:	9c 81       	ldd	r25, Y+4	; 0x04
     32a:	26 e6       	ldi	r18, 0x66	; 102
     32c:	36 e6       	ldi	r19, 0x66	; 102
     32e:	46 e6       	ldi	r20, 0x66	; 102
     330:	54 e4       	ldi	r21, 0x44	; 68
     332:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__mulsf3>
     336:	dc 01       	movw	r26, r24
     338:	cb 01       	movw	r24, r22
     33a:	8d 83       	std	Y+5, r24	; 0x05
     33c:	9e 83       	std	Y+6, r25	; 0x06
     33e:	af 83       	std	Y+7, r26	; 0x07
     340:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     342:	11 e0       	ldi	r17, 0x01	; 1
     344:	6d 81       	ldd	r22, Y+5	; 0x05
     346:	7e 81       	ldd	r23, Y+6	; 0x06
     348:	8f 81       	ldd	r24, Y+7	; 0x07
     34a:	98 85       	ldd	r25, Y+8	; 0x08
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	40 e8       	ldi	r20, 0x80	; 128
     352:	5f e3       	ldi	r21, 0x3F	; 63
     354:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__ltsf2>
     358:	88 23       	and	r24, r24
     35a:	0c f0       	brlt	.+2      	; 0x35e <LCDInit+0x76>
     35c:	10 e0       	ldi	r17, 0x00	; 0
     35e:	11 23       	and	r17, r17
     360:	29 f0       	breq	.+10     	; 0x36c <LCDInit+0x84>
		__ticks = 1;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	9a 87       	std	Y+10, r25	; 0x0a
     368:	89 87       	std	Y+9, r24	; 0x09
     36a:	46 c0       	rjmp	.+140    	; 0x3f8 <LCDInit+0x110>
	else if (__tmp > 65535)
     36c:	11 e0       	ldi	r17, 0x01	; 1
     36e:	6d 81       	ldd	r22, Y+5	; 0x05
     370:	7e 81       	ldd	r23, Y+6	; 0x06
     372:	8f 81       	ldd	r24, Y+7	; 0x07
     374:	98 85       	ldd	r25, Y+8	; 0x08
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	3f ef       	ldi	r19, 0xFF	; 255
     37a:	4f e7       	ldi	r20, 0x7F	; 127
     37c:	57 e4       	ldi	r21, 0x47	; 71
     37e:	0e 94 87 08 	call	0x110e	; 0x110e <__gtsf2>
     382:	18 16       	cp	r1, r24
     384:	0c f0       	brlt	.+2      	; 0x388 <LCDInit+0xa0>
     386:	10 e0       	ldi	r17, 0x00	; 0
     388:	11 23       	and	r17, r17
     38a:	61 f1       	breq	.+88     	; 0x3e4 <LCDInit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     38c:	69 81       	ldd	r22, Y+1	; 0x01
     38e:	7a 81       	ldd	r23, Y+2	; 0x02
     390:	8b 81       	ldd	r24, Y+3	; 0x03
     392:	9c 81       	ldd	r25, Y+4	; 0x04
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	40 e2       	ldi	r20, 0x20	; 32
     39a:	51 e4       	ldi	r21, 0x41	; 65
     39c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__mulsf3>
     3a0:	dc 01       	movw	r26, r24
     3a2:	cb 01       	movw	r24, r22
     3a4:	bc 01       	movw	r22, r24
     3a6:	cd 01       	movw	r24, r26
     3a8:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fixunssfsi>
     3ac:	dc 01       	movw	r26, r24
     3ae:	cb 01       	movw	r24, r22
     3b0:	9a 87       	std	Y+10, r25	; 0x0a
     3b2:	89 87       	std	Y+9, r24	; 0x09
     3b4:	12 c0       	rjmp	.+36     	; 0x3da <LCDInit+0xf2>
     3b6:	8c e5       	ldi	r24, 0x5C	; 92
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	9c 87       	std	Y+12, r25	; 0x0c
     3bc:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3be:	8b 85       	ldd	r24, Y+11	; 0x0b
     3c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     3c2:	8c 01       	movw	r16, r24
     3c4:	c8 01       	movw	r24, r16
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCDInit+0xde>
     3ca:	8c 01       	movw	r16, r24
     3cc:	1c 87       	std	Y+12, r17	; 0x0c
     3ce:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d0:	89 85       	ldd	r24, Y+9	; 0x09
     3d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	9a 87       	std	Y+10, r25	; 0x0a
     3d8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3da:	89 85       	ldd	r24, Y+9	; 0x09
     3dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     3de:	00 97       	sbiw	r24, 0x00	; 0
     3e0:	51 f7       	brne	.-44     	; 0x3b6 <LCDInit+0xce>
     3e2:	17 c0       	rjmp	.+46     	; 0x412 <LCDInit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3e4:	6d 81       	ldd	r22, Y+5	; 0x05
     3e6:	7e 81       	ldd	r23, Y+6	; 0x06
     3e8:	8f 81       	ldd	r24, Y+7	; 0x07
     3ea:	98 85       	ldd	r25, Y+8	; 0x08
     3ec:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fixunssfsi>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	9a 87       	std	Y+10, r25	; 0x0a
     3f6:	89 87       	std	Y+9, r24	; 0x09
     3f8:	89 85       	ldd	r24, Y+9	; 0x09
     3fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     3fc:	9e 87       	std	Y+14, r25	; 0x0e
     3fe:	8d 87       	std	Y+13, r24	; 0x0d
     400:	8d 85       	ldd	r24, Y+13	; 0x0d
     402:	9e 85       	ldd	r25, Y+14	; 0x0e
     404:	8c 01       	movw	r16, r24
     406:	f8 01       	movw	r30, r16
     408:	31 97       	sbiw	r30, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <LCDInit+0x120>
     40c:	8f 01       	movw	r16, r30
     40e:	1e 87       	std	Y+14, r17	; 0x0e
     410:	0d 87       	std	Y+13, r16	; 0x0d
	 
  // Wait 50 ms (min.15 ms demanded according to the data sheet)
  _delay_ms(50);
  // Function set (still 8 bit interface)
  PORT_lcd = 0b00110000;
     412:	85 e3       	ldi	r24, 0x35	; 53
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	20 e3       	ldi	r18, 0x30	; 48
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
  E_High();
     41c:	0e 94 b3 00 	call	0x166	; 0x166 <E_High>
  E_Low();
     420:	0e 94 c6 00 	call	0x18c	; 0x18c <E_Low>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	a0 e2       	ldi	r26, 0x20	; 32
     42a:	b1 e4       	ldi	r27, 0x41	; 65
     42c:	8f 87       	std	Y+15, r24	; 0x0f
     42e:	98 8b       	std	Y+16, r25	; 0x10
     430:	a9 8b       	std	Y+17, r26	; 0x11
     432:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     434:	6f 85       	ldd	r22, Y+15	; 0x0f
     436:	78 89       	ldd	r23, Y+16	; 0x10
     438:	89 89       	ldd	r24, Y+17	; 0x11
     43a:	9a 89       	ldd	r25, Y+18	; 0x12
     43c:	26 e6       	ldi	r18, 0x66	; 102
     43e:	36 e6       	ldi	r19, 0x66	; 102
     440:	46 e6       	ldi	r20, 0x66	; 102
     442:	54 e4       	ldi	r21, 0x44	; 68
     444:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__mulsf3>
     448:	dc 01       	movw	r26, r24
     44a:	cb 01       	movw	r24, r22
     44c:	8b 8b       	std	Y+19, r24	; 0x13
     44e:	9c 8b       	std	Y+20, r25	; 0x14
     450:	ad 8b       	std	Y+21, r26	; 0x15
     452:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     454:	11 e0       	ldi	r17, 0x01	; 1
     456:	6b 89       	ldd	r22, Y+19	; 0x13
     458:	7c 89       	ldd	r23, Y+20	; 0x14
     45a:	8d 89       	ldd	r24, Y+21	; 0x15
     45c:	9e 89       	ldd	r25, Y+22	; 0x16
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	40 e8       	ldi	r20, 0x80	; 128
     464:	5f e3       	ldi	r21, 0x3F	; 63
     466:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__ltsf2>
     46a:	88 23       	and	r24, r24
     46c:	0c f0       	brlt	.+2      	; 0x470 <LCDInit+0x188>
     46e:	10 e0       	ldi	r17, 0x00	; 0
     470:	11 23       	and	r17, r17
     472:	29 f0       	breq	.+10     	; 0x47e <LCDInit+0x196>
		__ticks = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	98 8f       	std	Y+24, r25	; 0x18
     47a:	8f 8b       	std	Y+23, r24	; 0x17
     47c:	46 c0       	rjmp	.+140    	; 0x50a <LCDInit+0x222>
	else if (__tmp > 65535)
     47e:	11 e0       	ldi	r17, 0x01	; 1
     480:	6b 89       	ldd	r22, Y+19	; 0x13
     482:	7c 89       	ldd	r23, Y+20	; 0x14
     484:	8d 89       	ldd	r24, Y+21	; 0x15
     486:	9e 89       	ldd	r25, Y+22	; 0x16
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	3f ef       	ldi	r19, 0xFF	; 255
     48c:	4f e7       	ldi	r20, 0x7F	; 127
     48e:	57 e4       	ldi	r21, 0x47	; 71
     490:	0e 94 87 08 	call	0x110e	; 0x110e <__gtsf2>
     494:	18 16       	cp	r1, r24
     496:	0c f0       	brlt	.+2      	; 0x49a <LCDInit+0x1b2>
     498:	10 e0       	ldi	r17, 0x00	; 0
     49a:	11 23       	and	r17, r17
     49c:	61 f1       	breq	.+88     	; 0x4f6 <LCDInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     49e:	6f 85       	ldd	r22, Y+15	; 0x0f
     4a0:	78 89       	ldd	r23, Y+16	; 0x10
     4a2:	89 89       	ldd	r24, Y+17	; 0x11
     4a4:	9a 89       	ldd	r25, Y+18	; 0x12
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e2       	ldi	r20, 0x20	; 32
     4ac:	51 e4       	ldi	r21, 0x41	; 65
     4ae:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__mulsf3>
     4b2:	dc 01       	movw	r26, r24
     4b4:	cb 01       	movw	r24, r22
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fixunssfsi>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	98 8f       	std	Y+24, r25	; 0x18
     4c4:	8f 8b       	std	Y+23, r24	; 0x17
     4c6:	12 c0       	rjmp	.+36     	; 0x4ec <LCDInit+0x204>
     4c8:	8c e5       	ldi	r24, 0x5C	; 92
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	9a 8f       	std	Y+26, r25	; 0x1a
     4ce:	89 8f       	std	Y+25, r24	; 0x19
     4d0:	89 8d       	ldd	r24, Y+25	; 0x19
     4d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     4d4:	8c 01       	movw	r16, r24
     4d6:	c8 01       	movw	r24, r16
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCDInit+0x1f0>
     4dc:	8c 01       	movw	r16, r24
     4de:	1a 8f       	std	Y+26, r17	; 0x1a
     4e0:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e2:	8f 89       	ldd	r24, Y+23	; 0x17
     4e4:	98 8d       	ldd	r25, Y+24	; 0x18
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	98 8f       	std	Y+24, r25	; 0x18
     4ea:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ec:	8f 89       	ldd	r24, Y+23	; 0x17
     4ee:	98 8d       	ldd	r25, Y+24	; 0x18
     4f0:	00 97       	sbiw	r24, 0x00	; 0
     4f2:	51 f7       	brne	.-44     	; 0x4c8 <LCDInit+0x1e0>
     4f4:	17 c0       	rjmp	.+46     	; 0x524 <LCDInit+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4f6:	6b 89       	ldd	r22, Y+19	; 0x13
     4f8:	7c 89       	ldd	r23, Y+20	; 0x14
     4fa:	8d 89       	ldd	r24, Y+21	; 0x15
     4fc:	9e 89       	ldd	r25, Y+22	; 0x16
     4fe:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fixunssfsi>
     502:	dc 01       	movw	r26, r24
     504:	cb 01       	movw	r24, r22
     506:	98 8f       	std	Y+24, r25	; 0x18
     508:	8f 8b       	std	Y+23, r24	; 0x17
     50a:	8f 89       	ldd	r24, Y+23	; 0x17
     50c:	98 8d       	ldd	r25, Y+24	; 0x18
     50e:	9c 8f       	std	Y+28, r25	; 0x1c
     510:	8b 8f       	std	Y+27, r24	; 0x1b
     512:	8b 8d       	ldd	r24, Y+27	; 0x1b
     514:	9c 8d       	ldd	r25, Y+28	; 0x1c
     516:	8c 01       	movw	r16, r24
     518:	f8 01       	movw	r30, r16
     51a:	31 97       	sbiw	r30, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <LCDInit+0x232>
     51e:	8f 01       	movw	r16, r30
     520:	1c 8f       	std	Y+28, r17	; 0x1c
     522:	0b 8f       	std	Y+27, r16	; 0x1b

  // Wait 10 ms (min.4,1 ms demanded according to the data sheet)
  _delay_ms(10);
  // Function set (still 8 bit interface)
  PORT_lcd = 0b00110000;
     524:	85 e3       	ldi	r24, 0x35	; 53
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	20 e3       	ldi	r18, 0x30	; 48
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
  E_High();
     52e:	0e 94 b3 00 	call	0x166	; 0x166 <E_High>
  E_Low();
     532:	0e 94 c6 00 	call	0x18c	; 0x18c <E_Low>
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	a0 e2       	ldi	r26, 0x20	; 32
     53c:	b1 e4       	ldi	r27, 0x41	; 65
     53e:	8d 8f       	std	Y+29, r24	; 0x1d
     540:	9e 8f       	std	Y+30, r25	; 0x1e
     542:	af 8f       	std	Y+31, r26	; 0x1f
     544:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     546:	6d 8d       	ldd	r22, Y+29	; 0x1d
     548:	7e 8d       	ldd	r23, Y+30	; 0x1e
     54a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     54c:	98 a1       	ldd	r25, Y+32	; 0x20
     54e:	26 e6       	ldi	r18, 0x66	; 102
     550:	36 e6       	ldi	r19, 0x66	; 102
     552:	46 e6       	ldi	r20, 0x66	; 102
     554:	54 e4       	ldi	r21, 0x44	; 68
     556:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__mulsf3>
     55a:	dc 01       	movw	r26, r24
     55c:	cb 01       	movw	r24, r22
     55e:	89 a3       	std	Y+33, r24	; 0x21
     560:	9a a3       	std	Y+34, r25	; 0x22
     562:	ab a3       	std	Y+35, r26	; 0x23
     564:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     566:	11 e0       	ldi	r17, 0x01	; 1
     568:	69 a1       	ldd	r22, Y+33	; 0x21
     56a:	7a a1       	ldd	r23, Y+34	; 0x22
     56c:	8b a1       	ldd	r24, Y+35	; 0x23
     56e:	9c a1       	ldd	r25, Y+36	; 0x24
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e8       	ldi	r20, 0x80	; 128
     576:	5f e3       	ldi	r21, 0x3F	; 63
     578:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__ltsf2>
     57c:	88 23       	and	r24, r24
     57e:	0c f0       	brlt	.+2      	; 0x582 <LCDInit+0x29a>
     580:	10 e0       	ldi	r17, 0x00	; 0
     582:	11 23       	and	r17, r17
     584:	29 f0       	breq	.+10     	; 0x590 <LCDInit+0x2a8>
		__ticks = 1;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	9e a3       	std	Y+38, r25	; 0x26
     58c:	8d a3       	std	Y+37, r24	; 0x25
     58e:	46 c0       	rjmp	.+140    	; 0x61c <LCDInit+0x334>
	else if (__tmp > 65535)
     590:	11 e0       	ldi	r17, 0x01	; 1
     592:	69 a1       	ldd	r22, Y+33	; 0x21
     594:	7a a1       	ldd	r23, Y+34	; 0x22
     596:	8b a1       	ldd	r24, Y+35	; 0x23
     598:	9c a1       	ldd	r25, Y+36	; 0x24
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	3f ef       	ldi	r19, 0xFF	; 255
     59e:	4f e7       	ldi	r20, 0x7F	; 127
     5a0:	57 e4       	ldi	r21, 0x47	; 71
     5a2:	0e 94 87 08 	call	0x110e	; 0x110e <__gtsf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	0c f0       	brlt	.+2      	; 0x5ac <LCDInit+0x2c4>
     5aa:	10 e0       	ldi	r17, 0x00	; 0
     5ac:	11 23       	and	r17, r17
     5ae:	61 f1       	breq	.+88     	; 0x608 <LCDInit+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     5b2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     5b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     5b6:	98 a1       	ldd	r25, Y+32	; 0x20
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e2       	ldi	r20, 0x20	; 32
     5be:	51 e4       	ldi	r21, 0x41	; 65
     5c0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__mulsf3>
     5c4:	dc 01       	movw	r26, r24
     5c6:	cb 01       	movw	r24, r22
     5c8:	bc 01       	movw	r22, r24
     5ca:	cd 01       	movw	r24, r26
     5cc:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fixunssfsi>
     5d0:	dc 01       	movw	r26, r24
     5d2:	cb 01       	movw	r24, r22
     5d4:	9e a3       	std	Y+38, r25	; 0x26
     5d6:	8d a3       	std	Y+37, r24	; 0x25
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <LCDInit+0x316>
     5da:	8c e5       	ldi	r24, 0x5C	; 92
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	98 a7       	std	Y+40, r25	; 0x28
     5e0:	8f a3       	std	Y+39, r24	; 0x27
     5e2:	8f a1       	ldd	r24, Y+39	; 0x27
     5e4:	98 a5       	ldd	r25, Y+40	; 0x28
     5e6:	8c 01       	movw	r16, r24
     5e8:	c8 01       	movw	r24, r16
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <LCDInit+0x302>
     5ee:	8c 01       	movw	r16, r24
     5f0:	18 a7       	std	Y+40, r17	; 0x28
     5f2:	0f a3       	std	Y+39, r16	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5f4:	8d a1       	ldd	r24, Y+37	; 0x25
     5f6:	9e a1       	ldd	r25, Y+38	; 0x26
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	9e a3       	std	Y+38, r25	; 0x26
     5fc:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5fe:	8d a1       	ldd	r24, Y+37	; 0x25
     600:	9e a1       	ldd	r25, Y+38	; 0x26
     602:	00 97       	sbiw	r24, 0x00	; 0
     604:	51 f7       	brne	.-44     	; 0x5da <LCDInit+0x2f2>
     606:	17 c0       	rjmp	.+46     	; 0x636 <LCDInit+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     608:	69 a1       	ldd	r22, Y+33	; 0x21
     60a:	7a a1       	ldd	r23, Y+34	; 0x22
     60c:	8b a1       	ldd	r24, Y+35	; 0x23
     60e:	9c a1       	ldd	r25, Y+36	; 0x24
     610:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fixunssfsi>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	9e a3       	std	Y+38, r25	; 0x26
     61a:	8d a3       	std	Y+37, r24	; 0x25
     61c:	8d a1       	ldd	r24, Y+37	; 0x25
     61e:	9e a1       	ldd	r25, Y+38	; 0x26
     620:	9a a7       	std	Y+42, r25	; 0x2a
     622:	89 a7       	std	Y+41, r24	; 0x29
     624:	89 a5       	ldd	r24, Y+41	; 0x29
     626:	9a a5       	ldd	r25, Y+42	; 0x2a
     628:	8c 01       	movw	r16, r24
     62a:	f8 01       	movw	r30, r16
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <LCDInit+0x344>
     630:	8f 01       	movw	r16, r30
     632:	1a a7       	std	Y+42, r17	; 0x2a
     634:	09 a7       	std	Y+41, r16	; 0x29

  // Wait 10 ms (min.100 us demanded according to the data sheet)
  _delay_ms(10);
  // Function set (still 8 bit interface)
  PORT_lcd = 0b00110000;
     636:	85 e3       	ldi	r24, 0x35	; 53
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	20 e3       	ldi	r18, 0x30	; 48
     63c:	fc 01       	movw	r30, r24
     63e:	20 83       	st	Z, r18
  E_High();
     640:	0e 94 b3 00 	call	0x166	; 0x166 <E_High>
  E_Low();
     644:	0e 94 c6 00 	call	0x18c	; 0x18c <E_Low>
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	a0 e2       	ldi	r26, 0x20	; 32
     64e:	b1 e4       	ldi	r27, 0x41	; 65
     650:	8b a7       	std	Y+43, r24	; 0x2b
     652:	9c a7       	std	Y+44, r25	; 0x2c
     654:	ad a7       	std	Y+45, r26	; 0x2d
     656:	be a7       	std	Y+46, r27	; 0x2e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     658:	6b a5       	ldd	r22, Y+43	; 0x2b
     65a:	7c a5       	ldd	r23, Y+44	; 0x2c
     65c:	8d a5       	ldd	r24, Y+45	; 0x2d
     65e:	9e a5       	ldd	r25, Y+46	; 0x2e
     660:	26 e6       	ldi	r18, 0x66	; 102
     662:	36 e6       	ldi	r19, 0x66	; 102
     664:	46 e6       	ldi	r20, 0x66	; 102
     666:	54 e4       	ldi	r21, 0x44	; 68
     668:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__mulsf3>
     66c:	dc 01       	movw	r26, r24
     66e:	cb 01       	movw	r24, r22
     670:	8f a7       	std	Y+47, r24	; 0x2f
     672:	98 ab       	std	Y+48, r25	; 0x30
     674:	a9 ab       	std	Y+49, r26	; 0x31
     676:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     678:	11 e0       	ldi	r17, 0x01	; 1
     67a:	6f a5       	ldd	r22, Y+47	; 0x2f
     67c:	78 a9       	ldd	r23, Y+48	; 0x30
     67e:	89 a9       	ldd	r24, Y+49	; 0x31
     680:	9a a9       	ldd	r25, Y+50	; 0x32
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e8       	ldi	r20, 0x80	; 128
     688:	5f e3       	ldi	r21, 0x3F	; 63
     68a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__ltsf2>
     68e:	88 23       	and	r24, r24
     690:	0c f0       	brlt	.+2      	; 0x694 <LCDInit+0x3ac>
     692:	10 e0       	ldi	r17, 0x00	; 0
     694:	11 23       	and	r17, r17
     696:	29 f0       	breq	.+10     	; 0x6a2 <LCDInit+0x3ba>
		__ticks = 1;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	9c ab       	std	Y+52, r25	; 0x34
     69e:	8b ab       	std	Y+51, r24	; 0x33
     6a0:	46 c0       	rjmp	.+140    	; 0x72e <LCDInit+0x446>
	else if (__tmp > 65535)
     6a2:	11 e0       	ldi	r17, 0x01	; 1
     6a4:	6f a5       	ldd	r22, Y+47	; 0x2f
     6a6:	78 a9       	ldd	r23, Y+48	; 0x30
     6a8:	89 a9       	ldd	r24, Y+49	; 0x31
     6aa:	9a a9       	ldd	r25, Y+50	; 0x32
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	3f ef       	ldi	r19, 0xFF	; 255
     6b0:	4f e7       	ldi	r20, 0x7F	; 127
     6b2:	57 e4       	ldi	r21, 0x47	; 71
     6b4:	0e 94 87 08 	call	0x110e	; 0x110e <__gtsf2>
     6b8:	18 16       	cp	r1, r24
     6ba:	0c f0       	brlt	.+2      	; 0x6be <LCDInit+0x3d6>
     6bc:	10 e0       	ldi	r17, 0x00	; 0
     6be:	11 23       	and	r17, r17
     6c0:	61 f1       	breq	.+88     	; 0x71a <LCDInit+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6c2:	6b a5       	ldd	r22, Y+43	; 0x2b
     6c4:	7c a5       	ldd	r23, Y+44	; 0x2c
     6c6:	8d a5       	ldd	r24, Y+45	; 0x2d
     6c8:	9e a5       	ldd	r25, Y+46	; 0x2e
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e2       	ldi	r20, 0x20	; 32
     6d0:	51 e4       	ldi	r21, 0x41	; 65
     6d2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__mulsf3>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	bc 01       	movw	r22, r24
     6dc:	cd 01       	movw	r24, r26
     6de:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fixunssfsi>
     6e2:	dc 01       	movw	r26, r24
     6e4:	cb 01       	movw	r24, r22
     6e6:	9c ab       	std	Y+52, r25	; 0x34
     6e8:	8b ab       	std	Y+51, r24	; 0x33
     6ea:	12 c0       	rjmp	.+36     	; 0x710 <LCDInit+0x428>
     6ec:	8c e5       	ldi	r24, 0x5C	; 92
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	9e ab       	std	Y+54, r25	; 0x36
     6f2:	8d ab       	std	Y+53, r24	; 0x35
     6f4:	8d a9       	ldd	r24, Y+53	; 0x35
     6f6:	9e a9       	ldd	r25, Y+54	; 0x36
     6f8:	8c 01       	movw	r16, r24
     6fa:	c8 01       	movw	r24, r16
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCDInit+0x414>
     700:	8c 01       	movw	r16, r24
     702:	1e ab       	std	Y+54, r17	; 0x36
     704:	0d ab       	std	Y+53, r16	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     706:	8b a9       	ldd	r24, Y+51	; 0x33
     708:	9c a9       	ldd	r25, Y+52	; 0x34
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	9c ab       	std	Y+52, r25	; 0x34
     70e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     710:	8b a9       	ldd	r24, Y+51	; 0x33
     712:	9c a9       	ldd	r25, Y+52	; 0x34
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	51 f7       	brne	.-44     	; 0x6ec <LCDInit+0x404>
     718:	17 c0       	rjmp	.+46     	; 0x748 <LCDInit+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     71a:	6f a5       	ldd	r22, Y+47	; 0x2f
     71c:	78 a9       	ldd	r23, Y+48	; 0x30
     71e:	89 a9       	ldd	r24, Y+49	; 0x31
     720:	9a a9       	ldd	r25, Y+50	; 0x32
     722:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fixunssfsi>
     726:	dc 01       	movw	r26, r24
     728:	cb 01       	movw	r24, r22
     72a:	9c ab       	std	Y+52, r25	; 0x34
     72c:	8b ab       	std	Y+51, r24	; 0x33
     72e:	8b a9       	ldd	r24, Y+51	; 0x33
     730:	9c a9       	ldd	r25, Y+52	; 0x34
     732:	98 af       	std	Y+56, r25	; 0x38
     734:	8f ab       	std	Y+55, r24	; 0x37
     736:	8f a9       	ldd	r24, Y+55	; 0x37
     738:	98 ad       	ldd	r25, Y+56	; 0x38
     73a:	8c 01       	movw	r16, r24
     73c:	f8 01       	movw	r30, r16
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <LCDInit+0x456>
     742:	8f 01       	movw	r16, r30
     744:	18 af       	std	Y+56, r17	; 0x38
     746:	0f ab       	std	Y+55, r16	; 0x37

  // Wait 10 ms (min.100 us demanded according to the data sheet)
  _delay_ms(10);
  // Function set (now selecting 4 bit interface !)
  // - and polling the busy flag will now be possible
  PORT_lcd = 0b00100000;
     748:	85 e3       	ldi	r24, 0x35	; 53
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	20 e2       	ldi	r18, 0x20	; 32
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18
  E_High();
     752:	0e 94 b3 00 	call	0x166	; 0x166 <E_High>
  E_Low();
     756:	0e 94 c6 00 	call	0x18c	; 0x18c <E_Low>

  // Function Set : 4 bit interface, 2 line display, 5x8 dots
  sendInstruction( 0b00101000 );
     75a:	88 e2       	ldi	r24, 0x28	; 40
     75c:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
  // Display, cursor and blinking OFF
  sendInstruction( 0b00001000 );
     760:	88 e0       	ldi	r24, 0x08	; 8
     762:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
  // Clear display and set DDRAM adr = 0	
  sendInstruction( 0b00000001 );
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
  // By display writes : Increment cursor / no shift
  sendInstruction( 0b00000110 );
     76c:	86 e0       	ldi	r24, 0x06	; 6
     76e:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
  // Display ON, cursor and blinking OFF
  sendInstruction( 0b00001100 );
     772:	8c e0       	ldi	r24, 0x0C	; 12
     774:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
}
     778:	e8 96       	adiw	r28, 0x38	; 56
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	cf 91       	pop	r28
     786:	df 91       	pop	r29
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	08 95       	ret

0000078e <LCDClear>:

// Blanks the display and sets "current display position" to
// the upper line, leftmost character
void LCDClear()
{
     78e:	df 93       	push	r29
     790:	cf 93       	push	r28
     792:	0f 92       	push	r0
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	const unsigned char clearAndReturn = 0b000000001;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	89 83       	std	Y+1, r24	; 0x01
	sendInstruction(clearAndReturn);
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
		
}
     7a2:	0f 90       	pop	r0
     7a4:	cf 91       	pop	r28
     7a6:	df 91       	pop	r29
     7a8:	08 95       	ret

000007aa <LCDGotoXY>:

// Sets DDRAM address to character position x and line number y
void LCDGotoXY( unsigned char x, unsigned char y )
{
     7aa:	df 93       	push	r29
     7ac:	cf 93       	push	r28
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <LCDGotoXY+0x6>
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	6a 83       	std	Y+2, r22	; 0x02
	if ( (x < NUMBER_OF_CHARS) && (y < NUMBER_OF_LINES) ){
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	80 31       	cpi	r24, 0x10	; 16
     7bc:	70 f4       	brcc	.+28     	; 0x7da <LCDGotoXY+0x30>
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	58 f4       	brcc	.+22     	; 0x7da <LCDGotoXY+0x30>
		sendInstruction( 0b10000000 | ((y*LINE2_START_ADR)+x) );
     7c4:	8a 81       	ldd	r24, Y+2	; 0x02
     7c6:	98 2f       	mov	r25, r24
     7c8:	92 95       	swap	r25
     7ca:	99 0f       	add	r25, r25
     7cc:	99 0f       	add	r25, r25
     7ce:	90 7c       	andi	r25, 0xC0	; 192
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	89 0f       	add	r24, r25
     7d4:	80 68       	ori	r24, 0x80	; 128
     7d6:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
	}	
}
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <LCDDispChar>:

// Display "ch" at "current display position"
void LCDDispChar( char ch )
{
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	0f 92       	push	r0
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	89 83       	std	Y+1, r24	; 0x01
	sendData(ch);
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	0e 94 4b 01 	call	0x296	; 0x296 <sendData>
}
     7f6:	0f 90       	pop	r0
     7f8:	cf 91       	pop	r28
     7fa:	df 91       	pop	r29
     7fc:	08 95       	ret

000007fe <LCDDispString>:

// Displays the string "str" starting at "current display position"
void LCDDispString( char *str )
{
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	00 d0       	rcall	.+0      	; 0x804 <LCDDispString+0x6>
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	9a 83       	std	Y+2, r25	; 0x02
     80a:	89 83       	std	Y+1, r24	; 0x01
	while(*str){
     80c:	0c c0       	rjmp	.+24     	; 0x826 <LCDDispString+0x28>
		sendData(*str++);
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	fc 01       	movw	r30, r24
     814:	20 81       	ld	r18, Z
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	82 2f       	mov	r24, r18
     822:	0e 94 4b 01 	call	0x296	; 0x296 <sendData>
}

// Displays the string "str" starting at "current display position"
void LCDDispString( char *str )
{
	while(*str){
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	9a 81       	ldd	r25, Y+2	; 0x02
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	88 23       	and	r24, r24
     830:	71 f7       	brne	.-36     	; 0x80e <LCDDispString+0x10>
		sendData(*str++);
	}			
}
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	cf 91       	pop	r28
     838:	df 91       	pop	r29
     83a:	08 95       	ret

0000083c <LCDDispInteger>:

// Displays the value of integer "i" at "current display position"
void LCDDispInteger( int i )
{
     83c:	df 93       	push	r29
     83e:	cf 93       	push	r28
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	29 97       	sbiw	r28, 0x09	; 9
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	99 87       	std	Y+9, r25	; 0x09
     852:	88 87       	std	Y+8, r24	; 0x08
	char number[7];
	itoa(i, number, 10);
     854:	88 85       	ldd	r24, Y+8	; 0x08
     856:	99 85       	ldd	r25, Y+9	; 0x09
     858:	9e 01       	movw	r18, r28
     85a:	2f 5f       	subi	r18, 0xFF	; 255
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
     85e:	b9 01       	movw	r22, r18
     860:	4a e0       	ldi	r20, 0x0A	; 10
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <itoa>
	
	LCDDispString(number);
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCDDispString>
	
}
     870:	29 96       	adiw	r28, 0x09	; 9
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	cf 91       	pop	r28
     87e:	df 91       	pop	r29
     880:	08 95       	ret

00000882 <LCDLoadUDC>:

// Loads one of the 8 user definable characters (UDC) with a dot-pattern,
// pre-defined in an 8 byte const array
void LCDLoadUDC( unsigned char UDCNo, const unsigned char *UDCTab )
{
     882:	df 93       	push	r29
     884:	cf 93       	push	r28
     886:	00 d0       	rcall	.+0      	; 0x888 <LCDLoadUDC+0x6>
     888:	00 d0       	rcall	.+0      	; 0x88a <LCDLoadUDC+0x8>
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	8a 83       	std	Y+2, r24	; 0x02
     890:	7c 83       	std	Y+4, r23	; 0x04
     892:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	
	// Set CGRAM adresse (for the characters first bit row)
	sendInstruction( 0b01000000 | (UDCNo<<3) );
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	80 64       	ori	r24, 0x40	; 64
     8a8:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
	// Send the 8 bit rows (auto-incrementing the CGRAM address)
	for ( i=0; i<8; i++ )
     8ac:	19 82       	std	Y+1, r1	; 0x01
     8ae:	0f c0       	rjmp	.+30     	; 0x8ce <LCDLoadUDC+0x4c>
		sendData( *UDCTab++ );
     8b0:	8b 81       	ldd	r24, Y+3	; 0x03
     8b2:	9c 81       	ldd	r25, Y+4	; 0x04
     8b4:	fc 01       	movw	r30, r24
     8b6:	20 81       	ld	r18, Z
     8b8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ba:	9c 81       	ldd	r25, Y+4	; 0x04
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	9c 83       	std	Y+4, r25	; 0x04
     8c0:	8b 83       	std	Y+3, r24	; 0x03
     8c2:	82 2f       	mov	r24, r18
     8c4:	0e 94 4b 01 	call	0x296	; 0x296 <sendData>
	unsigned char i;
	
	// Set CGRAM adresse (for the characters first bit row)
	sendInstruction( 0b01000000 | (UDCNo<<3) );
	// Send the 8 bit rows (auto-incrementing the CGRAM address)
	for ( i=0; i<8; i++ )
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	8f 5f       	subi	r24, 0xFF	; 255
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	88 30       	cpi	r24, 0x08	; 8
     8d2:	70 f3       	brcs	.-36     	; 0x8b0 <LCDLoadUDC+0x2e>
		sendData( *UDCTab++ );
	
	//Dummy instruction
	LCDClear();		
     8d4:	0e 94 c7 03 	call	0x78e	; 0x78e <LCDClear>
}
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	cf 91       	pop	r28
     8e2:	df 91       	pop	r29
     8e4:	08 95       	ret

000008e6 <LCDOnOffControl>:
// Selects, if the cursor has to be visible, and if the character at
// the cursor position has to blink.
// "cursor" not 0 => visible cursor.
// "blink" not 0 => the character at the cursor position blinks.
void LCDOnOffControl( unsigned char cursor, unsigned char blink )
{
     8e6:	df 93       	push	r29
     8e8:	cf 93       	push	r28
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <LCDOnOffControl+0x6>
     8ec:	0f 92       	push	r0
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	8a 83       	std	Y+2, r24	; 0x02
     8f4:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char control = 0b00001100;
     8f6:	8c e0       	ldi	r24, 0x0C	; 12
     8f8:	89 83       	std	Y+1, r24	; 0x01
	
	if(blink == 1){
		control | 0b00000001;
	}
	
	sendInstruction(control);
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
}
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	cf 91       	pop	r28
     908:	df 91       	pop	r29
     90a:	08 95       	ret

0000090c <LCDCursorLeft>:

// Moves the cursor to the left
void LCDCursorLeft()
{
     90c:	df 93       	push	r29
     90e:	cf 93       	push	r28
     910:	0f 92       	push	r0
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
	const unsigned char move = 0b00010000;
     916:	80 e1       	ldi	r24, 0x10	; 16
     918:	89 83       	std	Y+1, r24	; 0x01
	sendInstruction(move);	
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
}
     920:	0f 90       	pop	r0
     922:	cf 91       	pop	r28
     924:	df 91       	pop	r29
     926:	08 95       	ret

00000928 <LCDCursorRight>:

// Moves the cursor to the right
void LCDCursorRight()
{
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	0f 92       	push	r0
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
	const unsigned char move = 0b00010100;
     932:	84 e1       	ldi	r24, 0x14	; 20
     934:	89 83       	std	Y+1, r24	; 0x01
	sendInstruction(move);
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
}
     93c:	0f 90       	pop	r0
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	08 95       	ret

00000944 <LCDShiftLeft>:

// Moves the display text one position to the left
void LCDShiftLeft()
{
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	0f 92       	push	r0
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
	const unsigned char move = 0b00011000;
     94e:	88 e1       	ldi	r24, 0x18	; 24
     950:	89 83       	std	Y+1, r24	; 0x01
	sendInstruction(move);
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
}
     958:	0f 90       	pop	r0
     95a:	cf 91       	pop	r28
     95c:	df 91       	pop	r29
     95e:	08 95       	ret

00000960 <LCDShiftRight>:

// Moves the display text one position to the right
void LCDShiftRight()
{
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	0f 92       	push	r0
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
	const unsigned char move = 0b00011100;
     96a:	8c e1       	ldi	r24, 0x1C	; 28
     96c:	89 83       	std	Y+1, r24	; 0x01
	sendInstruction(move);
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	0e 94 24 01 	call	0x248	; 0x248 <sendInstruction>
}
     974:	0f 90       	pop	r0
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	08 95       	ret

0000097c <InitUART>:
Parameters:
	BaudRate: Wanted Baud Rate.
	Databits: Wanted number of Data Bits.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit)
{
     97c:	df 93       	push	r29
     97e:	cf 93       	push	r28
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	27 97       	sbiw	r28, 0x07	; 7
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	6b 83       	std	Y+3, r22	; 0x03
     992:	7c 83       	std	Y+4, r23	; 0x04
     994:	8d 83       	std	Y+5, r24	; 0x05
     996:	9e 83       	std	Y+6, r25	; 0x06
     998:	4f 83       	std	Y+7, r20	; 0x07
unsigned int TempUBRR;

  if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	9c 81       	ldd	r25, Y+4	; 0x04
     99e:	ad 81       	ldd	r26, Y+5	; 0x05
     9a0:	be 81       	ldd	r27, Y+6	; 0x06
     9a2:	8e 36       	cpi	r24, 0x6E	; 110
     9a4:	91 05       	cpc	r25, r1
     9a6:	a1 05       	cpc	r26, r1
     9a8:	b1 05       	cpc	r27, r1
     9aa:	08 f4       	brcc	.+2      	; 0x9ae <InitUART+0x32>
     9ac:	5b c0       	rjmp	.+182    	; 0xa64 <InitUART+0xe8>
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	9c 81       	ldd	r25, Y+4	; 0x04
     9b2:	ad 81       	ldd	r26, Y+5	; 0x05
     9b4:	be 81       	ldd	r27, Y+6	; 0x06
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	22 ec       	ldi	r18, 0xC2	; 194
     9ba:	92 07       	cpc	r25, r18
     9bc:	21 e0       	ldi	r18, 0x01	; 1
     9be:	a2 07       	cpc	r26, r18
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	b2 07       	cpc	r27, r18
     9c4:	08 f0       	brcs	.+2      	; 0x9c8 <InitUART+0x4c>
     9c6:	4e c0       	rjmp	.+156    	; 0xa64 <InitUART+0xe8>
     9c8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ca:	85 30       	cpi	r24, 0x05	; 5
     9cc:	08 f4       	brcc	.+2      	; 0x9d0 <InitUART+0x54>
     9ce:	4a c0       	rjmp	.+148    	; 0xa64 <InitUART+0xe8>
     9d0:	8f 81       	ldd	r24, Y+7	; 0x07
     9d2:	89 30       	cpi	r24, 0x09	; 9
     9d4:	08 f0       	brcs	.+2      	; 0x9d8 <InitUART+0x5c>
     9d6:	46 c0       	rjmp	.+140    	; 0xa64 <InitUART+0xe8>
  { 
    // "Normal" clock, no multiprocessor mode (= default)
    UCSRA = 0b00100000;
     9d8:	8b e2       	ldi	r24, 0x2B	; 43
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	20 e2       	ldi	r18, 0x20	; 32
     9de:	fc 01       	movw	r30, r24
     9e0:	20 83       	st	Z, r18
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSRB = 0b00011000;	
     9e2:	8a e2       	ldi	r24, 0x2A	; 42
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	28 e1       	ldi	r18, 0x18	; 24
     9e8:	fc 01       	movw	r30, r24
     9ea:	20 83       	st	Z, r18
    // Asynchronous operation, 1 stop bit, no parity
    // Bit7 always has to be 1
    // Bit 2 and bit 1 controls the number of databits
    UCSRC = 0b10000000 | (DataBit-5)<<1;
     9ec:	80 e4       	ldi	r24, 0x40	; 64
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	2f 81       	ldd	r18, Y+7	; 0x07
     9f2:	22 2f       	mov	r18, r18
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	25 50       	subi	r18, 0x05	; 5
     9f8:	30 40       	sbci	r19, 0x00	; 0
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	20 68       	ori	r18, 0x80	; 128
     a00:	fc 01       	movw	r30, r24
     a02:	20 83       	st	Z, r18
    // Set Baud Rate according to the parameter BaudRate:
    // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
    //                   then write the two 8-bit registers separately):
    TempUBRR = XTAL/(16*BaudRate) - 1;
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	ad 81       	ldd	r26, Y+5	; 0x05
     a0a:	be 81       	ldd	r27, Y+6	; 0x06
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	aa 1f       	adc	r26, r26
     a12:	bb 1f       	adc	r27, r27
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	aa 1f       	adc	r26, r26
     a1a:	bb 1f       	adc	r27, r27
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	aa 1f       	adc	r26, r26
     a22:	bb 1f       	adc	r27, r27
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	aa 1f       	adc	r26, r26
     a2a:	bb 1f       	adc	r27, r27
     a2c:	9c 01       	movw	r18, r24
     a2e:	ad 01       	movw	r20, r26
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e4       	ldi	r25, 0x40	; 64
     a34:	a8 e3       	ldi	r26, 0x38	; 56
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodsi4>
     a40:	da 01       	movw	r26, r20
     a42:	c9 01       	movw	r24, r18
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	9a 83       	std	Y+2, r25	; 0x02
     a48:	89 83       	std	Y+1, r24	; 0x01
    // Write upper part of UBRR
    UBRRH = TempUBRR >> 8;
     a4a:	80 e4       	ldi	r24, 0x40	; 64
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	29 81       	ldd	r18, Y+1	; 0x01
     a50:	3a 81       	ldd	r19, Y+2	; 0x02
     a52:	23 2f       	mov	r18, r19
     a54:	33 27       	eor	r19, r19
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
    // Write lower part of UBRR
    UBRRL = TempUBRR;
     a5a:	89 e2       	ldi	r24, 0x29	; 41
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	29 81       	ldd	r18, Y+1	; 0x01
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
  }  
}
     a64:	27 96       	adiw	r28, 0x07	; 7
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	cf 91       	pop	r28
     a72:	df 91       	pop	r29
     a74:	08 95       	ret

00000a76 <CharReady>:
/*************************************************************************
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
     a76:	df 93       	push	r29
     a78:	cf 93       	push	r28
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
   return UCSRA & (1<<7);
     a7e:	8b e2       	ldi	r24, 0x2B	; 43
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	fc 01       	movw	r30, r24
     a84:	80 81       	ld	r24, Z
     a86:	80 78       	andi	r24, 0x80	; 128
}
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	08 95       	ret

00000a8e <ReadChar>:
/*************************************************************************
Awaits new character received.
Then this character is returned.
*************************************************************************/
char ReadChar()
{
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
  // Wait for new character received
  while ( (UCSRA & (1<<7)) == 0 )
     a96:	00 00       	nop
     a98:	8b e2       	ldi	r24, 0x2B	; 43
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 81       	ld	r24, Z
     aa0:	88 23       	and	r24, r24
     aa2:	d4 f7       	brge	.-12     	; 0xa98 <ReadChar+0xa>
  {}                        
  // Then return it
  return UDR;
     aa4:	8c e2       	ldi	r24, 0x2C	; 44
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	fc 01       	movw	r30, r24
     aaa:	80 81       	ld	r24, Z
}
     aac:	cf 91       	pop	r28
     aae:	df 91       	pop	r29
     ab0:	08 95       	ret

00000ab2 <SendChar>:
Then it send the character.
Parameter :
	Ch : Character for sending. 
*************************************************************************/
void SendChar(char Ch)
{
     ab2:	df 93       	push	r29
     ab4:	cf 93       	push	r28
     ab6:	0f 92       	push	r0
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	89 83       	std	Y+1, r24	; 0x01
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRA & (1<<5)) == 0 )
     abe:	00 00       	nop
     ac0:	8b e2       	ldi	r24, 0x2B	; 43
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	fc 01       	movw	r30, r24
     ac6:	80 81       	ld	r24, Z
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	80 72       	andi	r24, 0x20	; 32
     ace:	90 70       	andi	r25, 0x00	; 0
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	b1 f3       	breq	.-20     	; 0xac0 <SendChar+0xe>
  {}
  // Then send the character
  UDR = Ch;
     ad4:	8c e2       	ldi	r24, 0x2C	; 44
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	29 81       	ldd	r18, Y+1	; 0x01
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18
}
     ade:	0f 90       	pop	r0
     ae0:	cf 91       	pop	r28
     ae2:	df 91       	pop	r29
     ae4:	08 95       	ret

00000ae6 <SendString>:
Sends 0-terminated string.
Parameter:
   String: Pointer to the string. 
*************************************************************************/
void SendString(char* String)
{
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	00 d0       	rcall	.+0      	; 0xaec <SendString+0x6>
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	89 83       	std	Y+1, r24	; 0x01
  // Repeat untill zero-termination
  while (*String != 0)
     af4:	0b c0       	rjmp	.+22     	; 0xb0c <SendString+0x26>
  {
    // Send the character pointed to by "String"
    SendChar(*String);
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	fc 01       	movw	r30, r24
     afc:	80 81       	ld	r24, Z
     afe:	0e 94 59 05 	call	0xab2	; 0xab2 <SendChar>
    // Advance the pointer one step
    String++;
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	9a 83       	std	Y+2, r25	; 0x02
     b0a:	89 83       	std	Y+1, r24	; 0x01
   String: Pointer to the string. 
*************************************************************************/
void SendString(char* String)
{
  // Repeat untill zero-termination
  while (*String != 0)
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	88 23       	and	r24, r24
     b16:	79 f7       	brne	.-34     	; 0xaf6 <SendString+0x10>
    // Send the character pointed to by "String"
    SendChar(*String);
    // Advance the pointer one step
    String++;
  }
}
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	cf 91       	pop	r28
     b1e:	df 91       	pop	r29
     b20:	08 95       	ret

00000b22 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
      Number: The integer to be converted and send. 
*************************************************************************/
void SendInteger(int Number)
{
     b22:	df 93       	push	r29
     b24:	cf 93       	push	r28
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	29 97       	sbiw	r28, 0x09	; 9
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	99 87       	std	Y+9, r25	; 0x09
     b38:	88 87       	std	Y+8, r24	; 0x08
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Number, array, 10);
     b3a:	88 85       	ldd	r24, Y+8	; 0x08
     b3c:	99 85       	ldd	r25, Y+9	; 0x09
     b3e:	9e 01       	movw	r18, r28
     b40:	2f 5f       	subi	r18, 0xFF	; 255
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	b9 01       	movw	r22, r18
     b46:	4a e0       	ldi	r20, 0x0A	; 10
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <itoa>
  // - then send the string
  SendString(array);
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	0e 94 73 05 	call	0xae6	; 0xae6 <SendString>
}
     b56:	29 96       	adiw	r28, 0x09	; 9
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <main>:
 */ 

#include <avr/io.h>

int main(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        //TODO:: Please write your application code 
    }
     b70:	ff cf       	rjmp	.-2      	; 0xb70 <main+0x8>

00000b72 <__fixunssfsi>:
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	7b 01       	movw	r14, r22
     b7c:	8c 01       	movw	r16, r24
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	5f e4       	ldi	r21, 0x4F	; 79
     b86:	0e 94 b7 08 	call	0x116e	; 0x116e <__gesf2>
     b8a:	87 fd       	sbrc	r24, 7
     b8c:	11 c0       	rjmp	.+34     	; 0xbb0 <__fixunssfsi+0x3e>
     b8e:	c8 01       	movw	r24, r16
     b90:	b7 01       	movw	r22, r14
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	5f e4       	ldi	r21, 0x4F	; 79
     b9a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__subsf3>
     b9e:	0e 94 17 09 	call	0x122e	; 0x122e <__fixsfsi>
     ba2:	9b 01       	movw	r18, r22
     ba4:	ac 01       	movw	r20, r24
     ba6:	20 50       	subi	r18, 0x00	; 0
     ba8:	30 40       	sbci	r19, 0x00	; 0
     baa:	40 40       	sbci	r20, 0x00	; 0
     bac:	50 48       	sbci	r21, 0x80	; 128
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <__fixunssfsi+0x4a>
     bb0:	c8 01       	movw	r24, r16
     bb2:	b7 01       	movw	r22, r14
     bb4:	0e 94 17 09 	call	0x122e	; 0x122e <__fixsfsi>
     bb8:	9b 01       	movw	r18, r22
     bba:	ac 01       	movw	r20, r24
     bbc:	b9 01       	movw	r22, r18
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	08 95       	ret

00000bca <_fpadd_parts>:
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	eb ee       	ldi	r30, 0xEB	; 235
     bd0:	f5 e0       	ldi	r31, 0x05	; 5
     bd2:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__prologue_saves__+0x8>
     bd6:	fc 01       	movw	r30, r24
     bd8:	ea 01       	movw	r28, r20
     bda:	80 81       	ld	r24, Z
     bdc:	82 30       	cpi	r24, 0x02	; 2
     bde:	08 f4       	brcc	.+2      	; 0xbe2 <_fpadd_parts+0x18>
     be0:	38 c1       	rjmp	.+624    	; 0xe52 <_fpadd_parts+0x288>
     be2:	db 01       	movw	r26, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <_fpadd_parts+0x22>
     bea:	30 c1       	rjmp	.+608    	; 0xe4c <_fpadd_parts+0x282>
     bec:	84 30       	cpi	r24, 0x04	; 4
     bee:	59 f4       	brne	.+22     	; 0xc06 <_fpadd_parts+0x3c>
     bf0:	94 30       	cpi	r25, 0x04	; 4
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <_fpadd_parts+0x2c>
     bf4:	2e c1       	rjmp	.+604    	; 0xe52 <_fpadd_parts+0x288>
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	8c 91       	ld	r24, X
     bfc:	11 97       	sbiw	r26, 0x01	; 1
     bfe:	98 17       	cp	r25, r24
     c00:	09 f0       	breq	.+2      	; 0xc04 <_fpadd_parts+0x3a>
     c02:	21 c1       	rjmp	.+578    	; 0xe46 <_fpadd_parts+0x27c>
     c04:	26 c1       	rjmp	.+588    	; 0xe52 <_fpadd_parts+0x288>
     c06:	94 30       	cpi	r25, 0x04	; 4
     c08:	09 f4       	brne	.+2      	; 0xc0c <_fpadd_parts+0x42>
     c0a:	20 c1       	rjmp	.+576    	; 0xe4c <_fpadd_parts+0x282>
     c0c:	92 30       	cpi	r25, 0x02	; 2
     c0e:	b1 f4       	brne	.+44     	; 0xc3c <_fpadd_parts+0x72>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	09 f0       	breq	.+2      	; 0xc16 <_fpadd_parts+0x4c>
     c14:	1e c1       	rjmp	.+572    	; 0xe52 <_fpadd_parts+0x288>
     c16:	ca 01       	movw	r24, r20
     c18:	af 01       	movw	r20, r30
     c1a:	28 e0       	ldi	r18, 0x08	; 8
     c1c:	da 01       	movw	r26, r20
     c1e:	0d 90       	ld	r0, X+
     c20:	ad 01       	movw	r20, r26
     c22:	dc 01       	movw	r26, r24
     c24:	0d 92       	st	X+, r0
     c26:	cd 01       	movw	r24, r26
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	c1 f7       	brne	.-16     	; 0xc1c <_fpadd_parts+0x52>
     c2c:	db 01       	movw	r26, r22
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	8c 91       	ld	r24, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	89 23       	and	r24, r25
     c38:	89 83       	std	Y+1, r24	; 0x01
     c3a:	0a c1       	rjmp	.+532    	; 0xe50 <_fpadd_parts+0x286>
     c3c:	82 30       	cpi	r24, 0x02	; 2
     c3e:	09 f4       	brne	.+2      	; 0xc42 <_fpadd_parts+0x78>
     c40:	05 c1       	rjmp	.+522    	; 0xe4c <_fpadd_parts+0x282>
     c42:	c2 80       	ldd	r12, Z+2	; 0x02
     c44:	d3 80       	ldd	r13, Z+3	; 0x03
     c46:	db 01       	movw	r26, r22
     c48:	12 96       	adiw	r26, 0x02	; 2
     c4a:	6d 90       	ld	r6, X+
     c4c:	7c 90       	ld	r7, X
     c4e:	13 97       	sbiw	r26, 0x03	; 3
     c50:	24 81       	ldd	r18, Z+4	; 0x04
     c52:	35 81       	ldd	r19, Z+5	; 0x05
     c54:	46 81       	ldd	r20, Z+6	; 0x06
     c56:	57 81       	ldd	r21, Z+7	; 0x07
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	ed 90       	ld	r14, X+
     c5c:	fd 90       	ld	r15, X+
     c5e:	0d 91       	ld	r16, X+
     c60:	1c 91       	ld	r17, X
     c62:	17 97       	sbiw	r26, 0x07	; 7
     c64:	c6 01       	movw	r24, r12
     c66:	86 19       	sub	r24, r6
     c68:	97 09       	sbc	r25, r7
     c6a:	5c 01       	movw	r10, r24
     c6c:	97 ff       	sbrs	r25, 7
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <_fpadd_parts+0xae>
     c70:	aa 24       	eor	r10, r10
     c72:	bb 24       	eor	r11, r11
     c74:	a8 1a       	sub	r10, r24
     c76:	b9 0a       	sbc	r11, r25
     c78:	b0 e2       	ldi	r27, 0x20	; 32
     c7a:	ab 16       	cp	r10, r27
     c7c:	b1 04       	cpc	r11, r1
     c7e:	0c f0       	brlt	.+2      	; 0xc82 <_fpadd_parts+0xb8>
     c80:	61 c0       	rjmp	.+194    	; 0xd44 <_fpadd_parts+0x17a>
     c82:	18 16       	cp	r1, r24
     c84:	19 06       	cpc	r1, r25
     c86:	6c f5       	brge	.+90     	; 0xce2 <_fpadd_parts+0x118>
     c88:	37 01       	movw	r6, r14
     c8a:	48 01       	movw	r8, r16
     c8c:	0a 2c       	mov	r0, r10
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <_fpadd_parts+0xce>
     c90:	96 94       	lsr	r9
     c92:	87 94       	ror	r8
     c94:	77 94       	ror	r7
     c96:	67 94       	ror	r6
     c98:	0a 94       	dec	r0
     c9a:	d2 f7       	brpl	.-12     	; 0xc90 <_fpadd_parts+0xc6>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	a0 e0       	ldi	r26, 0x00	; 0
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	0a 2c       	mov	r0, r10
     ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <_fpadd_parts+0xe6>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	aa 1f       	adc	r26, r26
     cae:	bb 1f       	adc	r27, r27
     cb0:	0a 94       	dec	r0
     cb2:	d2 f7       	brpl	.-12     	; 0xca8 <_fpadd_parts+0xde>
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	a1 09       	sbc	r26, r1
     cb8:	b1 09       	sbc	r27, r1
     cba:	8e 21       	and	r24, r14
     cbc:	9f 21       	and	r25, r15
     cbe:	a0 23       	and	r26, r16
     cc0:	b1 23       	and	r27, r17
     cc2:	ee 24       	eor	r14, r14
     cc4:	ff 24       	eor	r15, r15
     cc6:	87 01       	movw	r16, r14
     cc8:	e3 94       	inc	r14
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	a1 05       	cpc	r26, r1
     cce:	b1 05       	cpc	r27, r1
     cd0:	19 f4       	brne	.+6      	; 0xcd8 <_fpadd_parts+0x10e>
     cd2:	ee 24       	eor	r14, r14
     cd4:	ff 24       	eor	r15, r15
     cd6:	87 01       	movw	r16, r14
     cd8:	e6 28       	or	r14, r6
     cda:	f7 28       	or	r15, r7
     cdc:	08 29       	or	r16, r8
     cde:	19 29       	or	r17, r9
     ce0:	3c c0       	rjmp	.+120    	; 0xd5a <_fpadd_parts+0x190>
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	d1 f1       	breq	.+116    	; 0xd5a <_fpadd_parts+0x190>
     ce6:	ca 0c       	add	r12, r10
     ce8:	db 1c       	adc	r13, r11
     cea:	39 01       	movw	r6, r18
     cec:	4a 01       	movw	r8, r20
     cee:	0a 2c       	mov	r0, r10
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <_fpadd_parts+0x130>
     cf2:	96 94       	lsr	r9
     cf4:	87 94       	ror	r8
     cf6:	77 94       	ror	r7
     cf8:	67 94       	ror	r6
     cfa:	0a 94       	dec	r0
     cfc:	d2 f7       	brpl	.-12     	; 0xcf2 <_fpadd_parts+0x128>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	0a 2c       	mov	r0, r10
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <_fpadd_parts+0x148>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	aa 1f       	adc	r26, r26
     d10:	bb 1f       	adc	r27, r27
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <_fpadd_parts+0x140>
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	a1 09       	sbc	r26, r1
     d1a:	b1 09       	sbc	r27, r1
     d1c:	82 23       	and	r24, r18
     d1e:	93 23       	and	r25, r19
     d20:	a4 23       	and	r26, r20
     d22:	b5 23       	and	r27, r21
     d24:	21 e0       	ldi	r18, 0x01	; 1
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	19 f4       	brne	.+6      	; 0xd3a <_fpadd_parts+0x170>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	a9 01       	movw	r20, r18
     d3a:	26 29       	or	r18, r6
     d3c:	37 29       	or	r19, r7
     d3e:	48 29       	or	r20, r8
     d40:	59 29       	or	r21, r9
     d42:	0b c0       	rjmp	.+22     	; 0xd5a <_fpadd_parts+0x190>
     d44:	6c 14       	cp	r6, r12
     d46:	7d 04       	cpc	r7, r13
     d48:	24 f4       	brge	.+8      	; 0xd52 <_fpadd_parts+0x188>
     d4a:	ee 24       	eor	r14, r14
     d4c:	ff 24       	eor	r15, r15
     d4e:	87 01       	movw	r16, r14
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <_fpadd_parts+0x190>
     d52:	63 01       	movw	r12, r6
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	a9 01       	movw	r20, r18
     d5a:	81 81       	ldd	r24, Z+1	; 0x01
     d5c:	fb 01       	movw	r30, r22
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	89 17       	cp	r24, r25
     d62:	09 f4       	brne	.+2      	; 0xd66 <_fpadd_parts+0x19c>
     d64:	45 c0       	rjmp	.+138    	; 0xdf0 <_fpadd_parts+0x226>
     d66:	88 23       	and	r24, r24
     d68:	49 f0       	breq	.+18     	; 0xd7c <_fpadd_parts+0x1b2>
     d6a:	d8 01       	movw	r26, r16
     d6c:	c7 01       	movw	r24, r14
     d6e:	82 1b       	sub	r24, r18
     d70:	93 0b       	sbc	r25, r19
     d72:	a4 0b       	sbc	r26, r20
     d74:	b5 0b       	sbc	r27, r21
     d76:	9c 01       	movw	r18, r24
     d78:	ad 01       	movw	r20, r26
     d7a:	04 c0       	rjmp	.+8      	; 0xd84 <_fpadd_parts+0x1ba>
     d7c:	2e 19       	sub	r18, r14
     d7e:	3f 09       	sbc	r19, r15
     d80:	40 0b       	sbc	r20, r16
     d82:	51 0b       	sbc	r21, r17
     d84:	57 fd       	sbrc	r21, 7
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <_fpadd_parts+0x1c6>
     d88:	19 82       	std	Y+1, r1	; 0x01
     d8a:	db 82       	std	Y+3, r13	; 0x03
     d8c:	ca 82       	std	Y+2, r12	; 0x02
     d8e:	0b c0       	rjmp	.+22     	; 0xda6 <_fpadd_parts+0x1dc>
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	db 82       	std	Y+3, r13	; 0x03
     d96:	ca 82       	std	Y+2, r12	; 0x02
     d98:	50 95       	com	r21
     d9a:	40 95       	com	r20
     d9c:	30 95       	com	r19
     d9e:	21 95       	neg	r18
     da0:	3f 4f       	sbci	r19, 0xFF	; 255
     da2:	4f 4f       	sbci	r20, 0xFF	; 255
     da4:	5f 4f       	sbci	r21, 0xFF	; 255
     da6:	2c 83       	std	Y+4, r18	; 0x04
     da8:	3d 83       	std	Y+5, r19	; 0x05
     daa:	4e 83       	std	Y+6, r20	; 0x06
     dac:	5f 83       	std	Y+7, r21	; 0x07
     dae:	0d c0       	rjmp	.+26     	; 0xdca <_fpadd_parts+0x200>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	aa 1f       	adc	r26, r26
     db6:	bb 1f       	adc	r27, r27
     db8:	8c 83       	std	Y+4, r24	; 0x04
     dba:	9d 83       	std	Y+5, r25	; 0x05
     dbc:	ae 83       	std	Y+6, r26	; 0x06
     dbe:	bf 83       	std	Y+7, r27	; 0x07
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	9b 83       	std	Y+3, r25	; 0x03
     dc8:	8a 83       	std	Y+2, r24	; 0x02
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	ae 81       	ldd	r26, Y+6	; 0x06
     dd0:	bf 81       	ldd	r27, Y+7	; 0x07
     dd2:	9c 01       	movw	r18, r24
     dd4:	ad 01       	movw	r20, r26
     dd6:	21 50       	subi	r18, 0x01	; 1
     dd8:	30 40       	sbci	r19, 0x00	; 0
     dda:	40 40       	sbci	r20, 0x00	; 0
     ddc:	50 40       	sbci	r21, 0x00	; 0
     dde:	2f 3f       	cpi	r18, 0xFF	; 255
     de0:	ef ef       	ldi	r30, 0xFF	; 255
     de2:	3e 07       	cpc	r19, r30
     de4:	ef ef       	ldi	r30, 0xFF	; 255
     de6:	4e 07       	cpc	r20, r30
     de8:	ef e3       	ldi	r30, 0x3F	; 63
     dea:	5e 07       	cpc	r21, r30
     dec:	08 f3       	brcs	.-62     	; 0xdb0 <_fpadd_parts+0x1e6>
     dee:	0b c0       	rjmp	.+22     	; 0xe06 <_fpadd_parts+0x23c>
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	db 82       	std	Y+3, r13	; 0x03
     df4:	ca 82       	std	Y+2, r12	; 0x02
     df6:	2e 0d       	add	r18, r14
     df8:	3f 1d       	adc	r19, r15
     dfa:	40 1f       	adc	r20, r16
     dfc:	51 1f       	adc	r21, r17
     dfe:	2c 83       	std	Y+4, r18	; 0x04
     e00:	3d 83       	std	Y+5, r19	; 0x05
     e02:	4e 83       	std	Y+6, r20	; 0x06
     e04:	5f 83       	std	Y+7, r21	; 0x07
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	88 83       	st	Y, r24
     e0a:	2c 81       	ldd	r18, Y+4	; 0x04
     e0c:	3d 81       	ldd	r19, Y+5	; 0x05
     e0e:	4e 81       	ldd	r20, Y+6	; 0x06
     e10:	5f 81       	ldd	r21, Y+7	; 0x07
     e12:	57 ff       	sbrs	r21, 7
     e14:	1d c0       	rjmp	.+58     	; 0xe50 <_fpadd_parts+0x286>
     e16:	da 01       	movw	r26, r20
     e18:	c9 01       	movw	r24, r18
     e1a:	81 70       	andi	r24, 0x01	; 1
     e1c:	90 70       	andi	r25, 0x00	; 0
     e1e:	a0 70       	andi	r26, 0x00	; 0
     e20:	b0 70       	andi	r27, 0x00	; 0
     e22:	56 95       	lsr	r21
     e24:	47 95       	ror	r20
     e26:	37 95       	ror	r19
     e28:	27 95       	ror	r18
     e2a:	82 2b       	or	r24, r18
     e2c:	93 2b       	or	r25, r19
     e2e:	a4 2b       	or	r26, r20
     e30:	b5 2b       	or	r27, r21
     e32:	8c 83       	std	Y+4, r24	; 0x04
     e34:	9d 83       	std	Y+5, r25	; 0x05
     e36:	ae 83       	std	Y+6, r26	; 0x06
     e38:	bf 83       	std	Y+7, r27	; 0x07
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	9b 81       	ldd	r25, Y+3	; 0x03
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	9b 83       	std	Y+3, r25	; 0x03
     e42:	8a 83       	std	Y+2, r24	; 0x02
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <_fpadd_parts+0x286>
     e46:	e0 e6       	ldi	r30, 0x60	; 96
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	03 c0       	rjmp	.+6      	; 0xe52 <_fpadd_parts+0x288>
     e4c:	fb 01       	movw	r30, r22
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <_fpadd_parts+0x288>
     e50:	fe 01       	movw	r30, r28
     e52:	cf 01       	movw	r24, r30
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	ee e0       	ldi	r30, 0x0E	; 14
     e5a:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__epilogue_restores__+0x8>

00000e5e <__addsf3>:
     e5e:	a0 e2       	ldi	r26, 0x20	; 32
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e5 e3       	ldi	r30, 0x35	; 53
     e64:	f7 e0       	ldi	r31, 0x07	; 7
     e66:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__prologue_saves__+0x18>
     e6a:	69 83       	std	Y+1, r22	; 0x01
     e6c:	7a 83       	std	Y+2, r23	; 0x02
     e6e:	8b 83       	std	Y+3, r24	; 0x03
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	2d 83       	std	Y+5, r18	; 0x05
     e74:	3e 83       	std	Y+6, r19	; 0x06
     e76:	4f 83       	std	Y+7, r20	; 0x07
     e78:	58 87       	std	Y+8, r21	; 0x08
     e7a:	89 e0       	ldi	r24, 0x09	; 9
     e7c:	e8 2e       	mov	r14, r24
     e7e:	f1 2c       	mov	r15, r1
     e80:	ec 0e       	add	r14, r28
     e82:	fd 1e       	adc	r15, r29
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	b7 01       	movw	r22, r14
     e8a:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
     e8e:	8e 01       	movw	r16, r28
     e90:	0f 5e       	subi	r16, 0xEF	; 239
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	ce 01       	movw	r24, r28
     e96:	05 96       	adiw	r24, 0x05	; 5
     e98:	b8 01       	movw	r22, r16
     e9a:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
     e9e:	c7 01       	movw	r24, r14
     ea0:	b8 01       	movw	r22, r16
     ea2:	ae 01       	movw	r20, r28
     ea4:	47 5e       	subi	r20, 0xE7	; 231
     ea6:	5f 4f       	sbci	r21, 0xFF	; 255
     ea8:	0e 94 e5 05 	call	0xbca	; 0xbca <_fpadd_parts>
     eac:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__pack_f>
     eb0:	a0 96       	adiw	r28, 0x20	; 32
     eb2:	e6 e0       	ldi	r30, 0x06	; 6
     eb4:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__epilogue_restores__+0x18>

00000eb8 <__subsf3>:
     eb8:	a0 e2       	ldi	r26, 0x20	; 32
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e6       	ldi	r30, 0x62	; 98
     ebe:	f7 e0       	ldi	r31, 0x07	; 7
     ec0:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__prologue_saves__+0x18>
     ec4:	69 83       	std	Y+1, r22	; 0x01
     ec6:	7a 83       	std	Y+2, r23	; 0x02
     ec8:	8b 83       	std	Y+3, r24	; 0x03
     eca:	9c 83       	std	Y+4, r25	; 0x04
     ecc:	2d 83       	std	Y+5, r18	; 0x05
     ece:	3e 83       	std	Y+6, r19	; 0x06
     ed0:	4f 83       	std	Y+7, r20	; 0x07
     ed2:	58 87       	std	Y+8, r21	; 0x08
     ed4:	8e 01       	movw	r16, r28
     ed6:	07 5f       	subi	r16, 0xF7	; 247
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	b8 01       	movw	r22, r16
     ee0:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
     ee4:	91 e1       	ldi	r25, 0x11	; 17
     ee6:	e9 2e       	mov	r14, r25
     ee8:	f1 2c       	mov	r15, r1
     eea:	ec 0e       	add	r14, r28
     eec:	fd 1e       	adc	r15, r29
     eee:	ce 01       	movw	r24, r28
     ef0:	05 96       	adiw	r24, 0x05	; 5
     ef2:	b7 01       	movw	r22, r14
     ef4:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
     ef8:	8a 89       	ldd	r24, Y+18	; 0x12
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	89 27       	eor	r24, r25
     efe:	8a 8b       	std	Y+18, r24	; 0x12
     f00:	c8 01       	movw	r24, r16
     f02:	b7 01       	movw	r22, r14
     f04:	ae 01       	movw	r20, r28
     f06:	47 5e       	subi	r20, 0xE7	; 231
     f08:	5f 4f       	sbci	r21, 0xFF	; 255
     f0a:	0e 94 e5 05 	call	0xbca	; 0xbca <_fpadd_parts>
     f0e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__pack_f>
     f12:	a0 96       	adiw	r28, 0x20	; 32
     f14:	e6 e0       	ldi	r30, 0x06	; 6
     f16:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__epilogue_restores__+0x18>

00000f1a <__mulsf3>:
     f1a:	a0 e2       	ldi	r26, 0x20	; 32
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e3 e9       	ldi	r30, 0x93	; 147
     f20:	f7 e0       	ldi	r31, 0x07	; 7
     f22:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__prologue_saves__>
     f26:	69 83       	std	Y+1, r22	; 0x01
     f28:	7a 83       	std	Y+2, r23	; 0x02
     f2a:	8b 83       	std	Y+3, r24	; 0x03
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	2d 83       	std	Y+5, r18	; 0x05
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	4f 83       	std	Y+7, r20	; 0x07
     f34:	58 87       	std	Y+8, r21	; 0x08
     f36:	ce 01       	movw	r24, r28
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	be 01       	movw	r22, r28
     f3c:	67 5f       	subi	r22, 0xF7	; 247
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
     f44:	ce 01       	movw	r24, r28
     f46:	05 96       	adiw	r24, 0x05	; 5
     f48:	be 01       	movw	r22, r28
     f4a:	6f 5e       	subi	r22, 0xEF	; 239
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
     f52:	99 85       	ldd	r25, Y+9	; 0x09
     f54:	92 30       	cpi	r25, 0x02	; 2
     f56:	78 f0       	brcs	.+30     	; 0xf76 <__mulsf3+0x5c>
     f58:	89 89       	ldd	r24, Y+17	; 0x11
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	c0 f0       	brcs	.+48     	; 0xf8e <__mulsf3+0x74>
     f5e:	94 30       	cpi	r25, 0x04	; 4
     f60:	19 f4       	brne	.+6      	; 0xf68 <__mulsf3+0x4e>
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	41 f4       	brne	.+16     	; 0xf76 <__mulsf3+0x5c>
     f66:	cb c0       	rjmp	.+406    	; 0x10fe <__mulsf3+0x1e4>
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	19 f4       	brne	.+6      	; 0xf72 <__mulsf3+0x58>
     f6c:	92 30       	cpi	r25, 0x02	; 2
     f6e:	79 f4       	brne	.+30     	; 0xf8e <__mulsf3+0x74>
     f70:	c6 c0       	rjmp	.+396    	; 0x10fe <__mulsf3+0x1e4>
     f72:	92 30       	cpi	r25, 0x02	; 2
     f74:	51 f4       	brne	.+20     	; 0xf8a <__mulsf3+0x70>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	2a 85       	ldd	r18, Y+10	; 0x0a
     f7a:	9a 89       	ldd	r25, Y+18	; 0x12
     f7c:	29 17       	cp	r18, r25
     f7e:	09 f4       	brne	.+2      	; 0xf82 <__mulsf3+0x68>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	8a 87       	std	Y+10, r24	; 0x0a
     f84:	ce 01       	movw	r24, r28
     f86:	09 96       	adiw	r24, 0x09	; 9
     f88:	bc c0       	rjmp	.+376    	; 0x1102 <__mulsf3+0x1e8>
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	51 f4       	brne	.+20     	; 0xfa2 <__mulsf3+0x88>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	2a 85       	ldd	r18, Y+10	; 0x0a
     f92:	9a 89       	ldd	r25, Y+18	; 0x12
     f94:	29 17       	cp	r18, r25
     f96:	09 f4       	brne	.+2      	; 0xf9a <__mulsf3+0x80>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	8a 8b       	std	Y+18, r24	; 0x12
     f9c:	ce 01       	movw	r24, r28
     f9e:	41 96       	adiw	r24, 0x11	; 17
     fa0:	b0 c0       	rjmp	.+352    	; 0x1102 <__mulsf3+0x1e8>
     fa2:	6d 84       	ldd	r6, Y+13	; 0x0d
     fa4:	7e 84       	ldd	r7, Y+14	; 0x0e
     fa6:	8f 84       	ldd	r8, Y+15	; 0x0f
     fa8:	98 88       	ldd	r9, Y+16	; 0x10
     faa:	ed 88       	ldd	r14, Y+21	; 0x15
     fac:	fe 88       	ldd	r15, Y+22	; 0x16
     fae:	0f 89       	ldd	r16, Y+23	; 0x17
     fb0:	18 8d       	ldd	r17, Y+24	; 0x18
     fb2:	e0 e2       	ldi	r30, 0x20	; 32
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	dc 01       	movw	r26, r24
     fbc:	aa 24       	eor	r10, r10
     fbe:	bb 24       	eor	r11, r11
     fc0:	65 01       	movw	r12, r10
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	a9 01       	movw	r20, r18
     fc8:	b3 01       	movw	r22, r6
     fca:	61 70       	andi	r22, 0x01	; 1
     fcc:	70 70       	andi	r23, 0x00	; 0
     fce:	61 15       	cp	r22, r1
     fd0:	71 05       	cpc	r23, r1
     fd2:	d1 f0       	breq	.+52     	; 0x1008 <__mulsf3+0xee>
     fd4:	2e 0d       	add	r18, r14
     fd6:	3f 1d       	adc	r19, r15
     fd8:	40 1f       	adc	r20, r16
     fda:	51 1f       	adc	r21, r17
     fdc:	15 01       	movw	r2, r10
     fde:	26 01       	movw	r4, r12
     fe0:	28 0e       	add	r2, r24
     fe2:	39 1e       	adc	r3, r25
     fe4:	4a 1e       	adc	r4, r26
     fe6:	5b 1e       	adc	r5, r27
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a0 e0       	ldi	r26, 0x00	; 0
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	2e 15       	cp	r18, r14
     ff2:	3f 05       	cpc	r19, r15
     ff4:	40 07       	cpc	r20, r16
     ff6:	51 07       	cpc	r21, r17
     ff8:	18 f0       	brcs	.+6      	; 0x1000 <__mulsf3+0xe6>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	dc 01       	movw	r26, r24
    1000:	82 0d       	add	r24, r2
    1002:	93 1d       	adc	r25, r3
    1004:	a4 1d       	adc	r26, r4
    1006:	b5 1d       	adc	r27, r5
    1008:	aa 0c       	add	r10, r10
    100a:	bb 1c       	adc	r11, r11
    100c:	cc 1c       	adc	r12, r12
    100e:	dd 1c       	adc	r13, r13
    1010:	17 ff       	sbrs	r17, 7
    1012:	09 c0       	rjmp	.+18     	; 0x1026 <__mulsf3+0x10c>
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	26 2e       	mov	r2, r22
    1018:	31 2c       	mov	r3, r1
    101a:	41 2c       	mov	r4, r1
    101c:	51 2c       	mov	r5, r1
    101e:	a2 28       	or	r10, r2
    1020:	b3 28       	or	r11, r3
    1022:	c4 28       	or	r12, r4
    1024:	d5 28       	or	r13, r5
    1026:	31 97       	sbiw	r30, 0x01	; 1
    1028:	49 f0       	breq	.+18     	; 0x103c <__mulsf3+0x122>
    102a:	ee 0c       	add	r14, r14
    102c:	ff 1c       	adc	r15, r15
    102e:	00 1f       	adc	r16, r16
    1030:	11 1f       	adc	r17, r17
    1032:	96 94       	lsr	r9
    1034:	87 94       	ror	r8
    1036:	77 94       	ror	r7
    1038:	67 94       	ror	r6
    103a:	c6 cf       	rjmp	.-116    	; 0xfc8 <__mulsf3+0xae>
    103c:	6b 89       	ldd	r22, Y+19	; 0x13
    103e:	7c 89       	ldd	r23, Y+20	; 0x14
    1040:	eb 85       	ldd	r30, Y+11	; 0x0b
    1042:	fc 85       	ldd	r31, Y+12	; 0x0c
    1044:	6e 0f       	add	r22, r30
    1046:	7f 1f       	adc	r23, r31
    1048:	6e 5f       	subi	r22, 0xFE	; 254
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	7c 8f       	std	Y+28, r23	; 0x1c
    104e:	6b 8f       	std	Y+27, r22	; 0x1b
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	ea 85       	ldd	r30, Y+10	; 0x0a
    1054:	7a 89       	ldd	r23, Y+18	; 0x12
    1056:	e7 17       	cp	r30, r23
    1058:	09 f4       	brne	.+2      	; 0x105c <__mulsf3+0x142>
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	6a 8f       	std	Y+26, r22	; 0x1a
    105e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1060:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1062:	10 c0       	rjmp	.+32     	; 0x1084 <__mulsf3+0x16a>
    1064:	fc 01       	movw	r30, r24
    1066:	e1 70       	andi	r30, 0x01	; 1
    1068:	f0 70       	andi	r31, 0x00	; 0
    106a:	30 97       	sbiw	r30, 0x00	; 0
    106c:	29 f0       	breq	.+10     	; 0x1078 <__mulsf3+0x15e>
    106e:	56 95       	lsr	r21
    1070:	47 95       	ror	r20
    1072:	37 95       	ror	r19
    1074:	27 95       	ror	r18
    1076:	50 68       	ori	r21, 0x80	; 128
    1078:	b6 95       	lsr	r27
    107a:	a7 95       	ror	r26
    107c:	97 95       	ror	r25
    107e:	87 95       	ror	r24
    1080:	6f 5f       	subi	r22, 0xFF	; 255
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	b7 fd       	sbrc	r27, 7
    1086:	ee cf       	rjmp	.-36     	; 0x1064 <__mulsf3+0x14a>
    1088:	0c c0       	rjmp	.+24     	; 0x10a2 <__mulsf3+0x188>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	aa 1f       	adc	r26, r26
    1090:	bb 1f       	adc	r27, r27
    1092:	57 fd       	sbrc	r21, 7
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	22 0f       	add	r18, r18
    1098:	33 1f       	adc	r19, r19
    109a:	44 1f       	adc	r20, r20
    109c:	55 1f       	adc	r21, r21
    109e:	61 50       	subi	r22, 0x01	; 1
    10a0:	70 40       	sbci	r23, 0x00	; 0
    10a2:	80 30       	cpi	r24, 0x00	; 0
    10a4:	e0 e0       	ldi	r30, 0x00	; 0
    10a6:	9e 07       	cpc	r25, r30
    10a8:	e0 e0       	ldi	r30, 0x00	; 0
    10aa:	ae 07       	cpc	r26, r30
    10ac:	e0 e4       	ldi	r30, 0x40	; 64
    10ae:	be 07       	cpc	r27, r30
    10b0:	60 f3       	brcs	.-40     	; 0x108a <__mulsf3+0x170>
    10b2:	6b 8f       	std	Y+27, r22	; 0x1b
    10b4:	7c 8f       	std	Y+28, r23	; 0x1c
    10b6:	6f e7       	ldi	r22, 0x7F	; 127
    10b8:	e6 2e       	mov	r14, r22
    10ba:	f1 2c       	mov	r15, r1
    10bc:	01 2d       	mov	r16, r1
    10be:	11 2d       	mov	r17, r1
    10c0:	e8 22       	and	r14, r24
    10c2:	f9 22       	and	r15, r25
    10c4:	0a 23       	and	r16, r26
    10c6:	1b 23       	and	r17, r27
    10c8:	60 e4       	ldi	r22, 0x40	; 64
    10ca:	e6 16       	cp	r14, r22
    10cc:	f1 04       	cpc	r15, r1
    10ce:	01 05       	cpc	r16, r1
    10d0:	11 05       	cpc	r17, r1
    10d2:	61 f4       	brne	.+24     	; 0x10ec <__mulsf3+0x1d2>
    10d4:	87 fd       	sbrc	r24, 7
    10d6:	0a c0       	rjmp	.+20     	; 0x10ec <__mulsf3+0x1d2>
    10d8:	21 15       	cp	r18, r1
    10da:	31 05       	cpc	r19, r1
    10dc:	41 05       	cpc	r20, r1
    10de:	51 05       	cpc	r21, r1
    10e0:	29 f0       	breq	.+10     	; 0x10ec <__mulsf3+0x1d2>
    10e2:	80 5c       	subi	r24, 0xC0	; 192
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	af 4f       	sbci	r26, 0xFF	; 255
    10e8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ea:	80 78       	andi	r24, 0x80	; 128
    10ec:	8d 8f       	std	Y+29, r24	; 0x1d
    10ee:	9e 8f       	std	Y+30, r25	; 0x1e
    10f0:	af 8f       	std	Y+31, r26	; 0x1f
    10f2:	b8 a3       	std	Y+32, r27	; 0x20
    10f4:	83 e0       	ldi	r24, 0x03	; 3
    10f6:	89 8f       	std	Y+25, r24	; 0x19
    10f8:	ce 01       	movw	r24, r28
    10fa:	49 96       	adiw	r24, 0x19	; 25
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <__mulsf3+0x1e8>
    10fe:	80 e6       	ldi	r24, 0x60	; 96
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 69 09 	call	0x12d2	; 0x12d2 <__pack_f>
    1106:	a0 96       	adiw	r28, 0x20	; 32
    1108:	e2 e1       	ldi	r30, 0x12	; 18
    110a:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__epilogue_restores__>

0000110e <__gtsf2>:
    110e:	a8 e1       	ldi	r26, 0x18	; 24
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ed e8       	ldi	r30, 0x8D	; 141
    1114:	f8 e0       	ldi	r31, 0x08	; 8
    1116:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__prologue_saves__+0x18>
    111a:	69 83       	std	Y+1, r22	; 0x01
    111c:	7a 83       	std	Y+2, r23	; 0x02
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	9c 83       	std	Y+4, r25	; 0x04
    1122:	2d 83       	std	Y+5, r18	; 0x05
    1124:	3e 83       	std	Y+6, r19	; 0x06
    1126:	4f 83       	std	Y+7, r20	; 0x07
    1128:	58 87       	std	Y+8, r21	; 0x08
    112a:	8e 01       	movw	r16, r28
    112c:	07 5f       	subi	r16, 0xF7	; 247
    112e:	1f 4f       	sbci	r17, 0xFF	; 255
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	b8 01       	movw	r22, r16
    1136:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
    113a:	81 e1       	ldi	r24, 0x11	; 17
    113c:	e8 2e       	mov	r14, r24
    113e:	f1 2c       	mov	r15, r1
    1140:	ec 0e       	add	r14, r28
    1142:	fd 1e       	adc	r15, r29
    1144:	ce 01       	movw	r24, r28
    1146:	05 96       	adiw	r24, 0x05	; 5
    1148:	b7 01       	movw	r22, r14
    114a:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
    114e:	89 85       	ldd	r24, Y+9	; 0x09
    1150:	82 30       	cpi	r24, 0x02	; 2
    1152:	40 f0       	brcs	.+16     	; 0x1164 <__gtsf2+0x56>
    1154:	89 89       	ldd	r24, Y+17	; 0x11
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	28 f0       	brcs	.+10     	; 0x1164 <__gtsf2+0x56>
    115a:	c8 01       	movw	r24, r16
    115c:	b7 01       	movw	r22, r14
    115e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__fpcmp_parts_f>
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <__gtsf2+0x58>
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	68 96       	adiw	r28, 0x18	; 24
    1168:	e6 e0       	ldi	r30, 0x06	; 6
    116a:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__epilogue_restores__+0x18>

0000116e <__gesf2>:
    116e:	a8 e1       	ldi	r26, 0x18	; 24
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ed eb       	ldi	r30, 0xBD	; 189
    1174:	f8 e0       	ldi	r31, 0x08	; 8
    1176:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__prologue_saves__+0x18>
    117a:	69 83       	std	Y+1, r22	; 0x01
    117c:	7a 83       	std	Y+2, r23	; 0x02
    117e:	8b 83       	std	Y+3, r24	; 0x03
    1180:	9c 83       	std	Y+4, r25	; 0x04
    1182:	2d 83       	std	Y+5, r18	; 0x05
    1184:	3e 83       	std	Y+6, r19	; 0x06
    1186:	4f 83       	std	Y+7, r20	; 0x07
    1188:	58 87       	std	Y+8, r21	; 0x08
    118a:	8e 01       	movw	r16, r28
    118c:	07 5f       	subi	r16, 0xF7	; 247
    118e:	1f 4f       	sbci	r17, 0xFF	; 255
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	b8 01       	movw	r22, r16
    1196:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
    119a:	81 e1       	ldi	r24, 0x11	; 17
    119c:	e8 2e       	mov	r14, r24
    119e:	f1 2c       	mov	r15, r1
    11a0:	ec 0e       	add	r14, r28
    11a2:	fd 1e       	adc	r15, r29
    11a4:	ce 01       	movw	r24, r28
    11a6:	05 96       	adiw	r24, 0x05	; 5
    11a8:	b7 01       	movw	r22, r14
    11aa:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
    11ae:	89 85       	ldd	r24, Y+9	; 0x09
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	40 f0       	brcs	.+16     	; 0x11c4 <__gesf2+0x56>
    11b4:	89 89       	ldd	r24, Y+17	; 0x11
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	28 f0       	brcs	.+10     	; 0x11c4 <__gesf2+0x56>
    11ba:	c8 01       	movw	r24, r16
    11bc:	b7 01       	movw	r22, r14
    11be:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__fpcmp_parts_f>
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <__gesf2+0x58>
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	68 96       	adiw	r28, 0x18	; 24
    11c8:	e6 e0       	ldi	r30, 0x06	; 6
    11ca:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__epilogue_restores__+0x18>

000011ce <__ltsf2>:
    11ce:	a8 e1       	ldi	r26, 0x18	; 24
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ed ee       	ldi	r30, 0xED	; 237
    11d4:	f8 e0       	ldi	r31, 0x08	; 8
    11d6:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__prologue_saves__+0x18>
    11da:	69 83       	std	Y+1, r22	; 0x01
    11dc:	7a 83       	std	Y+2, r23	; 0x02
    11de:	8b 83       	std	Y+3, r24	; 0x03
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	2d 83       	std	Y+5, r18	; 0x05
    11e4:	3e 83       	std	Y+6, r19	; 0x06
    11e6:	4f 83       	std	Y+7, r20	; 0x07
    11e8:	58 87       	std	Y+8, r21	; 0x08
    11ea:	8e 01       	movw	r16, r28
    11ec:	07 5f       	subi	r16, 0xF7	; 247
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	b8 01       	movw	r22, r16
    11f6:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
    11fa:	81 e1       	ldi	r24, 0x11	; 17
    11fc:	e8 2e       	mov	r14, r24
    11fe:	f1 2c       	mov	r15, r1
    1200:	ec 0e       	add	r14, r28
    1202:	fd 1e       	adc	r15, r29
    1204:	ce 01       	movw	r24, r28
    1206:	05 96       	adiw	r24, 0x05	; 5
    1208:	b7 01       	movw	r22, r14
    120a:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
    120e:	89 85       	ldd	r24, Y+9	; 0x09
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	40 f0       	brcs	.+16     	; 0x1224 <__ltsf2+0x56>
    1214:	89 89       	ldd	r24, Y+17	; 0x11
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	28 f0       	brcs	.+10     	; 0x1224 <__ltsf2+0x56>
    121a:	c8 01       	movw	r24, r16
    121c:	b7 01       	movw	r22, r14
    121e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__fpcmp_parts_f>
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <__ltsf2+0x58>
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	68 96       	adiw	r28, 0x18	; 24
    1228:	e6 e0       	ldi	r30, 0x06	; 6
    122a:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__epilogue_restores__+0x18>

0000122e <__fixsfsi>:
    122e:	ac e0       	ldi	r26, 0x0C	; 12
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ed e1       	ldi	r30, 0x1D	; 29
    1234:	f9 e0       	ldi	r31, 0x09	; 9
    1236:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__prologue_saves__+0x20>
    123a:	69 83       	std	Y+1, r22	; 0x01
    123c:	7a 83       	std	Y+2, r23	; 0x02
    123e:	8b 83       	std	Y+3, r24	; 0x03
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	be 01       	movw	r22, r28
    1248:	6b 5f       	subi	r22, 0xFB	; 251
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	0e 94 37 0a 	call	0x146e	; 0x146e <__unpack_f>
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	81 f1       	breq	.+96     	; 0x12b6 <__fixsfsi+0x88>
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	70 f1       	brcs	.+92     	; 0x12b6 <__fixsfsi+0x88>
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	21 f4       	brne	.+8      	; 0x1266 <__fixsfsi+0x38>
    125e:	8e 81       	ldd	r24, Y+6	; 0x06
    1260:	88 23       	and	r24, r24
    1262:	69 f1       	breq	.+90     	; 0x12be <__fixsfsi+0x90>
    1264:	0a c0       	rjmp	.+20     	; 0x127a <__fixsfsi+0x4c>
    1266:	2f 81       	ldd	r18, Y+7	; 0x07
    1268:	38 85       	ldd	r19, Y+8	; 0x08
    126a:	37 fd       	sbrc	r19, 7
    126c:	24 c0       	rjmp	.+72     	; 0x12b6 <__fixsfsi+0x88>
    126e:	6e 81       	ldd	r22, Y+6	; 0x06
    1270:	2f 31       	cpi	r18, 0x1F	; 31
    1272:	31 05       	cpc	r19, r1
    1274:	3c f0       	brlt	.+14     	; 0x1284 <__fixsfsi+0x56>
    1276:	66 23       	and	r22, r22
    1278:	11 f1       	breq	.+68     	; 0x12be <__fixsfsi+0x90>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e8       	ldi	r21, 0x80	; 128
    1282:	21 c0       	rjmp	.+66     	; 0x12c6 <__fixsfsi+0x98>
    1284:	8e e1       	ldi	r24, 0x1E	; 30
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	82 1b       	sub	r24, r18
    128a:	93 0b       	sbc	r25, r19
    128c:	29 85       	ldd	r18, Y+9	; 0x09
    128e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1290:	4b 85       	ldd	r20, Y+11	; 0x0b
    1292:	5c 85       	ldd	r21, Y+12	; 0x0c
    1294:	04 c0       	rjmp	.+8      	; 0x129e <__fixsfsi+0x70>
    1296:	56 95       	lsr	r21
    1298:	47 95       	ror	r20
    129a:	37 95       	ror	r19
    129c:	27 95       	ror	r18
    129e:	8a 95       	dec	r24
    12a0:	d2 f7       	brpl	.-12     	; 0x1296 <__fixsfsi+0x68>
    12a2:	66 23       	and	r22, r22
    12a4:	81 f0       	breq	.+32     	; 0x12c6 <__fixsfsi+0x98>
    12a6:	50 95       	com	r21
    12a8:	40 95       	com	r20
    12aa:	30 95       	com	r19
    12ac:	21 95       	neg	r18
    12ae:	3f 4f       	sbci	r19, 0xFF	; 255
    12b0:	4f 4f       	sbci	r20, 0xFF	; 255
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <__fixsfsi+0x98>
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__fixsfsi+0x98>
    12be:	2f ef       	ldi	r18, 0xFF	; 255
    12c0:	3f ef       	ldi	r19, 0xFF	; 255
    12c2:	4f ef       	ldi	r20, 0xFF	; 255
    12c4:	5f e7       	ldi	r21, 0x7F	; 127
    12c6:	b9 01       	movw	r22, r18
    12c8:	ca 01       	movw	r24, r20
    12ca:	2c 96       	adiw	r28, 0x0c	; 12
    12cc:	e2 e0       	ldi	r30, 0x02	; 2
    12ce:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__epilogue_restores__+0x20>

000012d2 <__pack_f>:
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	fc 01       	movw	r30, r24
    12e0:	24 81       	ldd	r18, Z+4	; 0x04
    12e2:	35 81       	ldd	r19, Z+5	; 0x05
    12e4:	46 81       	ldd	r20, Z+6	; 0x06
    12e6:	57 81       	ldd	r21, Z+7	; 0x07
    12e8:	61 81       	ldd	r22, Z+1	; 0x01
    12ea:	80 81       	ld	r24, Z
    12ec:	82 30       	cpi	r24, 0x02	; 2
    12ee:	20 f4       	brcc	.+8      	; 0x12f8 <__pack_f+0x26>
    12f0:	40 61       	ori	r20, 0x10	; 16
    12f2:	ef ef       	ldi	r30, 0xFF	; 255
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	a3 c0       	rjmp	.+326    	; 0x143e <__pack_f+0x16c>
    12f8:	84 30       	cpi	r24, 0x04	; 4
    12fa:	09 f4       	brne	.+2      	; 0x12fe <__pack_f+0x2c>
    12fc:	9b c0       	rjmp	.+310    	; 0x1434 <__pack_f+0x162>
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	09 f4       	brne	.+2      	; 0x1304 <__pack_f+0x32>
    1302:	92 c0       	rjmp	.+292    	; 0x1428 <__pack_f+0x156>
    1304:	21 15       	cp	r18, r1
    1306:	31 05       	cpc	r19, r1
    1308:	41 05       	cpc	r20, r1
    130a:	51 05       	cpc	r21, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <__pack_f+0x3e>
    130e:	8f c0       	rjmp	.+286    	; 0x142e <__pack_f+0x15c>
    1310:	02 80       	ldd	r0, Z+2	; 0x02
    1312:	f3 81       	ldd	r31, Z+3	; 0x03
    1314:	e0 2d       	mov	r30, r0
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	e2 38       	cpi	r30, 0x82	; 130
    131a:	f8 07       	cpc	r31, r24
    131c:	0c f0       	brlt	.+2      	; 0x1320 <__pack_f+0x4e>
    131e:	5a c0       	rjmp	.+180    	; 0x13d4 <__pack_f+0x102>
    1320:	c2 e8       	ldi	r28, 0x82	; 130
    1322:	df ef       	ldi	r29, 0xFF	; 255
    1324:	ce 1b       	sub	r28, r30
    1326:	df 0b       	sbc	r29, r31
    1328:	ca 31       	cpi	r28, 0x1A	; 26
    132a:	d1 05       	cpc	r29, r1
    132c:	6c f5       	brge	.+90     	; 0x1388 <__pack_f+0xb6>
    132e:	79 01       	movw	r14, r18
    1330:	8a 01       	movw	r16, r20
    1332:	0c 2e       	mov	r0, r28
    1334:	04 c0       	rjmp	.+8      	; 0x133e <__pack_f+0x6c>
    1336:	16 95       	lsr	r17
    1338:	07 95       	ror	r16
    133a:	f7 94       	ror	r15
    133c:	e7 94       	ror	r14
    133e:	0a 94       	dec	r0
    1340:	d2 f7       	brpl	.-12     	; 0x1336 <__pack_f+0x64>
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 e0       	ldi	r26, 0x00	; 0
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	0c 2e       	mov	r0, r28
    134c:	04 c0       	rjmp	.+8      	; 0x1356 <__pack_f+0x84>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	aa 1f       	adc	r26, r26
    1354:	bb 1f       	adc	r27, r27
    1356:	0a 94       	dec	r0
    1358:	d2 f7       	brpl	.-12     	; 0x134e <__pack_f+0x7c>
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	a1 09       	sbc	r26, r1
    135e:	b1 09       	sbc	r27, r1
    1360:	82 23       	and	r24, r18
    1362:	93 23       	and	r25, r19
    1364:	a4 23       	and	r26, r20
    1366:	b5 23       	and	r27, r21
    1368:	21 e0       	ldi	r18, 0x01	; 1
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	a1 05       	cpc	r26, r1
    1374:	b1 05       	cpc	r27, r1
    1376:	19 f4       	brne	.+6      	; 0x137e <__pack_f+0xac>
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	2e 29       	or	r18, r14
    1380:	3f 29       	or	r19, r15
    1382:	40 2b       	or	r20, r16
    1384:	51 2b       	or	r21, r17
    1386:	03 c0       	rjmp	.+6      	; 0x138e <__pack_f+0xbc>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	a9 01       	movw	r20, r18
    138e:	da 01       	movw	r26, r20
    1390:	c9 01       	movw	r24, r18
    1392:	8f 77       	andi	r24, 0x7F	; 127
    1394:	90 70       	andi	r25, 0x00	; 0
    1396:	a0 70       	andi	r26, 0x00	; 0
    1398:	b0 70       	andi	r27, 0x00	; 0
    139a:	80 34       	cpi	r24, 0x40	; 64
    139c:	91 05       	cpc	r25, r1
    139e:	a1 05       	cpc	r26, r1
    13a0:	b1 05       	cpc	r27, r1
    13a2:	39 f4       	brne	.+14     	; 0x13b2 <__pack_f+0xe0>
    13a4:	27 ff       	sbrs	r18, 7
    13a6:	09 c0       	rjmp	.+18     	; 0x13ba <__pack_f+0xe8>
    13a8:	20 5c       	subi	r18, 0xC0	; 192
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	4f 4f       	sbci	r20, 0xFF	; 255
    13ae:	5f 4f       	sbci	r21, 0xFF	; 255
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <__pack_f+0xe8>
    13b2:	21 5c       	subi	r18, 0xC1	; 193
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	4f 4f       	sbci	r20, 0xFF	; 255
    13b8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ba:	e1 e0       	ldi	r30, 0x01	; 1
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	20 30       	cpi	r18, 0x00	; 0
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	38 07       	cpc	r19, r24
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	48 07       	cpc	r20, r24
    13c8:	80 e4       	ldi	r24, 0x40	; 64
    13ca:	58 07       	cpc	r21, r24
    13cc:	28 f5       	brcc	.+74     	; 0x1418 <__pack_f+0x146>
    13ce:	e0 e0       	ldi	r30, 0x00	; 0
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	22 c0       	rjmp	.+68     	; 0x1418 <__pack_f+0x146>
    13d4:	e0 38       	cpi	r30, 0x80	; 128
    13d6:	f1 05       	cpc	r31, r1
    13d8:	6c f5       	brge	.+90     	; 0x1434 <__pack_f+0x162>
    13da:	e1 58       	subi	r30, 0x81	; 129
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	da 01       	movw	r26, r20
    13e0:	c9 01       	movw	r24, r18
    13e2:	8f 77       	andi	r24, 0x7F	; 127
    13e4:	90 70       	andi	r25, 0x00	; 0
    13e6:	a0 70       	andi	r26, 0x00	; 0
    13e8:	b0 70       	andi	r27, 0x00	; 0
    13ea:	80 34       	cpi	r24, 0x40	; 64
    13ec:	91 05       	cpc	r25, r1
    13ee:	a1 05       	cpc	r26, r1
    13f0:	b1 05       	cpc	r27, r1
    13f2:	39 f4       	brne	.+14     	; 0x1402 <__pack_f+0x130>
    13f4:	27 ff       	sbrs	r18, 7
    13f6:	09 c0       	rjmp	.+18     	; 0x140a <__pack_f+0x138>
    13f8:	20 5c       	subi	r18, 0xC0	; 192
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	4f 4f       	sbci	r20, 0xFF	; 255
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	04 c0       	rjmp	.+8      	; 0x140a <__pack_f+0x138>
    1402:	21 5c       	subi	r18, 0xC1	; 193
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	4f 4f       	sbci	r20, 0xFF	; 255
    1408:	5f 4f       	sbci	r21, 0xFF	; 255
    140a:	57 ff       	sbrs	r21, 7
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <__pack_f+0x146>
    140e:	56 95       	lsr	r21
    1410:	47 95       	ror	r20
    1412:	37 95       	ror	r19
    1414:	27 95       	ror	r18
    1416:	31 96       	adiw	r30, 0x01	; 1
    1418:	87 e0       	ldi	r24, 0x07	; 7
    141a:	56 95       	lsr	r21
    141c:	47 95       	ror	r20
    141e:	37 95       	ror	r19
    1420:	27 95       	ror	r18
    1422:	8a 95       	dec	r24
    1424:	d1 f7       	brne	.-12     	; 0x141a <__pack_f+0x148>
    1426:	0b c0       	rjmp	.+22     	; 0x143e <__pack_f+0x16c>
    1428:	e0 e0       	ldi	r30, 0x00	; 0
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <__pack_f+0x166>
    142e:	e0 e0       	ldi	r30, 0x00	; 0
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	05 c0       	rjmp	.+10     	; 0x143e <__pack_f+0x16c>
    1434:	ef ef       	ldi	r30, 0xFF	; 255
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	a9 01       	movw	r20, r18
    143e:	8e 2f       	mov	r24, r30
    1440:	87 95       	ror	r24
    1442:	88 27       	eor	r24, r24
    1444:	87 95       	ror	r24
    1446:	94 2f       	mov	r25, r20
    1448:	9f 77       	andi	r25, 0x7F	; 127
    144a:	67 95       	ror	r22
    144c:	66 27       	eor	r22, r22
    144e:	67 95       	ror	r22
    1450:	e6 95       	lsr	r30
    1452:	e2 2e       	mov	r14, r18
    1454:	a9 2f       	mov	r26, r25
    1456:	a8 2b       	or	r26, r24
    1458:	fe 2f       	mov	r31, r30
    145a:	f6 2b       	or	r31, r22
    145c:	62 2f       	mov	r22, r18
    145e:	73 2f       	mov	r23, r19
    1460:	8a 2f       	mov	r24, r26
    1462:	9f 2f       	mov	r25, r31
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	e6 e0       	ldi	r30, 0x06	; 6
    146a:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__epilogue_restores__+0x18>

0000146e <__unpack_f>:
    146e:	dc 01       	movw	r26, r24
    1470:	fb 01       	movw	r30, r22
    1472:	2c 91       	ld	r18, X
    1474:	11 96       	adiw	r26, 0x01	; 1
    1476:	3c 91       	ld	r19, X
    1478:	11 97       	sbiw	r26, 0x01	; 1
    147a:	12 96       	adiw	r26, 0x02	; 2
    147c:	8c 91       	ld	r24, X
    147e:	12 97       	sbiw	r26, 0x02	; 2
    1480:	48 2f       	mov	r20, r24
    1482:	4f 77       	andi	r20, 0x7F	; 127
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	98 2f       	mov	r25, r24
    1488:	99 1f       	adc	r25, r25
    148a:	99 27       	eor	r25, r25
    148c:	99 1f       	adc	r25, r25
    148e:	13 96       	adiw	r26, 0x03	; 3
    1490:	6c 91       	ld	r22, X
    1492:	13 97       	sbiw	r26, 0x03	; 3
    1494:	86 2f       	mov	r24, r22
    1496:	88 0f       	add	r24, r24
    1498:	89 2b       	or	r24, r25
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	66 1f       	adc	r22, r22
    149e:	66 27       	eor	r22, r22
    14a0:	66 1f       	adc	r22, r22
    14a2:	61 83       	std	Z+1, r22	; 0x01
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	39 f5       	brne	.+78     	; 0x14f6 <__unpack_f+0x88>
    14a8:	21 15       	cp	r18, r1
    14aa:	31 05       	cpc	r19, r1
    14ac:	41 05       	cpc	r20, r1
    14ae:	51 05       	cpc	r21, r1
    14b0:	11 f4       	brne	.+4      	; 0x14b6 <__unpack_f+0x48>
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	29 c0       	rjmp	.+82     	; 0x1508 <__unpack_f+0x9a>
    14b6:	82 e8       	ldi	r24, 0x82	; 130
    14b8:	9f ef       	ldi	r25, 0xFF	; 255
    14ba:	93 83       	std	Z+3, r25	; 0x03
    14bc:	82 83       	std	Z+2, r24	; 0x02
    14be:	67 e0       	ldi	r22, 0x07	; 7
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	44 1f       	adc	r20, r20
    14c6:	55 1f       	adc	r21, r21
    14c8:	6a 95       	dec	r22
    14ca:	d1 f7       	brne	.-12     	; 0x14c0 <__unpack_f+0x52>
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	80 83       	st	Z, r24
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <__unpack_f+0x76>
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	44 1f       	adc	r20, r20
    14d8:	55 1f       	adc	r21, r21
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	93 83       	std	Z+3, r25	; 0x03
    14e2:	82 83       	std	Z+2, r24	; 0x02
    14e4:	20 30       	cpi	r18, 0x00	; 0
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	38 07       	cpc	r19, r24
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	48 07       	cpc	r20, r24
    14ee:	80 e4       	ldi	r24, 0x40	; 64
    14f0:	58 07       	cpc	r21, r24
    14f2:	78 f3       	brcs	.-34     	; 0x14d2 <__unpack_f+0x64>
    14f4:	20 c0       	rjmp	.+64     	; 0x1536 <__unpack_f+0xc8>
    14f6:	8f 3f       	cpi	r24, 0xFF	; 255
    14f8:	91 05       	cpc	r25, r1
    14fa:	79 f4       	brne	.+30     	; 0x151a <__unpack_f+0xac>
    14fc:	21 15       	cp	r18, r1
    14fe:	31 05       	cpc	r19, r1
    1500:	41 05       	cpc	r20, r1
    1502:	51 05       	cpc	r21, r1
    1504:	19 f4       	brne	.+6      	; 0x150c <__unpack_f+0x9e>
    1506:	84 e0       	ldi	r24, 0x04	; 4
    1508:	80 83       	st	Z, r24
    150a:	08 95       	ret
    150c:	44 ff       	sbrs	r20, 4
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <__unpack_f+0xa8>
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	80 83       	st	Z, r24
    1514:	10 c0       	rjmp	.+32     	; 0x1536 <__unpack_f+0xc8>
    1516:	10 82       	st	Z, r1
    1518:	0e c0       	rjmp	.+28     	; 0x1536 <__unpack_f+0xc8>
    151a:	8f 57       	subi	r24, 0x7F	; 127
    151c:	90 40       	sbci	r25, 0x00	; 0
    151e:	93 83       	std	Z+3, r25	; 0x03
    1520:	82 83       	std	Z+2, r24	; 0x02
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	80 83       	st	Z, r24
    1526:	87 e0       	ldi	r24, 0x07	; 7
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	44 1f       	adc	r20, r20
    152e:	55 1f       	adc	r21, r21
    1530:	8a 95       	dec	r24
    1532:	d1 f7       	brne	.-12     	; 0x1528 <__unpack_f+0xba>
    1534:	50 64       	ori	r21, 0x40	; 64
    1536:	24 83       	std	Z+4, r18	; 0x04
    1538:	35 83       	std	Z+5, r19	; 0x05
    153a:	46 83       	std	Z+6, r20	; 0x06
    153c:	57 83       	std	Z+7, r21	; 0x07
    153e:	08 95       	ret

00001540 <__fpcmp_parts_f>:
    1540:	fc 01       	movw	r30, r24
    1542:	db 01       	movw	r26, r22
    1544:	90 81       	ld	r25, Z
    1546:	92 30       	cpi	r25, 0x02	; 2
    1548:	08 f4       	brcc	.+2      	; 0x154c <__fpcmp_parts_f+0xc>
    154a:	49 c0       	rjmp	.+146    	; 0x15de <__fpcmp_parts_f+0x9e>
    154c:	8c 91       	ld	r24, X
    154e:	82 30       	cpi	r24, 0x02	; 2
    1550:	08 f4       	brcc	.+2      	; 0x1554 <__fpcmp_parts_f+0x14>
    1552:	45 c0       	rjmp	.+138    	; 0x15de <__fpcmp_parts_f+0x9e>
    1554:	94 30       	cpi	r25, 0x04	; 4
    1556:	51 f4       	brne	.+20     	; 0x156c <__fpcmp_parts_f+0x2c>
    1558:	61 81       	ldd	r22, Z+1	; 0x01
    155a:	84 30       	cpi	r24, 0x04	; 4
    155c:	b1 f5       	brne	.+108    	; 0x15ca <__fpcmp_parts_f+0x8a>
    155e:	11 96       	adiw	r26, 0x01	; 1
    1560:	2c 91       	ld	r18, X
    1562:	11 97       	sbiw	r26, 0x01	; 1
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	26 1b       	sub	r18, r22
    1568:	31 09       	sbc	r19, r1
    156a:	41 c0       	rjmp	.+130    	; 0x15ee <__fpcmp_parts_f+0xae>
    156c:	84 30       	cpi	r24, 0x04	; 4
    156e:	21 f0       	breq	.+8      	; 0x1578 <__fpcmp_parts_f+0x38>
    1570:	92 30       	cpi	r25, 0x02	; 2
    1572:	41 f4       	brne	.+16     	; 0x1584 <__fpcmp_parts_f+0x44>
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	b1 f1       	breq	.+108    	; 0x15e4 <__fpcmp_parts_f+0xa4>
    1578:	11 96       	adiw	r26, 0x01	; 1
    157a:	8c 91       	ld	r24, X
    157c:	11 97       	sbiw	r26, 0x01	; 1
    157e:	88 23       	and	r24, r24
    1580:	a1 f1       	breq	.+104    	; 0x15ea <__fpcmp_parts_f+0xaa>
    1582:	2d c0       	rjmp	.+90     	; 0x15de <__fpcmp_parts_f+0x9e>
    1584:	61 81       	ldd	r22, Z+1	; 0x01
    1586:	82 30       	cpi	r24, 0x02	; 2
    1588:	01 f1       	breq	.+64     	; 0x15ca <__fpcmp_parts_f+0x8a>
    158a:	11 96       	adiw	r26, 0x01	; 1
    158c:	8c 91       	ld	r24, X
    158e:	11 97       	sbiw	r26, 0x01	; 1
    1590:	68 17       	cp	r22, r24
    1592:	d9 f4       	brne	.+54     	; 0x15ca <__fpcmp_parts_f+0x8a>
    1594:	22 81       	ldd	r18, Z+2	; 0x02
    1596:	33 81       	ldd	r19, Z+3	; 0x03
    1598:	12 96       	adiw	r26, 0x02	; 2
    159a:	8d 91       	ld	r24, X+
    159c:	9c 91       	ld	r25, X
    159e:	13 97       	sbiw	r26, 0x03	; 3
    15a0:	82 17       	cp	r24, r18
    15a2:	93 07       	cpc	r25, r19
    15a4:	94 f0       	brlt	.+36     	; 0x15ca <__fpcmp_parts_f+0x8a>
    15a6:	28 17       	cp	r18, r24
    15a8:	39 07       	cpc	r19, r25
    15aa:	bc f0       	brlt	.+46     	; 0x15da <__fpcmp_parts_f+0x9a>
    15ac:	24 81       	ldd	r18, Z+4	; 0x04
    15ae:	35 81       	ldd	r19, Z+5	; 0x05
    15b0:	46 81       	ldd	r20, Z+6	; 0x06
    15b2:	57 81       	ldd	r21, Z+7	; 0x07
    15b4:	14 96       	adiw	r26, 0x04	; 4
    15b6:	8d 91       	ld	r24, X+
    15b8:	9d 91       	ld	r25, X+
    15ba:	0d 90       	ld	r0, X+
    15bc:	bc 91       	ld	r27, X
    15be:	a0 2d       	mov	r26, r0
    15c0:	82 17       	cp	r24, r18
    15c2:	93 07       	cpc	r25, r19
    15c4:	a4 07       	cpc	r26, r20
    15c6:	b5 07       	cpc	r27, r21
    15c8:	18 f4       	brcc	.+6      	; 0x15d0 <__fpcmp_parts_f+0x90>
    15ca:	66 23       	and	r22, r22
    15cc:	41 f0       	breq	.+16     	; 0x15de <__fpcmp_parts_f+0x9e>
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <__fpcmp_parts_f+0xaa>
    15d0:	28 17       	cp	r18, r24
    15d2:	39 07       	cpc	r19, r25
    15d4:	4a 07       	cpc	r20, r26
    15d6:	5b 07       	cpc	r21, r27
    15d8:	28 f4       	brcc	.+10     	; 0x15e4 <__fpcmp_parts_f+0xa4>
    15da:	66 23       	and	r22, r22
    15dc:	31 f0       	breq	.+12     	; 0x15ea <__fpcmp_parts_f+0xaa>
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	05 c0       	rjmp	.+10     	; 0x15ee <__fpcmp_parts_f+0xae>
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <__fpcmp_parts_f+0xae>
    15ea:	2f ef       	ldi	r18, 0xFF	; 255
    15ec:	3f ef       	ldi	r19, 0xFF	; 255
    15ee:	c9 01       	movw	r24, r18
    15f0:	08 95       	ret

000015f2 <__udivmodsi4>:
    15f2:	a1 e2       	ldi	r26, 0x21	; 33
    15f4:	1a 2e       	mov	r1, r26
    15f6:	aa 1b       	sub	r26, r26
    15f8:	bb 1b       	sub	r27, r27
    15fa:	fd 01       	movw	r30, r26
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <__udivmodsi4_ep>

000015fe <__udivmodsi4_loop>:
    15fe:	aa 1f       	adc	r26, r26
    1600:	bb 1f       	adc	r27, r27
    1602:	ee 1f       	adc	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	a2 17       	cp	r26, r18
    1608:	b3 07       	cpc	r27, r19
    160a:	e4 07       	cpc	r30, r20
    160c:	f5 07       	cpc	r31, r21
    160e:	20 f0       	brcs	.+8      	; 0x1618 <__udivmodsi4_ep>
    1610:	a2 1b       	sub	r26, r18
    1612:	b3 0b       	sbc	r27, r19
    1614:	e4 0b       	sbc	r30, r20
    1616:	f5 0b       	sbc	r31, r21

00001618 <__udivmodsi4_ep>:
    1618:	66 1f       	adc	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	1a 94       	dec	r1
    1622:	69 f7       	brne	.-38     	; 0x15fe <__udivmodsi4_loop>
    1624:	60 95       	com	r22
    1626:	70 95       	com	r23
    1628:	80 95       	com	r24
    162a:	90 95       	com	r25
    162c:	9b 01       	movw	r18, r22
    162e:	ac 01       	movw	r20, r24
    1630:	bd 01       	movw	r22, r26
    1632:	cf 01       	movw	r24, r30
    1634:	08 95       	ret

00001636 <__prologue_saves__>:
    1636:	2f 92       	push	r2
    1638:	3f 92       	push	r3
    163a:	4f 92       	push	r4
    163c:	5f 92       	push	r5
    163e:	6f 92       	push	r6
    1640:	7f 92       	push	r7
    1642:	8f 92       	push	r8
    1644:	9f 92       	push	r9
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	ca 1b       	sub	r28, r26
    1660:	db 0b       	sbc	r29, r27
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	09 94       	ijmp

0000166e <__epilogue_restores__>:
    166e:	2a 88       	ldd	r2, Y+18	; 0x12
    1670:	39 88       	ldd	r3, Y+17	; 0x11
    1672:	48 88       	ldd	r4, Y+16	; 0x10
    1674:	5f 84       	ldd	r5, Y+15	; 0x0f
    1676:	6e 84       	ldd	r6, Y+14	; 0x0e
    1678:	7d 84       	ldd	r7, Y+13	; 0x0d
    167a:	8c 84       	ldd	r8, Y+12	; 0x0c
    167c:	9b 84       	ldd	r9, Y+11	; 0x0b
    167e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1680:	b9 84       	ldd	r11, Y+9	; 0x09
    1682:	c8 84       	ldd	r12, Y+8	; 0x08
    1684:	df 80       	ldd	r13, Y+7	; 0x07
    1686:	ee 80       	ldd	r14, Y+6	; 0x06
    1688:	fd 80       	ldd	r15, Y+5	; 0x05
    168a:	0c 81       	ldd	r16, Y+4	; 0x04
    168c:	1b 81       	ldd	r17, Y+3	; 0x03
    168e:	aa 81       	ldd	r26, Y+2	; 0x02
    1690:	b9 81       	ldd	r27, Y+1	; 0x01
    1692:	ce 0f       	add	r28, r30
    1694:	d1 1d       	adc	r29, r1
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	ed 01       	movw	r28, r26
    16a2:	08 95       	ret

000016a4 <itoa>:
    16a4:	fb 01       	movw	r30, r22
    16a6:	9f 01       	movw	r18, r30
    16a8:	e8 94       	clt
    16aa:	42 30       	cpi	r20, 0x02	; 2
    16ac:	c4 f0       	brlt	.+48     	; 0x16de <itoa+0x3a>
    16ae:	45 32       	cpi	r20, 0x25	; 37
    16b0:	b4 f4       	brge	.+44     	; 0x16de <itoa+0x3a>
    16b2:	4a 30       	cpi	r20, 0x0A	; 10
    16b4:	29 f4       	brne	.+10     	; 0x16c0 <itoa+0x1c>
    16b6:	97 fb       	bst	r25, 7
    16b8:	1e f4       	brtc	.+6      	; 0x16c0 <itoa+0x1c>
    16ba:	90 95       	com	r25
    16bc:	81 95       	neg	r24
    16be:	9f 4f       	sbci	r25, 0xFF	; 255
    16c0:	64 2f       	mov	r22, r20
    16c2:	77 27       	eor	r23, r23
    16c4:	0e 94 83 0b 	call	0x1706	; 0x1706 <__udivmodhi4>
    16c8:	80 5d       	subi	r24, 0xD0	; 208
    16ca:	8a 33       	cpi	r24, 0x3A	; 58
    16cc:	0c f0       	brlt	.+2      	; 0x16d0 <itoa+0x2c>
    16ce:	89 5d       	subi	r24, 0xD9	; 217
    16d0:	81 93       	st	Z+, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	a1 f7       	brne	.-24     	; 0x16c0 <itoa+0x1c>
    16d8:	16 f4       	brtc	.+4      	; 0x16de <itoa+0x3a>
    16da:	5d e2       	ldi	r21, 0x2D	; 45
    16dc:	51 93       	st	Z+, r21
    16de:	10 82       	st	Z, r1
    16e0:	c9 01       	movw	r24, r18
    16e2:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <strrev>

000016e6 <strrev>:
    16e6:	dc 01       	movw	r26, r24
    16e8:	fc 01       	movw	r30, r24
    16ea:	67 2f       	mov	r22, r23
    16ec:	71 91       	ld	r23, Z+
    16ee:	77 23       	and	r23, r23
    16f0:	e1 f7       	brne	.-8      	; 0x16ea <strrev+0x4>
    16f2:	32 97       	sbiw	r30, 0x02	; 2
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <strrev+0x18>
    16f6:	7c 91       	ld	r23, X
    16f8:	6d 93       	st	X+, r22
    16fa:	70 83       	st	Z, r23
    16fc:	62 91       	ld	r22, -Z
    16fe:	ae 17       	cp	r26, r30
    1700:	bf 07       	cpc	r27, r31
    1702:	c8 f3       	brcs	.-14     	; 0x16f6 <strrev+0x10>
    1704:	08 95       	ret

00001706 <__udivmodhi4>:
    1706:	aa 1b       	sub	r26, r26
    1708:	bb 1b       	sub	r27, r27
    170a:	51 e1       	ldi	r21, 0x11	; 17
    170c:	07 c0       	rjmp	.+14     	; 0x171c <__udivmodhi4_ep>

0000170e <__udivmodhi4_loop>:
    170e:	aa 1f       	adc	r26, r26
    1710:	bb 1f       	adc	r27, r27
    1712:	a6 17       	cp	r26, r22
    1714:	b7 07       	cpc	r27, r23
    1716:	10 f0       	brcs	.+4      	; 0x171c <__udivmodhi4_ep>
    1718:	a6 1b       	sub	r26, r22
    171a:	b7 0b       	sbc	r27, r23

0000171c <__udivmodhi4_ep>:
    171c:	88 1f       	adc	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	5a 95       	dec	r21
    1722:	a9 f7       	brne	.-22     	; 0x170e <__udivmodhi4_loop>
    1724:	80 95       	com	r24
    1726:	90 95       	com	r25
    1728:	bc 01       	movw	r22, r24
    172a:	cd 01       	movw	r24, r26
    172c:	08 95       	ret

0000172e <_exit>:
    172e:	f8 94       	cli

00001730 <__stop_program>:
    1730:	ff cf       	rjmp	.-2      	; 0x1730 <__stop_program>
